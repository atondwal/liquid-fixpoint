//qualif NonNull(v: [a])        : (? (nonnull([v])))
//qualif Null(v: [a])           : (~ (? (nonnull([v]))))
//qualif EqNull(v:Bool, ~A: [a]): (Prop(v) <=> (? (nonnull([~A]))))

qualif IsEmp(v:GHC.Types.Bool, ~A: [a]) : (Prop(v) <=> len([~A]) [ > ;  = ] 0)
qualif ListZ(v: [a])          : len([v]) [ = ; >= ; > ] 0 
qualif CmpLen(v:[a], ~A:[b])  : len([v]) [= ; >=; >; <=; <] len([~A]) 
qualif EqLen(v:int, ~A: [a])  : v = len([~A]) 
qualif LenEq(v:[a], ~A: int)  : ~A = len([v]) 
qualif LenAcc(v:int, ~A:[a], ~B: int): v = len([~A]) + ~B
qualif LenDiff(v:[a], ~A:int): len([v]) = (~A [ +; - ] 1)
//BOT: Do not delete EVER!

qualif Bot(v:@(0))    : 0 = 1 
qualif Bot(v:obj)     : 0 = 1 
qualif Bot(v:a)       : 0 = 1 
qualif Bot(v:bool)    : 0 = 1 
qualif Bot(v:int)     : 0 = 1 
qualif CmpZ(v:a)      : v [ < ; <= ; > ; >= ; = ; != ] 0
qualif Cmp(v:a,~A:a)  : v [ < ; <= ; > ; >= ; = ; != ] ~A
qualif Cmp(v:int,~A:int)  : v [ < ; <= ; > ; >= ; = ; != ] ~A
qualif One(v:int)     : v = 1
qualif True(v:bool)   : (? v) 
qualif False(v:bool)  : ~ (? v) 
qualif True1(v:GHC.Types.Bool)   : Prop(v)
qualif False1(v:GHC.Types.Bool)  : ~ Prop(v)


qualif Papp(v:a,~P:Pred a) : papp1(~P, v)
constant papp1 : func(1, [Pred @(0); @(0); bool])

qualif Papp2(v:a,~X:b,~P:Pred a b) : papp2(~P, v, ~X)
constant papp2 : func(4, [Pred @(0) @(1); @(2); @(3); bool])

qualif Papp3(v:a,~X:b, ~Y:c, ~P:Pred a b c) : papp3(~P, v, ~X, ~Y)
constant papp3 : func(6, [Pred @(0) @(1) @(2); @(3); @(4); @(5); bool])

// qualif Papp4(v:a,~X:b, ~Y:c, ~Z:d, ~P:Pred a b c d) : papp4(~P, v, ~X, ~Y, ~Z)
constant papp4 : func(8, [Pred @(0) @(1) @(2) @(6); @(3); @(4); @(5); @(7); bool])


constant Prop : func(0, [GHC.Types.Bool; bool])
qualif NotA(v : ResolveB.Bar): (? notA([v])) // "/Users/niki/liquidtypes/liquidhaskell/tests/pos/ResolveA.hs" (line 13, column 12)
qualif Fst(v : a, fix##126#Y : b): (v = fst([fix##126#Y])) // "/Users/niki/.cabal/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.3.1.0/include/GHC/Base.spec" (line 26, column 8)
qualif Snd(v : a, fix##126#Y : b): (v = snd([fix##126#Y])) // "/Users/niki/.cabal/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.3.1.0/include/GHC/Base.spec" (line 27, column 8)
qualif Auto(v : ResolveB.Bar): (v = ResolveB.B#rpw) // "Resolve.hs" (line 8, column 1)
qualif Auto(v : ResolveB.Bar): (v != ResolveB.A#rpx) // "Resolve.hs" (line 8, column 1)

constant Prop : func(0, [GHC.Types.Bool; bool])
constant x_Tuple64 : func(6, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5);
                              @(3)])
constant x_Tuple54 : func(5, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4);
                              @(3)])
constant x_Tuple44 : func(4, [FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3);
                              @(3)])
constant xListSelector : func(1, [[@(0)]; @(0)])
constant x_Tuple41 : func(4, [FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3);
                              @(0)])
constant x_Tuple76 : func(7, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6);
                              @(5)])
constant notA : func(0, [ResolveB.Bar; bool])
constant addrLen : func(0, [int; int])
constant x_Tuple65 : func(6, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5);
                              @(4)])
constant x_Tuple52 : func(5, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4);
                              @(1)])
constant x_Tuple75 : func(7, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6);
                              @(4)])
constant getFoo : func(0, [ResolveB.Foo; int])
constant x_Tuple33 : func(3, [FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2);
                              @(2)])
constant getFooA : func(0, [ResolveA.Foo; int])
constant fst : func(2, [FAppTy (FAppTy fix##40##41#  @(0))  @(1);
                        @(0)])
constant x_Tuple73 : func(7, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6);
                              @(2)])
constant x_Tuple31 : func(3, [FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2);
                              @(0)])
constant x_Tuple43 : func(4, [FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3);
                              @(2)])
constant x_Tuple71 : func(7, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6);
                              @(0)])
constant x_Tuple32 : func(3, [FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2);
                              @(1)])
constant x_Tuple72 : func(7, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6);
                              @(1)])
constant x_Tuple63 : func(6, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5);
                              @(2)])
constant x_Tuple51 : func(5, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4);
                              @(0)])
constant len : func(1, [[@(0)]; int])
constant null : func(1, [[@(0)]; bool])
constant x_Tuple53 : func(5, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4);
                              @(2)])
constant fromJust : func(1, [FAppTy Data.Maybe.Maybe  @(0); @(0)])
constant snd : func(2, [FAppTy (FAppTy fix##40##41#  @(0))  @(1);
                        @(1)])
constant x_Tuple62 : func(6, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5);
                              @(1)])
constant ResolveB.B#rpw : ResolveB.Bar
constant x_Tuple55 : func(5, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4);
                              @(4)])
constant x_Tuple74 : func(7, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6);
                              @(3)])
constant cmp : func(0, [GHC.Types.Ordering; GHC.Types.Ordering])
constant x_Tuple42 : func(4, [FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3);
                              @(1)])
constant xsListSelector : func(1, [[@(0)]; [@(0)]])
constant x_Tuple61 : func(6, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5);
                              @(0)])
constant x_Tuple22 : func(2, [FAppTy (FAppTy fix##40##41#  @(0))  @(1);
                              @(1)])
constant isJust : func(1, [FAppTy Data.Maybe.Maybe  @(0); bool])
constant x_Tuple66 : func(6, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5);
                              @(5)])
constant x_Tuple21 : func(2, [FAppTy (FAppTy fix##40##41#  @(0))  @(1);
                              @(0)])
constant x_Tuple77 : func(7, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6);
                              @(6)])
bind 0 ResolveB.B#rpw : {VV#93 : ResolveB.Bar | []}
bind 1 ResolveB.A#rpx : {VV#94 : ResolveB.Bar | []}
bind 2 GHC.Types.EQ#6U : {VV#95 : GHC.Types.Ordering | []}
bind 3 GHC.Types.LT#6S : {VV#96 : GHC.Types.Ordering | []}
bind 4 GHC.Types.GT#6W : {VV#97 : GHC.Types.Ordering | []}
bind 5 ResolveB.B#rpw : {VV#98 : ResolveB.Bar | []}
bind 6 GHC.Integer.Type.smallInteger#0Z : {VV : func(0, [int;
                                                         int]) | []}
bind 7 GHC.Types.I##6c : {VV : func(0, [int; int]) | []}
bind 8 fix#GHC.Prim.#43##35##35#98 : {VV : func(0, [int;
                                                    int;
                                                    int]) | []}
bind 9 fix#GHC.Prim.#45##35##35#99 : {VV : func(0, [int;
                                                    int;
                                                    int]) | []}
bind 10 fix#GHC.Prim.#61##61##35##35#9o : {VV : func(0, [int;
                                                         int;
                                                         int]) | []}
bind 11 fix#GHC.Prim.#62##61##35##35#9n : {VV : func(0, [int;
                                                         int;
                                                         int]) | []}
bind 12 fix#GHC.Prim.#60##61##35##35#9r : {VV : func(0, [int;
                                                         int;
                                                         int]) | []}
bind 13 fix#GHC.Prim.#60##35##35#9q : {VV : func(0, [int;
                                                     int;
                                                     int]) | []}
bind 14 fix#GHC.Prim.#62##35##35#9m : {VV : func(0, [int;
                                                     int;
                                                     int]) | []}
bind 15 ResolveB.A#rpx : {VV#113 : ResolveB.Bar | [((? notA([VV#113])) <=> false)]}
bind 16 GHC.Types.EQ#6U : {VV#115 : GHC.Types.Ordering | [(cmp([VV#115]) = GHC.Types.EQ#6U)]}
bind 17 GHC.Types.LT#6S : {VV#117 : GHC.Types.Ordering | [(cmp([VV#117]) = GHC.Types.LT#6S)]}
bind 18 GHC.Types.GT#6W : {VV#118 : GHC.Types.Ordering | [(cmp([VV#118]) = GHC.Types.GT#6W)]}
bind 19 ResolveB.Foo#rpz : {VV : func(0, [int; ResolveB.Foo]) | []}
bind 20 ResolveB.C#rpv : {VV#124 : ResolveB.Bar | [((? notA([VV#124])) <=> false)]}
bind 21 ResolveA.Foo#rJU : {VV : func(0, [int; ResolveA.Foo]) | []}
bind 22 ResolveB.B#rpw : {VV#130 : ResolveB.Bar | [((? notA([VV#130])) <=> true)]}
bind 23 Resolve.x#rJZ : {v : ResolveB.Bar | [&& [(v = ResolveB.B#rpw);
                                                 (v != ResolveB.A#rpx)]]}
bind 24 VV#134 : {VV#134 : ResolveB.Bar | [((? notA([VV#134])) <=> true);
                                           (VV#134 = ResolveB.B#rpw)]}
bind 25 VV#134 : {VV#134 : ResolveB.Bar | [((? notA([VV#134])) <=> true);
                                           (VV#134 = ResolveB.B#rpw)]}


constraint:
  env [0;
       16;
       1;
       17;
       2;
       18;
       3;
       19;
       4;
       20;
       5;
       21;
       6;
       22;
       7;
       8;
       24;
       9;
       10;
       11;
       12;
       13;
       14;
       15]
  grd true
  lhs {VV#F1 : ResolveB.Bar | [((? notA([VV#F1])) <=> true);
                               (VV#F1 = ResolveB.B#rpw);
                               true]}
  rhs {VV#F1 : ResolveB.Bar | [&& [(VV#F1 = ResolveB.B#rpw);
                                   (VV#F1 != ResolveB.A#rpx)]]}
  id 1 tag [1]