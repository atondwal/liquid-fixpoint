qualif Fst(v : @(1), fix##126#Y : @(0)): (v = fst([fix##126#Y])) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.spec" (line 27, column 8)
qualif Snd(v : @(1), fix##126#Y : @(0)): (v = snd([fix##126#Y])) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.spec" (line 28, column 8)
qualif Auto(VV : FAppTy Foo.RBTree  t_a1QI): (? isRB([VV])) // "RBTree.hs" (line 81, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  t_a1QI): (? isBH([VV])) // "RBTree.hs" (line 81, column 1)
qualif Auto(VV : t_a1QI, fix##126#A0 : t_a1QI): (VV < fix##126#A0) // "RBTree.hs" (line 81, column 1)
qualif Auto(VV : t_a1QI, fix##126#A0 : t_a1QI): (VV < fix##126#A0) // "RBTree.hs" (line 81, column 1)
qualif Auto(VV : t_a1QI, fix##126#A0 : t_a1QI): (VV > fix##126#A0) // "RBTree.hs" (line 81, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  t_a1QI): (? isRB([VV])) // "RBTree.hs" (line 81, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  t_a1QI): (? isBH([VV])) // "RBTree.hs" (line 81, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  t_a1QI, fix##126#A0 : FAppTy Foo.RBTree  t_a1QI): (bh([VV]) = bh([fix##126#A0])) // "RBTree.hs" (line 81, column 1)
qualif Auto(VV : t_a1QI, fix##126#A0 : t_a1QI): (fix##126#A0 < VV) // "RBTree.hs" (line 81, column 1)
qualif Auto(VV : t_a1QI, fix##126#A0 : t_a1QI): (VV < fix##126#A0) // "RBTree.hs" (line 81, column 1)
qualif Auto(VV : t_a1QI, fix##126#A0 : t_a1QI): (VV > fix##126#A0) // "RBTree.hs" (line 81, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  t_a1QI): (? isARB([VV])) // "RBTree.hs" (line 81, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  t_a1QI): (? isBH([VV])) // "RBTree.hs" (line 81, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  t_a1QI, fix##126#A0 : FAppTy Foo.RBTree  t_a1QI): (bh([VV]) = bh([fix##126#A0])) // "RBTree.hs" (line 81, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  t_a1QI, fix##126#A0 : FAppTy Foo.RBTree  t_a1QI, fix##126#A1 : FAppTy Foo.RBTree  t_a1QI): (&& [(~ ((col([fix##126#A0]) = Foo.R#r12h)));
                                                                                                                                    (~ ((col([fix##126#A1]) = Foo.R#r12h)))] => (? isRB([VV]))) // "RBTree.hs" (line 81, column 1)
qualif Auto(VV : t_a1QI, fix##126#A0 : t_a1QI): (VV < fix##126#A0) // "RBTree.hs" (line 81, column 1)
qualif Auto(VV : t_a1QI, fix##126#A0 : t_a1QI): (VV > fix##126#A0) // "RBTree.hs" (line 81, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Q8): (? isARB([VV])) // "RBTree.hs" (line 90, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Q8): (? isBH([VV])) // "RBTree.hs" (line 90, column 1)
qualif Auto(VV : a_a1Q8, fix##126#A0 : a_a1Q8): (VV < fix##126#A0) // "RBTree.hs" (line 90, column 1)
qualif Auto(VV : a_a1Q8, fix##126#A0 : a_a1Q8): (VV < fix##126#A0) // "RBTree.hs" (line 90, column 1)
qualif Auto(VV : a_a1Q8, fix##126#A0 : a_a1Q8): (VV > fix##126#A0) // "RBTree.hs" (line 90, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Q8): (? isRB([VV])) // "RBTree.hs" (line 90, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Q8): (? isBH([VV])) // "RBTree.hs" (line 90, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Q8, fix##126#A0 : FAppTy Foo.RBTree  a_a1Q8): (bh([VV]) = (1 + bh([fix##126#A0]))) // "RBTree.hs" (line 90, column 1)
qualif Auto(VV : a_a1Q8, fix##126#A0 : a_a1Q8): (fix##126#A0 < VV) // "RBTree.hs" (line 90, column 1)
qualif Auto(VV : a_a1Q8, fix##126#A0 : a_a1Q8): (VV < fix##126#A0) // "RBTree.hs" (line 90, column 1)
qualif Auto(VV : a_a1Q8, fix##126#A0 : a_a1Q8): (VV > fix##126#A0) // "RBTree.hs" (line 90, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Q8): (? isARB([VV])) // "RBTree.hs" (line 90, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Q8): (? isBH([VV])) // "RBTree.hs" (line 90, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Q8, fix##126#A0 : FAppTy Foo.RBTree  a_a1Q8): (bh([VV]) = (1 + bh([fix##126#A0]))) // "RBTree.hs" (line 90, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Q8, fix##126#A0 : FAppTy Foo.RBTree  a_a1Q8): ((~ ((col([fix##126#A0]) = Foo.R#r12h))) => (? isRB([VV]))) // "RBTree.hs" (line 90, column 1)
qualif Auto(VV : a_a1Q8, fix##126#A0 : a_a1Q8): (VV < fix##126#A0) // "RBTree.hs" (line 90, column 1)
qualif Auto(VV : a_a1Q8, fix##126#A0 : a_a1Q8): (VV > fix##126#A0) // "RBTree.hs" (line 90, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1PH): (? isRB([VV])) // "RBTree.hs" (line 96, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1PH): (? isBH([VV])) // "RBTree.hs" (line 96, column 1)
qualif Auto(VV : a_a1PH, fix##126#A0 : a_a1PH): (VV < fix##126#A0) // "RBTree.hs" (line 96, column 1)
qualif Auto(VV : a_a1PH, fix##126#A0 : a_a1PH): (VV < fix##126#A0) // "RBTree.hs" (line 96, column 1)
qualif Auto(VV : a_a1PH, fix##126#A0 : a_a1PH): (VV > fix##126#A0) // "RBTree.hs" (line 96, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1PH): (? isARB([VV])) // "RBTree.hs" (line 96, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1PH): (? isBH([VV])) // "RBTree.hs" (line 96, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1PH, fix##126#A0 : FAppTy Foo.RBTree  a_a1PH): (bh([VV]) = (bh([fix##126#A0]) - 1)) // "RBTree.hs" (line 96, column 1)
qualif Auto(VV : a_a1PH, fix##126#A0 : a_a1PH): (fix##126#A0 < VV) // "RBTree.hs" (line 96, column 1)
qualif Auto(VV : a_a1PH, fix##126#A0 : a_a1PH): (VV < fix##126#A0) // "RBTree.hs" (line 96, column 1)
qualif Auto(VV : a_a1PH, fix##126#A0 : a_a1PH): (VV > fix##126#A0) // "RBTree.hs" (line 96, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1PH): (? isARB([VV])) // "RBTree.hs" (line 96, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1PH): (? isBH([VV])) // "RBTree.hs" (line 96, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1PH, fix##126#A0 : FAppTy Foo.RBTree  a_a1PH): (bh([VV]) = bh([fix##126#A0])) // "RBTree.hs" (line 96, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1PH, fix##126#A0 : FAppTy Foo.RBTree  a_a1PH): ((~ ((col([fix##126#A0]) = Foo.R#r12h))) => (? isRB([VV]))) // "RBTree.hs" (line 96, column 1)
qualif Auto(VV : a_a1PH, fix##126#A0 : a_a1PH): (VV < fix##126#A0) // "RBTree.hs" (line 96, column 1)
qualif Auto(VV : a_a1PH, fix##126#A0 : a_a1PH): (VV > fix##126#A0) // "RBTree.hs" (line 96, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Pg): (? isARB([VV])) // "RBTree.hs" (line 102, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Pg): (? isBH([VV])) // "RBTree.hs" (line 102, column 1)
qualif Auto(VV : a_a1Pg, fix##126#A0 : a_a1Pg): (VV < fix##126#A0) // "RBTree.hs" (line 102, column 1)
qualif Auto(VV : a_a1Pg, fix##126#A0 : a_a1Pg): (VV < fix##126#A0) // "RBTree.hs" (line 102, column 1)
qualif Auto(VV : a_a1Pg, fix##126#A0 : a_a1Pg): (VV > fix##126#A0) // "RBTree.hs" (line 102, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Pg): (? isRB([VV])) // "RBTree.hs" (line 102, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Pg): (? isBH([VV])) // "RBTree.hs" (line 102, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Pg, fix##126#A0 : FAppTy Foo.RBTree  a_a1Pg): (bh([VV]) = bh([fix##126#A0])) // "RBTree.hs" (line 102, column 1)
qualif Auto(VV : a_a1Pg, fix##126#A0 : a_a1Pg): (fix##126#A0 < VV) // "RBTree.hs" (line 102, column 1)
qualif Auto(VV : a_a1Pg, fix##126#A0 : a_a1Pg): (VV < fix##126#A0) // "RBTree.hs" (line 102, column 1)
qualif Auto(VV : a_a1Pg, fix##126#A0 : a_a1Pg): (VV > fix##126#A0) // "RBTree.hs" (line 102, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Pg): (? isRB([VV])) // "RBTree.hs" (line 102, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Pg): (? isBH([VV])) // "RBTree.hs" (line 102, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Pg, fix##126#A0 : FAppTy Foo.RBTree  a_a1Pg): (bh([VV]) = (1 + bh([fix##126#A0]))) // "RBTree.hs" (line 102, column 1)
qualif Auto(VV : a_a1Pg, fix##126#A0 : a_a1Pg): (VV < fix##126#A0) // "RBTree.hs" (line 102, column 1)
qualif Auto(VV : a_a1Pg, fix##126#A0 : a_a1Pg): (VV > fix##126#A0) // "RBTree.hs" (line 102, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Sc): (? isRB([VV])) // "RBTree.hs" (line 39, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Sc): (? isBH([VV])) // "RBTree.hs" (line 39, column 1)
qualif Auto(VV : a_a1Sc, fix##126#A0 : a_a1Sc): (VV < fix##126#A0) // "RBTree.hs" (line 39, column 1)
qualif Auto(VV : a_a1Sc, fix##126#A0 : a_a1Sc): (VV > fix##126#A0) // "RBTree.hs" (line 39, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Sc): (? isRB([VV])) // "RBTree.hs" (line 39, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Sc): (? isBH([VV])) // "RBTree.hs" (line 39, column 1)
qualif Auto(VV : a_a1Sc, fix##126#A0 : a_a1Sc): (VV < fix##126#A0) // "RBTree.hs" (line 39, column 1)
qualif Auto(VV : a_a1Sc, fix##126#A0 : a_a1Sc): (VV > fix##126#A0) // "RBTree.hs" (line 39, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1RQ): (? isRB([VV])) // "RBTree.hs" (line 44, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1RQ): (? isBH([VV])) // "RBTree.hs" (line 44, column 1)
qualif Auto(VV : a_a1RQ, fix##126#A0 : a_a1RQ): (VV < fix##126#A0) // "RBTree.hs" (line 44, column 1)
qualif Auto(VV : a_a1RQ, fix##126#A0 : a_a1RQ): (VV > fix##126#A0) // "RBTree.hs" (line 44, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1RQ): (? isARB([VV])) // "RBTree.hs" (line 44, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1RQ): (? isBH([VV])) // "RBTree.hs" (line 44, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1RQ, fix##126#A0 : FAppTy Foo.RBTree  a_a1RQ): (bh([VV]) = (if (? isB([fix##126#A0])) then (bh([fix##126#A0]) - 1) else bh([fix##126#A0]))) // "RBTree.hs" (line 44, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1RQ, fix##126#A0 : FAppTy Foo.RBTree  a_a1RQ): || [(? isB([fix##126#A0]));
                                                                                          (? isRB([VV]))] // "RBTree.hs" (line 44, column 1)
qualif Auto(VV : a_a1RQ, fix##126#A0 : a_a1RQ): (VV < fix##126#A0) // "RBTree.hs" (line 44, column 1)
qualif Auto(VV : a_a1RQ, fix##126#A0 : a_a1RQ): (VV > fix##126#A0) // "RBTree.hs" (line 44, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1NK): (? isRB([VV])) // "RBTree.hs" (line 58, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1NK): (? isBH([VV])) // "RBTree.hs" (line 58, column 1)
qualif Auto(VV : a_a1NK, fix##126#A0 : a_a1NK): (VV < fix##126#A0) // "RBTree.hs" (line 58, column 1)
qualif Auto(VV : a_a1NK, fix##126#A0 : a_a1NK): (VV < fix##126#A0) // "RBTree.hs" (line 58, column 1)
qualif Auto(VV : a_a1NK, fix##126#A0 : a_a1NK): (VV > fix##126#A0) // "RBTree.hs" (line 58, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1NK): (? isRB([VV])) // "RBTree.hs" (line 58, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1NK): (? isBH([VV])) // "RBTree.hs" (line 58, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1NK, fix##126#A0 : FAppTy Foo.RBTree  a_a1NK): (bh([VV]) = bh([fix##126#A0])) // "RBTree.hs" (line 58, column 1)
qualif Auto(VV : a_a1NK, fix##126#A0 : a_a1NK): (fix##126#A0 < VV) // "RBTree.hs" (line 58, column 1)
qualif Auto(VV : a_a1NK, fix##126#A0 : a_a1NK): (VV < fix##126#A0) // "RBTree.hs" (line 58, column 1)
qualif Auto(VV : a_a1NK, fix##126#A0 : a_a1NK): (VV > fix##126#A0) // "RBTree.hs" (line 58, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1NK): (? isARB([VV])) // "RBTree.hs" (line 58, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1NK): (? isBH([VV])) // "RBTree.hs" (line 58, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1NK, fix##126#A0 : FAppTy Foo.RBTree  a_a1NK): (bh([VV]) = bh([fix##126#A0])) // "RBTree.hs" (line 58, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1NK, fix##126#A0 : FAppTy Foo.RBTree  a_a1NK, fix##126#A1 : FAppTy Foo.RBTree  a_a1NK): (&& [(~ ((col([fix##126#A0]) = Foo.R#r12h)));
                                                                                                                                    (~ ((col([fix##126#A1]) = Foo.R#r12h)))] => (? isRB([VV]))) // "RBTree.hs" (line 58, column 1)
qualif Auto(VV : a_a1NK, fix##126#A0 : a_a1NK): (VV < fix##126#A0) // "RBTree.hs" (line 58, column 1)
qualif Auto(VV : a_a1NK, fix##126#A0 : a_a1NK): (VV > fix##126#A0) // "RBTree.hs" (line 58, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1R3): (? isRB([VV])) // "RBTree.hs" (line 74, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1R3): (? isBH([VV])) // "RBTree.hs" (line 74, column 1)
qualif Auto(VV : a_a1R3, fix##126#A0 : a_a1R3): (VV < fix##126#A0) // "RBTree.hs" (line 74, column 1)
qualif Auto(VV : a_a1R3, fix##126#A0 : a_a1R3): (VV > fix##126#A0) // "RBTree.hs" (line 74, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1R3): (? isRB([VV])) // "RBTree.hs" (line 74, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1R3): (? isBH([VV])) // "RBTree.hs" (line 74, column 1)
qualif Auto(VV : a_a1R3, fix##126#A0 : a_a1R3): (VV < fix##126#A0) // "RBTree.hs" (line 74, column 1)
qualif Auto(VV : a_a1R3, fix##126#A0 : a_a1R3): (VV > fix##126#A0) // "RBTree.hs" (line 74, column 1)
qualif Auto(v : FAppTy Foo.RBTree  a_a1NU, fix##126#A0 : FAppTy Foo.RBTree  a_a1NU): (&& [(? isARB([fix##126#A0]));
                                                                                          (~ ((col([fix##126#A0]) = Foo.R#r12h)))] => (? isRB([fix##126#A0]))) // "RBTree.hs" (line 212, column 1)
qualif Auto(v : FAppTy Foo.RBTree  a_a1NU): ((? isRB([v])) => (? isARB([v]))) // "RBTree.hs" (line 212, column 1)
qualif Auto(v : FAppTy Foo.RBTree  a_a1NU): (0 <= bh([v])) // "RBTree.hs" (line 212, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Tb): (? isRB([VV])) // "RBTree.hs" (line 21, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Tb): (? isBH([VV])) // "RBTree.hs" (line 21, column 1)
qualif Auto(VV : a_a1Tb, fix##126#A0 : a_a1Tb): (VV < fix##126#A0) // "RBTree.hs" (line 21, column 1)
qualif Auto(VV : a_a1Tb, fix##126#A0 : a_a1Tb): (VV > fix##126#A0) // "RBTree.hs" (line 21, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Tb): (? isRB([VV])) // "RBTree.hs" (line 21, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Tb): (? isBH([VV])) // "RBTree.hs" (line 21, column 1)
qualif Auto(VV : a_a1Tb, fix##126#A0 : a_a1Tb): (VV < fix##126#A0) // "RBTree.hs" (line 21, column 1)
qualif Auto(VV : a_a1Tb, fix##126#A0 : a_a1Tb): (VV > fix##126#A0) // "RBTree.hs" (line 21, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1SP): (? isRB([VV])) // "RBTree.hs" (line 24, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1SP): (? isBH([VV])) // "RBTree.hs" (line 24, column 1)
qualif Auto(VV : a_a1SP, fix##126#A0 : a_a1SP): (VV < fix##126#A0) // "RBTree.hs" (line 24, column 1)
qualif Auto(VV : a_a1SP, fix##126#A0 : a_a1SP): (VV > fix##126#A0) // "RBTree.hs" (line 24, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1SP): (? isARB([VV])) // "RBTree.hs" (line 24, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1SP): (? isBH([VV])) // "RBTree.hs" (line 24, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1SP, fix##126#A0 : FAppTy Foo.RBTree  a_a1SP): (bh([VV]) = bh([fix##126#A0])) // "RBTree.hs" (line 24, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1SP, fix##126#A0 : FAppTy Foo.RBTree  a_a1SP): ((~ ((col([fix##126#A0]) = Foo.R#r12h))) => (? isRB([VV]))) // "RBTree.hs" (line 24, column 1)
qualif Auto(VV : a_a1SP, fix##126#A0 : a_a1SP): (VV < fix##126#A0) // "RBTree.hs" (line 24, column 1)
qualif Auto(VV : a_a1SP, fix##126#A0 : a_a1SP): (VV > fix##126#A0) // "RBTree.hs" (line 24, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1OV): (? isRB([VV])) // "RBTree.hs" (line 107, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1OV): (? isBH([VV])) // "RBTree.hs" (line 107, column 1)
qualif Auto(VV : a_a1OV, fix##126#A0 : a_a1OV): (VV < fix##126#A0) // "RBTree.hs" (line 107, column 1)
qualif Auto(VV : a_a1OV, fix##126#A0 : a_a1OV): (VV < fix##126#A0) // "RBTree.hs" (line 107, column 1)
qualif Auto(VV : a_a1OV, fix##126#A0 : a_a1OV): (VV > fix##126#A0) // "RBTree.hs" (line 107, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1OV): (? isARB([VV])) // "RBTree.hs" (line 107, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1OV): (? isBH([VV])) // "RBTree.hs" (line 107, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1OV, fix##126#A0 : FAppTy Foo.RBTree  a_a1OV): (bh([VV]) = bh([fix##126#A0])) // "RBTree.hs" (line 107, column 1)
qualif Auto(VV : a_a1OV, fix##126#A0 : a_a1OV): (fix##126#A0 < VV) // "RBTree.hs" (line 107, column 1)
qualif Auto(VV : a_a1OV, fix##126#A0 : a_a1OV): (VV < fix##126#A0) // "RBTree.hs" (line 107, column 1)
qualif Auto(VV : a_a1OV, fix##126#A0 : a_a1OV): (VV > fix##126#A0) // "RBTree.hs" (line 107, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1OV): (? isRB([VV])) // "RBTree.hs" (line 107, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1OV): (? isBH([VV])) // "RBTree.hs" (line 107, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1OV, fix##126#A0 : FAppTy Foo.RBTree  a_a1OV): (bh([VV]) = (1 + bh([fix##126#A0]))) // "RBTree.hs" (line 107, column 1)
qualif Auto(VV : a_a1OV, fix##126#A0 : a_a1OV): (VV < fix##126#A0) // "RBTree.hs" (line 107, column 1)
qualif Auto(VV : a_a1OV, fix##126#A0 : a_a1OV): (VV > fix##126#A0) // "RBTree.hs" (line 107, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1OA): (? isRB([VV])) // "RBTree.hs" (line 118, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1OA): (? isBH([VV])) // "RBTree.hs" (line 118, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1OA): (~ ((col([VV]) = Foo.R#r12h))) // "RBTree.hs" (line 118, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1OA): (bh([VV]) > 0) // "RBTree.hs" (line 118, column 1)
qualif Auto(VV : a_a1OA, fix##126#A0 : a_a1OA): (VV < fix##126#A0) // "RBTree.hs" (line 118, column 1)
qualif Auto(VV : a_a1OA, fix##126#A0 : a_a1OA): (VV > fix##126#A0) // "RBTree.hs" (line 118, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1OA): (? isARB([VV])) // "RBTree.hs" (line 118, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1OA): (? isBH([VV])) // "RBTree.hs" (line 118, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1OA, fix##126#A0 : FAppTy Foo.RBTree  a_a1OA): (bh([VV]) = (bh([fix##126#A0]) - 1)) // "RBTree.hs" (line 118, column 1)
qualif Auto(VV : a_a1OA, fix##126#A0 : a_a1OA): (VV < fix##126#A0) // "RBTree.hs" (line 118, column 1)
qualif Auto(VV : a_a1OA, fix##126#A0 : a_a1OA): (VV > fix##126#A0) // "RBTree.hs" (line 118, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Om): (? isARB([VV])) // "RBTree.hs" (line 122, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Om): (? isBH([VV])) // "RBTree.hs" (line 122, column 1)
qualif Auto(VV : a_a1Om, fix##126#A0 : a_a1Om): (VV < fix##126#A0) // "RBTree.hs" (line 122, column 1)
qualif Auto(VV : a_a1Om, fix##126#A0 : a_a1Om): (VV > fix##126#A0) // "RBTree.hs" (line 122, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Om): (? isRB([VV])) // "RBTree.hs" (line 122, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Om): (? isBH([VV])) // "RBTree.hs" (line 122, column 1)
qualif Auto(VV : a_a1Om, fix##126#A0 : a_a1Om): (VV < fix##126#A0) // "RBTree.hs" (line 122, column 1)
qualif Auto(VV : a_a1Om, fix##126#A0 : a_a1Om): (VV > fix##126#A0) // "RBTree.hs" (line 122, column 1)
qualif Auto(v : FAppTy Foo.RBTree  a_a1O8): (&& [(? isARB([v]));
                                                 (~ ((col([v]) = Foo.R#r12h)))] => (? isRB([v]))) // "RBTree.hs" (line 208, column 1)
qualif Auto(v : FAppTy Foo.RBTree  a_a1O8): ((? isRB([v])) => (? isARB([v]))) // "RBTree.hs" (line 208, column 1)
qualif Auto(v : FAppTy Foo.RBTree  a_a1O8): (0 <= bh([v])) // "RBTree.hs" (line 208, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  t_a1QI): (? isRB([VV])) // "RBTree.hs" (line 81, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  t_a1QI): (? isBH([VV])) // "RBTree.hs" (line 81, column 1)
qualif Auto(VV : t_a1QI, fix##126#A0 : t_a1QI): (VV < fix##126#A0) // "RBTree.hs" (line 81, column 1)
qualif Auto(VV : t_a1QI, fix##126#A0 : t_a1QI): (VV < fix##126#A0) // "RBTree.hs" (line 81, column 1)
qualif Auto(VV : t_a1QI, fix##126#A0 : t_a1QI): (VV > fix##126#A0) // "RBTree.hs" (line 81, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  t_a1QI): (? isRB([VV])) // "RBTree.hs" (line 81, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  t_a1QI): (? isBH([VV])) // "RBTree.hs" (line 81, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  t_a1QI, fix##126#A0 : FAppTy Foo.RBTree  t_a1QI): (bh([VV]) = bh([fix##126#A0])) // "RBTree.hs" (line 81, column 1)
qualif Auto(VV : t_a1QI, fix##126#A0 : t_a1QI): (fix##126#A0 < VV) // "RBTree.hs" (line 81, column 1)
qualif Auto(VV : t_a1QI, fix##126#A0 : t_a1QI): (VV < fix##126#A0) // "RBTree.hs" (line 81, column 1)
qualif Auto(VV : t_a1QI, fix##126#A0 : t_a1QI): (VV > fix##126#A0) // "RBTree.hs" (line 81, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  t_a1QI): (? isARB([VV])) // "RBTree.hs" (line 81, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  t_a1QI): (? isBH([VV])) // "RBTree.hs" (line 81, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  t_a1QI, fix##126#A0 : FAppTy Foo.RBTree  t_a1QI): (bh([VV]) = bh([fix##126#A0])) // "RBTree.hs" (line 81, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  t_a1QI, fix##126#A0 : FAppTy Foo.RBTree  t_a1QI, fix##126#A1 : FAppTy Foo.RBTree  t_a1QI): (&& [(~ ((col([fix##126#A0]) = Foo.R#r12h)));
                                                                                                                                    (~ ((col([fix##126#A1]) = Foo.R#r12h)))] => (? isRB([VV]))) // "RBTree.hs" (line 81, column 1)
qualif Auto(VV : t_a1QI, fix##126#A0 : t_a1QI): (VV < fix##126#A0) // "RBTree.hs" (line 81, column 1)
qualif Auto(VV : t_a1QI, fix##126#A0 : t_a1QI): (VV > fix##126#A0) // "RBTree.hs" (line 81, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Q8): (? isARB([VV])) // "RBTree.hs" (line 90, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Q8): (? isBH([VV])) // "RBTree.hs" (line 90, column 1)
qualif Auto(VV : a_a1Q8, fix##126#A0 : a_a1Q8): (VV < fix##126#A0) // "RBTree.hs" (line 90, column 1)
qualif Auto(VV : a_a1Q8, fix##126#A0 : a_a1Q8): (VV < fix##126#A0) // "RBTree.hs" (line 90, column 1)
qualif Auto(VV : a_a1Q8, fix##126#A0 : a_a1Q8): (VV > fix##126#A0) // "RBTree.hs" (line 90, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Q8): (? isRB([VV])) // "RBTree.hs" (line 90, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Q8): (? isBH([VV])) // "RBTree.hs" (line 90, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Q8, fix##126#A0 : FAppTy Foo.RBTree  a_a1Q8): (bh([VV]) = (1 + bh([fix##126#A0]))) // "RBTree.hs" (line 90, column 1)
qualif Auto(VV : a_a1Q8, fix##126#A0 : a_a1Q8): (fix##126#A0 < VV) // "RBTree.hs" (line 90, column 1)
qualif Auto(VV : a_a1Q8, fix##126#A0 : a_a1Q8): (VV < fix##126#A0) // "RBTree.hs" (line 90, column 1)
qualif Auto(VV : a_a1Q8, fix##126#A0 : a_a1Q8): (VV > fix##126#A0) // "RBTree.hs" (line 90, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Q8): (? isARB([VV])) // "RBTree.hs" (line 90, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Q8): (? isBH([VV])) // "RBTree.hs" (line 90, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Q8, fix##126#A0 : FAppTy Foo.RBTree  a_a1Q8): (bh([VV]) = (1 + bh([fix##126#A0]))) // "RBTree.hs" (line 90, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Q8, fix##126#A0 : FAppTy Foo.RBTree  a_a1Q8): ((~ ((col([fix##126#A0]) = Foo.R#r12h))) => (? isRB([VV]))) // "RBTree.hs" (line 90, column 1)
qualif Auto(VV : a_a1Q8, fix##126#A0 : a_a1Q8): (VV < fix##126#A0) // "RBTree.hs" (line 90, column 1)
qualif Auto(VV : a_a1Q8, fix##126#A0 : a_a1Q8): (VV > fix##126#A0) // "RBTree.hs" (line 90, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1PH): (? isRB([VV])) // "RBTree.hs" (line 96, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1PH): (? isBH([VV])) // "RBTree.hs" (line 96, column 1)
qualif Auto(VV : a_a1PH, fix##126#A0 : a_a1PH): (VV < fix##126#A0) // "RBTree.hs" (line 96, column 1)
qualif Auto(VV : a_a1PH, fix##126#A0 : a_a1PH): (VV < fix##126#A0) // "RBTree.hs" (line 96, column 1)
qualif Auto(VV : a_a1PH, fix##126#A0 : a_a1PH): (VV > fix##126#A0) // "RBTree.hs" (line 96, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1PH): (? isARB([VV])) // "RBTree.hs" (line 96, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1PH): (? isBH([VV])) // "RBTree.hs" (line 96, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1PH, fix##126#A0 : FAppTy Foo.RBTree  a_a1PH): (bh([VV]) = (bh([fix##126#A0]) - 1)) // "RBTree.hs" (line 96, column 1)
qualif Auto(VV : a_a1PH, fix##126#A0 : a_a1PH): (fix##126#A0 < VV) // "RBTree.hs" (line 96, column 1)
qualif Auto(VV : a_a1PH, fix##126#A0 : a_a1PH): (VV < fix##126#A0) // "RBTree.hs" (line 96, column 1)
qualif Auto(VV : a_a1PH, fix##126#A0 : a_a1PH): (VV > fix##126#A0) // "RBTree.hs" (line 96, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1PH): (? isARB([VV])) // "RBTree.hs" (line 96, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1PH): (? isBH([VV])) // "RBTree.hs" (line 96, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1PH, fix##126#A0 : FAppTy Foo.RBTree  a_a1PH): (bh([VV]) = bh([fix##126#A0])) // "RBTree.hs" (line 96, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1PH, fix##126#A0 : FAppTy Foo.RBTree  a_a1PH): ((~ ((col([fix##126#A0]) = Foo.R#r12h))) => (? isRB([VV]))) // "RBTree.hs" (line 96, column 1)
qualif Auto(VV : a_a1PH, fix##126#A0 : a_a1PH): (VV < fix##126#A0) // "RBTree.hs" (line 96, column 1)
qualif Auto(VV : a_a1PH, fix##126#A0 : a_a1PH): (VV > fix##126#A0) // "RBTree.hs" (line 96, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Pg): (? isARB([VV])) // "RBTree.hs" (line 102, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Pg): (? isBH([VV])) // "RBTree.hs" (line 102, column 1)
qualif Auto(VV : a_a1Pg, fix##126#A0 : a_a1Pg): (VV < fix##126#A0) // "RBTree.hs" (line 102, column 1)
qualif Auto(VV : a_a1Pg, fix##126#A0 : a_a1Pg): (VV < fix##126#A0) // "RBTree.hs" (line 102, column 1)
qualif Auto(VV : a_a1Pg, fix##126#A0 : a_a1Pg): (VV > fix##126#A0) // "RBTree.hs" (line 102, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Pg): (? isRB([VV])) // "RBTree.hs" (line 102, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Pg): (? isBH([VV])) // "RBTree.hs" (line 102, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Pg, fix##126#A0 : FAppTy Foo.RBTree  a_a1Pg): (bh([VV]) = bh([fix##126#A0])) // "RBTree.hs" (line 102, column 1)
qualif Auto(VV : a_a1Pg, fix##126#A0 : a_a1Pg): (fix##126#A0 < VV) // "RBTree.hs" (line 102, column 1)
qualif Auto(VV : a_a1Pg, fix##126#A0 : a_a1Pg): (VV < fix##126#A0) // "RBTree.hs" (line 102, column 1)
qualif Auto(VV : a_a1Pg, fix##126#A0 : a_a1Pg): (VV > fix##126#A0) // "RBTree.hs" (line 102, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Pg): (? isRB([VV])) // "RBTree.hs" (line 102, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Pg): (? isBH([VV])) // "RBTree.hs" (line 102, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Pg, fix##126#A0 : FAppTy Foo.RBTree  a_a1Pg): (bh([VV]) = (1 + bh([fix##126#A0]))) // "RBTree.hs" (line 102, column 1)
qualif Auto(VV : a_a1Pg, fix##126#A0 : a_a1Pg): (VV < fix##126#A0) // "RBTree.hs" (line 102, column 1)
qualif Auto(VV : a_a1Pg, fix##126#A0 : a_a1Pg): (VV > fix##126#A0) // "RBTree.hs" (line 102, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Sc): (? isRB([VV])) // "RBTree.hs" (line 39, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Sc): (? isBH([VV])) // "RBTree.hs" (line 39, column 1)
qualif Auto(VV : a_a1Sc, fix##126#A0 : a_a1Sc): (VV < fix##126#A0) // "RBTree.hs" (line 39, column 1)
qualif Auto(VV : a_a1Sc, fix##126#A0 : a_a1Sc): (VV > fix##126#A0) // "RBTree.hs" (line 39, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Sc): (? isRB([VV])) // "RBTree.hs" (line 39, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Sc): (? isBH([VV])) // "RBTree.hs" (line 39, column 1)
qualif Auto(VV : a_a1Sc, fix##126#A0 : a_a1Sc): (VV < fix##126#A0) // "RBTree.hs" (line 39, column 1)
qualif Auto(VV : a_a1Sc, fix##126#A0 : a_a1Sc): (VV > fix##126#A0) // "RBTree.hs" (line 39, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1RQ): (? isRB([VV])) // "RBTree.hs" (line 44, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1RQ): (? isBH([VV])) // "RBTree.hs" (line 44, column 1)
qualif Auto(VV : a_a1RQ, fix##126#A0 : a_a1RQ): (VV < fix##126#A0) // "RBTree.hs" (line 44, column 1)
qualif Auto(VV : a_a1RQ, fix##126#A0 : a_a1RQ): (VV > fix##126#A0) // "RBTree.hs" (line 44, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1RQ): (? isARB([VV])) // "RBTree.hs" (line 44, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1RQ): (? isBH([VV])) // "RBTree.hs" (line 44, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1RQ, fix##126#A0 : FAppTy Foo.RBTree  a_a1RQ): (bh([VV]) = (if (? isB([fix##126#A0])) then (bh([fix##126#A0]) - 1) else bh([fix##126#A0]))) // "RBTree.hs" (line 44, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1RQ, fix##126#A0 : FAppTy Foo.RBTree  a_a1RQ): || [(? isB([fix##126#A0]));
                                                                                          (? isRB([VV]))] // "RBTree.hs" (line 44, column 1)
qualif Auto(VV : a_a1RQ, fix##126#A0 : a_a1RQ): (VV < fix##126#A0) // "RBTree.hs" (line 44, column 1)
qualif Auto(VV : a_a1RQ, fix##126#A0 : a_a1RQ): (VV > fix##126#A0) // "RBTree.hs" (line 44, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1NK): (? isRB([VV])) // "RBTree.hs" (line 58, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1NK): (? isBH([VV])) // "RBTree.hs" (line 58, column 1)
qualif Auto(VV : a_a1NK, fix##126#A0 : a_a1NK): (VV < fix##126#A0) // "RBTree.hs" (line 58, column 1)
qualif Auto(VV : a_a1NK, fix##126#A0 : a_a1NK): (VV < fix##126#A0) // "RBTree.hs" (line 58, column 1)
qualif Auto(VV : a_a1NK, fix##126#A0 : a_a1NK): (VV > fix##126#A0) // "RBTree.hs" (line 58, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1NK): (? isRB([VV])) // "RBTree.hs" (line 58, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1NK): (? isBH([VV])) // "RBTree.hs" (line 58, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1NK, fix##126#A0 : FAppTy Foo.RBTree  a_a1NK): (bh([VV]) = bh([fix##126#A0])) // "RBTree.hs" (line 58, column 1)
qualif Auto(VV : a_a1NK, fix##126#A0 : a_a1NK): (fix##126#A0 < VV) // "RBTree.hs" (line 58, column 1)
qualif Auto(VV : a_a1NK, fix##126#A0 : a_a1NK): (VV < fix##126#A0) // "RBTree.hs" (line 58, column 1)
qualif Auto(VV : a_a1NK, fix##126#A0 : a_a1NK): (VV > fix##126#A0) // "RBTree.hs" (line 58, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1NK): (? isARB([VV])) // "RBTree.hs" (line 58, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1NK): (? isBH([VV])) // "RBTree.hs" (line 58, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1NK, fix##126#A0 : FAppTy Foo.RBTree  a_a1NK): (bh([VV]) = bh([fix##126#A0])) // "RBTree.hs" (line 58, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1NK, fix##126#A0 : FAppTy Foo.RBTree  a_a1NK, fix##126#A1 : FAppTy Foo.RBTree  a_a1NK): (&& [(~ ((col([fix##126#A0]) = Foo.R#r12h)));
                                                                                                                                    (~ ((col([fix##126#A1]) = Foo.R#r12h)))] => (? isRB([VV]))) // "RBTree.hs" (line 58, column 1)
qualif Auto(VV : a_a1NK, fix##126#A0 : a_a1NK): (VV < fix##126#A0) // "RBTree.hs" (line 58, column 1)
qualif Auto(VV : a_a1NK, fix##126#A0 : a_a1NK): (VV > fix##126#A0) // "RBTree.hs" (line 58, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1R3): (? isRB([VV])) // "RBTree.hs" (line 74, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1R3): (? isBH([VV])) // "RBTree.hs" (line 74, column 1)
qualif Auto(VV : a_a1R3, fix##126#A0 : a_a1R3): (VV < fix##126#A0) // "RBTree.hs" (line 74, column 1)
qualif Auto(VV : a_a1R3, fix##126#A0 : a_a1R3): (VV > fix##126#A0) // "RBTree.hs" (line 74, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1R3): (? isRB([VV])) // "RBTree.hs" (line 74, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1R3): (? isBH([VV])) // "RBTree.hs" (line 74, column 1)
qualif Auto(VV : a_a1R3, fix##126#A0 : a_a1R3): (VV < fix##126#A0) // "RBTree.hs" (line 74, column 1)
qualif Auto(VV : a_a1R3, fix##126#A0 : a_a1R3): (VV > fix##126#A0) // "RBTree.hs" (line 74, column 1)
qualif Auto(v : FAppTy Foo.RBTree  a_a1NU, fix##126#A0 : FAppTy Foo.RBTree  a_a1NU): (&& [(? isARB([fix##126#A0]));
                                                                                          (~ ((col([fix##126#A0]) = Foo.R#r12h)))] => (? isRB([fix##126#A0]))) // "RBTree.hs" (line 212, column 1)
qualif Auto(v : FAppTy Foo.RBTree  a_a1NU): ((? isRB([v])) => (? isARB([v]))) // "RBTree.hs" (line 212, column 1)
qualif Auto(v : FAppTy Foo.RBTree  a_a1NU): (0 <= bh([v])) // "RBTree.hs" (line 212, column 1)
qualif Auto(VV : a_a1aI, fix##126#A0 : a_a1aI): (? papp2([l;
                                                          VV;
                                                          fix##126#A0])) // "RBTree.hs" (line 9, column 17)
qualif Auto(vv : a_a1aI, fix##126#A0 : a_a1aI): (vv = fix##126#A0) // "RBTree.hs" (line 9, column 17)
qualif Auto(VV : a_a1aI, fix##126#A0 : a_a1aI): (? papp2([r;
                                                          VV;
                                                          fix##126#A0])) // "RBTree.hs" (line 9, column 17)
qualif Auto(vv : a_a1aI, fix##126#A0 : a_a1aI): (vv = fix##126#A0) // "RBTree.hs" (line 9, column 17)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1aI, fix##126#A0 : FAppTy Foo.RBTree  a_a1aI, fix##126#A1 : Foo.Color): (bh([VV]) = (bh([fix##126#A0]) + (if (fix##126#A1 = Foo.R#r12h) then 0 else 1))) // "RBTree.hs" (line 9, column 17)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1aI, fix##126#A0 : FAppTy Foo.RBTree  a_a1aI, fix##126#A1 : FAppTy Foo.RBTree  a_a1aI): ((? isBH([VV])) <=> && [(? isBH([fix##126#A0]));
                                                                                                                                                       && [(? isBH([fix##126#A1]));
                                                                                                                                                           (bh([fix##126#A0]) = bh([fix##126#A1]))]]) // "RBTree.hs" (line 9, column 17)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1aI, fix##126#A0 : Foo.Color): ((? isB([VV])) <=> (fix##126#A0 = Foo.B#r12i)) // "RBTree.hs" (line 9, column 17)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1aI, fix##126#A0 : Foo.Color): (col([VV]) = fix##126#A0) // "RBTree.hs" (line 9, column 17)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1aI, fix##126#A0 : FAppTy Foo.RBTree  a_a1aI, fix##126#A1 : FAppTy Foo.RBTree  a_a1aI): ((? isARB([VV])) <=> && [(? isRB([fix##126#A0]));
                                                                                                                                                        (? isRB([fix##126#A1]))]) // "RBTree.hs" (line 9, column 17)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1aI, fix##126#A0 : FAppTy Foo.RBTree  a_a1aI): (right([VV]) = fix##126#A0) // "RBTree.hs" (line 9, column 17)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1aI, fix##126#A0 : FAppTy Foo.RBTree  a_a1aI): (left([VV]) = fix##126#A0) // "RBTree.hs" (line 9, column 17)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1aI, fix##126#A0 : a_a1aI): (key([VV]) = fix##126#A0) // "RBTree.hs" (line 9, column 17)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1aI, fix##126#A0 : Foo.Color): (c([VV]) = fix##126#A0) // "RBTree.hs" (line 9, column 17)
qualif Auto(v : a_a1aI, fix##126#P : FAppTy (FAppTy Pred  a_a1aI)  a_a1aI, fix##126#A0 : a_a1aI): (? papp2([fix##126#P;
                                                                                                            v;
                                                                                                            fix##126#A0])) // "RBTree.hs" (line 9, column 17)
qualif Auto(v : a_a1aI, fix##126#P : FAppTy (FAppTy Pred  a_a1aI)  a_a1aI, fix##126#A0 : a_a1aI): (? papp2([fix##126#P;
                                                                                                            v;
                                                                                                            fix##126#A0])) // "RBTree.hs" (line 9, column 17)
qualif Auto(v : a_a1aI, fix##126#P : FAppTy (FAppTy Pred  a_a1aI)  a_a1aI, fix##126#A0 : a_a1aI): (? papp2([fix##126#P;
                                                                                                            v;
                                                                                                            fix##126#A0])) // "RBTree.hs" (line 9, column 17)
qualif Auto(v : a_a1aI, fix##126#P : FAppTy (FAppTy Pred  a_a1aI)  a_a1aI, fix##126#A0 : a_a1aI): (? papp2([fix##126#P;
                                                                                                            v;
                                                                                                            fix##126#A0])) // "RBTree.hs" (line 9, column 17)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Tb): (? isRB([VV])) // "RBTree.hs" (line 21, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Tb): (? isBH([VV])) // "RBTree.hs" (line 21, column 1)
qualif Auto(VV : a_a1Tb, fix##126#A0 : a_a1Tb): (VV < fix##126#A0) // "RBTree.hs" (line 21, column 1)
qualif Auto(VV : a_a1Tb, fix##126#A0 : a_a1Tb): (VV > fix##126#A0) // "RBTree.hs" (line 21, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Tb): (? isRB([VV])) // "RBTree.hs" (line 21, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Tb): (? isBH([VV])) // "RBTree.hs" (line 21, column 1)
qualif Auto(VV : a_a1Tb, fix##126#A0 : a_a1Tb): (VV < fix##126#A0) // "RBTree.hs" (line 21, column 1)
qualif Auto(VV : a_a1Tb, fix##126#A0 : a_a1Tb): (VV > fix##126#A0) // "RBTree.hs" (line 21, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1SP): (? isRB([VV])) // "RBTree.hs" (line 24, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1SP): (? isBH([VV])) // "RBTree.hs" (line 24, column 1)
qualif Auto(VV : a_a1SP, fix##126#A0 : a_a1SP): (VV < fix##126#A0) // "RBTree.hs" (line 24, column 1)
qualif Auto(VV : a_a1SP, fix##126#A0 : a_a1SP): (VV > fix##126#A0) // "RBTree.hs" (line 24, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1SP): (? isARB([VV])) // "RBTree.hs" (line 24, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1SP): (? isBH([VV])) // "RBTree.hs" (line 24, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1SP, fix##126#A0 : FAppTy Foo.RBTree  a_a1SP): (bh([VV]) = bh([fix##126#A0])) // "RBTree.hs" (line 24, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1SP, fix##126#A0 : FAppTy Foo.RBTree  a_a1SP): ((~ ((col([fix##126#A0]) = Foo.R#r12h))) => (? isRB([VV]))) // "RBTree.hs" (line 24, column 1)
qualif Auto(VV : a_a1SP, fix##126#A0 : a_a1SP): (VV < fix##126#A0) // "RBTree.hs" (line 24, column 1)
qualif Auto(VV : a_a1SP, fix##126#A0 : a_a1SP): (VV > fix##126#A0) // "RBTree.hs" (line 24, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1OV): (? isRB([VV])) // "RBTree.hs" (line 107, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1OV): (? isBH([VV])) // "RBTree.hs" (line 107, column 1)
qualif Auto(VV : a_a1OV, fix##126#A0 : a_a1OV): (VV < fix##126#A0) // "RBTree.hs" (line 107, column 1)
qualif Auto(VV : a_a1OV, fix##126#A0 : a_a1OV): (VV < fix##126#A0) // "RBTree.hs" (line 107, column 1)
qualif Auto(VV : a_a1OV, fix##126#A0 : a_a1OV): (VV > fix##126#A0) // "RBTree.hs" (line 107, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1OV): (? isARB([VV])) // "RBTree.hs" (line 107, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1OV): (? isBH([VV])) // "RBTree.hs" (line 107, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1OV, fix##126#A0 : FAppTy Foo.RBTree  a_a1OV): (bh([VV]) = bh([fix##126#A0])) // "RBTree.hs" (line 107, column 1)
qualif Auto(VV : a_a1OV, fix##126#A0 : a_a1OV): (fix##126#A0 < VV) // "RBTree.hs" (line 107, column 1)
qualif Auto(VV : a_a1OV, fix##126#A0 : a_a1OV): (VV < fix##126#A0) // "RBTree.hs" (line 107, column 1)
qualif Auto(VV : a_a1OV, fix##126#A0 : a_a1OV): (VV > fix##126#A0) // "RBTree.hs" (line 107, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1OV): (? isRB([VV])) // "RBTree.hs" (line 107, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1OV): (? isBH([VV])) // "RBTree.hs" (line 107, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1OV, fix##126#A0 : FAppTy Foo.RBTree  a_a1OV): (bh([VV]) = (1 + bh([fix##126#A0]))) // "RBTree.hs" (line 107, column 1)
qualif Auto(VV : a_a1OV, fix##126#A0 : a_a1OV): (VV < fix##126#A0) // "RBTree.hs" (line 107, column 1)
qualif Auto(VV : a_a1OV, fix##126#A0 : a_a1OV): (VV > fix##126#A0) // "RBTree.hs" (line 107, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1aI): (bh([VV]) = 0) // "RBTree.hs" (line 8, column 17)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1aI): ((? isBH([VV])) <=> true) // "RBTree.hs" (line 8, column 17)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1aI): ((? isB([VV])) <=> false) // "RBTree.hs" (line 8, column 17)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1aI): (col([VV]) = Foo.B#r12i) // "RBTree.hs" (line 8, column 17)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1aI): ((? isARB([VV])) <=> true) // "RBTree.hs" (line 8, column 17)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1aI): ((? isRB([VV])) <=> true) // "RBTree.hs" (line 8, column 17)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1OA): (? isRB([VV])) // "RBTree.hs" (line 118, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1OA): (? isBH([VV])) // "RBTree.hs" (line 118, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1OA): (~ ((col([VV]) = Foo.R#r12h))) // "RBTree.hs" (line 118, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1OA): (bh([VV]) > 0) // "RBTree.hs" (line 118, column 1)
qualif Auto(VV : a_a1OA, fix##126#A0 : a_a1OA): (VV < fix##126#A0) // "RBTree.hs" (line 118, column 1)
qualif Auto(VV : a_a1OA, fix##126#A0 : a_a1OA): (VV > fix##126#A0) // "RBTree.hs" (line 118, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1OA): (? isARB([VV])) // "RBTree.hs" (line 118, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1OA): (? isBH([VV])) // "RBTree.hs" (line 118, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1OA, fix##126#A0 : FAppTy Foo.RBTree  a_a1OA): (bh([VV]) = (bh([fix##126#A0]) - 1)) // "RBTree.hs" (line 118, column 1)
qualif Auto(VV : a_a1OA, fix##126#A0 : a_a1OA): (VV < fix##126#A0) // "RBTree.hs" (line 118, column 1)
qualif Auto(VV : a_a1OA, fix##126#A0 : a_a1OA): (VV > fix##126#A0) // "RBTree.hs" (line 118, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Om): (? isARB([VV])) // "RBTree.hs" (line 122, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Om): (? isBH([VV])) // "RBTree.hs" (line 122, column 1)
qualif Auto(VV : a_a1Om, fix##126#A0 : a_a1Om): (VV < fix##126#A0) // "RBTree.hs" (line 122, column 1)
qualif Auto(VV : a_a1Om, fix##126#A0 : a_a1Om): (VV > fix##126#A0) // "RBTree.hs" (line 122, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Om): (? isRB([VV])) // "RBTree.hs" (line 122, column 1)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1Om): (? isBH([VV])) // "RBTree.hs" (line 122, column 1)
qualif Auto(VV : a_a1Om, fix##126#A0 : a_a1Om): (VV < fix##126#A0) // "RBTree.hs" (line 122, column 1)
qualif Auto(VV : a_a1Om, fix##126#A0 : a_a1Om): (VV > fix##126#A0) // "RBTree.hs" (line 122, column 1)
qualif Auto(v : FAppTy Foo.RBTree  a_a1O8): (&& [(? isARB([v]));
                                                 (~ ((col([v]) = Foo.R#r12h)))] => (? isRB([v]))) // "RBTree.hs" (line 208, column 1)
qualif Auto(v : FAppTy Foo.RBTree  a_a1O8): ((? isRB([v])) => (? isARB([v]))) // "RBTree.hs" (line 208, column 1)
qualif Auto(v : FAppTy Foo.RBTree  a_a1O8): (0 <= bh([v])) // "RBTree.hs" (line 208, column 1)
qualif Auto(VV : a_a1aI, fix##126#A0 : a_a1aI): (? papp2([l;
                                                          VV;
                                                          fix##126#A0])) // "RBTree.hs" (line 9, column 17)
qualif Auto(vv : a_a1aI, fix##126#A0 : a_a1aI): (vv = fix##126#A0) // "RBTree.hs" (line 9, column 17)
qualif Auto(VV : a_a1aI, fix##126#A0 : a_a1aI): (? papp2([r;
                                                          VV;
                                                          fix##126#A0])) // "RBTree.hs" (line 9, column 17)
qualif Auto(vv : a_a1aI, fix##126#A0 : a_a1aI): (vv = fix##126#A0) // "RBTree.hs" (line 9, column 17)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1aI, fix##126#A0 : FAppTy Foo.RBTree  a_a1aI, fix##126#A1 : Foo.Color): (bh([VV]) = (bh([fix##126#A0]) + (if (fix##126#A1 = Foo.R#r12h) then 0 else 1))) // "RBTree.hs" (line 9, column 17)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1aI, fix##126#A0 : FAppTy Foo.RBTree  a_a1aI, fix##126#A1 : FAppTy Foo.RBTree  a_a1aI): ((? isBH([VV])) <=> && [(? isBH([fix##126#A0]));
                                                                                                                                                       && [(? isBH([fix##126#A1]));
                                                                                                                                                           (bh([fix##126#A0]) = bh([fix##126#A1]))]]) // "RBTree.hs" (line 9, column 17)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1aI, fix##126#A0 : Foo.Color): ((? isB([VV])) <=> (fix##126#A0 = Foo.B#r12i)) // "RBTree.hs" (line 9, column 17)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1aI, fix##126#A0 : Foo.Color): (col([VV]) = fix##126#A0) // "RBTree.hs" (line 9, column 17)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1aI, fix##126#A0 : FAppTy Foo.RBTree  a_a1aI, fix##126#A1 : FAppTy Foo.RBTree  a_a1aI): ((? isARB([VV])) <=> && [(? isRB([fix##126#A0]));
                                                                                                                                                        (? isRB([fix##126#A1]))]) // "RBTree.hs" (line 9, column 17)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1aI, fix##126#A0 : FAppTy Foo.RBTree  a_a1aI): (right([VV]) = fix##126#A0) // "RBTree.hs" (line 9, column 17)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1aI, fix##126#A0 : FAppTy Foo.RBTree  a_a1aI): (left([VV]) = fix##126#A0) // "RBTree.hs" (line 9, column 17)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1aI, fix##126#A0 : a_a1aI): (key([VV]) = fix##126#A0) // "RBTree.hs" (line 9, column 17)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1aI, fix##126#A0 : Foo.Color): (c([VV]) = fix##126#A0) // "RBTree.hs" (line 9, column 17)
qualif Auto(v : a_a1aI, fix##126#P : FAppTy (FAppTy Pred  a_a1aI)  a_a1aI, fix##126#A0 : a_a1aI): (? papp2([fix##126#P;
                                                                                                            v;
                                                                                                            fix##126#A0])) // "RBTree.hs" (line 9, column 17)
qualif Auto(v : a_a1aI, fix##126#P : FAppTy (FAppTy Pred  a_a1aI)  a_a1aI, fix##126#A0 : a_a1aI): (? papp2([fix##126#P;
                                                                                                            v;
                                                                                                            fix##126#A0])) // "RBTree.hs" (line 9, column 17)
qualif Auto(v : a_a1aI, fix##126#P : FAppTy (FAppTy Pred  a_a1aI)  a_a1aI, fix##126#A0 : a_a1aI): (? papp2([fix##126#P;
                                                                                                            v;
                                                                                                            fix##126#A0])) // "RBTree.hs" (line 9, column 17)
qualif Auto(v : a_a1aI, fix##126#P : FAppTy (FAppTy Pred  a_a1aI)  a_a1aI, fix##126#A0 : a_a1aI): (? papp2([fix##126#P;
                                                                                                            v;
                                                                                                            fix##126#A0])) // "RBTree.hs" (line 9, column 17)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1aI): (bh([VV]) = 0) // "RBTree.hs" (line 8, column 17)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1aI): ((? isBH([VV])) <=> true) // "RBTree.hs" (line 8, column 17)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1aI): ((? isB([VV])) <=> false) // "RBTree.hs" (line 8, column 17)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1aI): (col([VV]) = Foo.B#r12i) // "RBTree.hs" (line 8, column 17)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1aI): ((? isARB([VV])) <=> true) // "RBTree.hs" (line 8, column 17)
qualif Auto(VV : FAppTy Foo.RBTree  a_a1aI): ((? isRB([VV])) <=> true) // "RBTree.hs" (line 8, column 17)
qualif IsEmp(v : GHC.Types.Bool, fix##126#Xs : [@(0)]): ((? Prop([v])) <=> (len([fix##126#Xs]) > 0)) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 13, column 8)
qualif IsEmp(v : GHC.Types.Bool, fix##126#Xs : [@(0)]): ((? Prop([v])) <=> (len([fix##126#Xs]) = 0)) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 14, column 8)
qualif ListZ(v : [@(0)]): (len([v]) = 0) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 16, column 8)
qualif ListZ(v : [@(0)]): (len([v]) >= 0) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 17, column 8)
qualif ListZ(v : [@(0)]): (len([v]) > 0) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 18, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) = len([fix##126#Xs])) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 20, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) >= len([fix##126#Xs])) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 21, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) > len([fix##126#Xs])) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 22, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) <= len([fix##126#Xs])) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 23, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) < len([fix##126#Xs])) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 24, column 8)
qualif EqLen(v : int, fix##126#Xs : [@(0)]): (v = len([fix##126#Xs])) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 26, column 8)
qualif LenEq(v : [@(0)], fix##126#X : int): (fix##126#X = len([v])) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 27, column 8)
qualif LenDiff(v : [@(0)], fix##126#X : int): (len([v]) = (fix##126#X + 1)) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 28, column 8)
qualif LenDiff(v : [@(0)], fix##126#X : int): (len([v]) = (fix##126#X - 1)) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 29, column 8)
qualif LenAcc(v : int, fix##126#Xs : [@(0)], fix##126#N : int): (v = (len([fix##126#Xs]) + fix##126#N)) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 30, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 3, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 4, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 5, column 8)
qualif Bot(v : bool): (0 = 1) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 6, column 8)
qualif Bot(v : int): (0 = 1) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 7, column 8)
qualif CmpZ(v : @(0)): (v < 0) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 9, column 8)
qualif CmpZ(v : @(0)): (v <= 0) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 10, column 8)
qualif CmpZ(v : @(0)): (v > 0) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 11, column 8)
qualif CmpZ(v : @(0)): (v >= 0) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 12, column 8)
qualif CmpZ(v : @(0)): (v = 0) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 13, column 8)
qualif CmpZ(v : @(0)): (v != 0) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 14, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v < fix##126#X) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 16, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v <= fix##126#X) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 17, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v > fix##126#X) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 18, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v >= fix##126#X) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 19, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v = fix##126#X) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 20, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v != fix##126#X) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 21, column 8)
qualif One(v : int): (v = 1) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 28, column 8)
qualif True(v : bool): (? v) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 29, column 8)
qualif False(v : bool): (~ ((? v))) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 30, column 8)
qualif True1(v : GHC.Types.Bool): (? Prop([v])) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 31, column 8)
qualif False1(v : GHC.Types.Bool): (~ ((? Prop([v])))) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 32, column 8)
qualif Papp(v : @(0), fix##126#P : FAppTy Pred  @(0)): (? papp1([fix##126#P;
                                                                 v])) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 35, column 8)
qualif Papp2(v : @(1), fix##126#X : @(0), fix##126#P : FAppTy (FAppTy Pred  @(1))  @(0)): (? papp2([fix##126#P;
                                                                                                    v;
                                                                                                    fix##126#X])) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 38, column 8)
qualif Papp3(v : @(2), fix##126#X : @(0), fix##126#Y : @(1), fix##126#P : FAppTy (FAppTy (FAppTy Pred  @(2))  @(0))  @(1)): (? papp3([fix##126#P;
                                                                                                                                      v;
                                                                                                                                      fix##126#X;
                                                                                                                                      fix##126#Y])) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 41, column 8)

constant GHC.Types.EQ#6U : (GHC.Types.Ordering)
constant isB : (func(1, [FAppTy Foo.RBTree  @(0); bool]))
constant Prop : (func(0, [GHC.Types.Bool; bool]))
constant isRB : (func(1, [FAppTy Foo.RBTree  @(0); bool]))
constant x_Tuple54 : (func(5, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4);
                               @(3)]))
constant col : (func(1, [FAppTy Foo.RBTree  @(0); Foo.Color]))
constant c : (func(1, [FAppTy Foo.RBTree  @(0); Foo.Color]))
constant addrLen : (func(0, [int; int]))
constant isARB : (func(1, [FAppTy Foo.RBTree  @(0); bool]))
constant left : (func(1, [FAppTy Foo.RBTree  @(0);
                          FAppTy Foo.RBTree  @(0)]))
constant bh : (func(1, [FAppTy Foo.RBTree  @(0); int]))
constant x_Tuple52 : (func(5, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4);
                               @(1)]))
constant GHC.Types.LT#6S : (GHC.Types.Ordering)
constant right : (func(1, [FAppTy Foo.RBTree  @(0);
                           FAppTy Foo.RBTree  @(0)]))
constant x_Tuple44 : (func(4, [FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3);
                               @(3)]))
constant GHC.Types.GT#6W : (GHC.Types.Ordering)
constant xListSelector : (func(1, [[@(0)]; @(0)]))
constant x_Tuple33 : (func(3, [FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2);
                               @(2)]))
constant x_Tuple41 : (func(4, [FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3);
                               @(0)]))
constant fst : (func(2, [FAppTy (FAppTy fix##40##41#  @(0))  @(1);
                         @(0)]))
constant x_Tuple76 : (func(7, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6);
                               @(5)]))
constant x_Tuple31 : (func(3, [FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2);
                               @(0)]))
constant papp4 : (func(8, [FAppTy (FAppTy (FAppTy (FAppTy Pred  @(0))  @(1))  @(2))  @(6);
                           @(3);
                           @(4);
                           @(5);
                           @(7);
                           bool]))
constant Foo.R#r12h : (Foo.Color)
constant x_Tuple65 : (func(6, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5);
                               @(4)]))
constant papp2 : (func(4, [FAppTy (FAppTy Pred  @(0))  @(1);
                           @(2);
                           @(3);
                           bool]))
constant x_Tuple32 : (func(3, [FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2);
                               @(1)]))
constant isBH : (func(1, [FAppTy Foo.RBTree  @(0); bool]))
constant x_Tuple63 : (func(6, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5);
                               @(2)]))
constant x_Tuple51 : (func(5, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4);
                               @(0)]))
constant len : (func(2, [FAppTy @(0)  @(1); int]))
constant x_Tuple64 : (func(6, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5);
                               @(3)]))
constant xsListSelector : (func(1, [[@(0)]; [@(0)]]))
constant null : (func(1, [[@(0)]; bool]))
constant Foo.B#r12i : (Foo.Color)
constant x_Tuple53 : (func(5, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4);
                               @(2)]))
constant x_Tuple22 : (func(2, [FAppTy (FAppTy fix##40##41#  @(0))  @(1);
                               @(1)]))
constant fromJust : (func(1, [FAppTy Data.Maybe.Maybe  @(0);
                              @(0)]))
constant snd : (func(2, [FAppTy (FAppTy fix##40##41#  @(0))  @(1);
                         @(1)]))
constant x_Tuple55 : (func(5, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4);
                               @(4)]))
constant papp3 : (func(6, [FAppTy (FAppTy (FAppTy Pred  @(0))  @(1))  @(2);
                           @(3);
                           @(4);
                           @(5);
                           bool]))
constant x_Tuple43 : (func(4, [FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3);
                               @(2)]))
constant x_Tuple71 : (func(7, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6);
                               @(0)]))
constant cmp : (func(0, [GHC.Types.Ordering; GHC.Types.Ordering]))
constant papp1 : (func(1, [FAppTy Pred  @(0); @(0); bool]))
constant isJust : (func(1, [FAppTy Data.Maybe.Maybe  @(0); bool]))
constant GHC.Types.False#68 : (GHC.Types.Bool)
constant x_Tuple72 : (func(7, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6);
                               @(1)]))
constant x_Tuple75 : (func(7, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6);
                               @(4)]))
constant x_Tuple21 : (func(2, [FAppTy (FAppTy fix##40##41#  @(0))  @(1);
                               @(0)]))
constant x_Tuple61 : (func(6, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5);
                               @(0)]))
constant x_Tuple73 : (func(7, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6);
                               @(2)]))
constant x_Tuple62 : (func(6, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5);
                               @(1)]))
constant key : (func(1, [FAppTy Foo.RBTree  @(0); @(0)]))
constant x_Tuple74 : (func(7, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6);
                               @(3)]))
constant x_Tuple66 : (func(6, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5);
                               @(5)]))
constant x_Tuple42 : (func(4, [FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3);
                               @(1)]))
constant GHC.Types.True#6u : (GHC.Types.Bool)
constant x_Tuple77 : (func(7, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6);
                               @(6)]))
constant fix#GHC.Types.#58##35#64 : (func(1, [@(0);
                                              [@(0)];
                                              [@(0)]]))
constant fix#GHC.Show.D#58#Show#35#rhl : (func(1, [func(0, [int;
                                                            @(0);
                                                            [GHC.Types.Char];
                                                            [GHC.Types.Char]]);
                                                   func(0, [@(0); [GHC.Types.Char]]);
                                                   func(0, [[@(0)];
                                                            [GHC.Types.Char];
                                                            [GHC.Types.Char]]);
                                                   FAppTy GHC.Show.Show  @(0)]))
constant Foo.Node#r12k : (func(1, [Foo.Color;
                                   @(0);
                                   FAppTy Foo.RBTree  @(0);
                                   FAppTy Foo.RBTree  @(0);
                                   FAppTy Foo.RBTree  @(0)]))
constant fix#GHC.Tuple.#40##44##41##35#74 : (func(2, [@(0);
                                                      @(1);
                                                      FAppTy (FAppTy fix##40##41#  @(0))  @(1)]))
constant fix#GHC.Types.#91##93##35#6m : (func(1, [[@(0)]]))
constant Foo.Leaf#r12l : (func(1, [FAppTy Foo.RBTree  @(0)]))
constant fix#GHC.Classes.D#58#Eq#35#r62 : (func(1, [func(0, [@(0);
                                                             @(0);
                                                             GHC.Types.Bool]);
                                                    func(0, [@(0); @(0); GHC.Types.Bool]);
                                                    FAppTy GHC.Classes.Eq  @(0)]))
bind 0 Control.Exception.Base.patError#0e : {VV : func(1, [int;
                                                           @(0)]) | []}
bind 1 GHC.CString.unpackCString##0k : {VV : func(0, [int;
                                                      [GHC.Types.Char]]) | []}
bind 2 GHC.Prim.void##0l : {VV#801 : GHC.Prim.Void# | []}
bind 3 fix#GHC.Classes.#61##61##35#02H : {VV : func(1, [@(0);
                                                        @(0);
                                                        GHC.Types.Bool]) | []}
bind 4 fix#GHC.Classes.#62##61##35#02I : {VV : func(1, [@(0);
                                                        @(0);
                                                        GHC.Types.Bool]) | []}
bind 5 GHC.Types.C##62 : {VV : func(0, [GHC.Prim.Char#;
                                        GHC.Types.Char]) | []}
bind 6 fix#GHC.Types.#58##35#64 : {VV : func(1, [@(0);
                                                 [@(0)];
                                                 [@(0)]]) | []}
bind 7 GHC.Types.False#68 : {VV#806 : GHC.Types.Bool | []}
bind 8 GHC.Types.I##6c : {VV : func(0, [int; int]) | []}
bind 9 fix#GHC.Types.#91##93##35#6m : {VV : func(1, [[@(0)]]) | []}
bind 10 GHC.Types.True#6u : {VV#809 : GHC.Types.Bool | []}
bind 11 fix#GHC.Tuple.#40##44##41##35#74 : {VV : func(2, [@(0);
                                                          @(1);
                                                          FAppTy (FAppTy fix##40##41#  @(0))  @(1)]) | []}
bind 12 GHC.Classes.compare#r2 : {VV : func(1, [@(0);
                                                @(0);
                                                GHC.Types.Ordering]) | []}
bind 13 GHC.Show.showsPrec#r9 : {VV : func(1, [int;
                                               @(0);
                                               [GHC.Types.Char];
                                               [GHC.Types.Char]]) | []}
bind 14 GHC.Classes.not#r1d : {VV : func(0, [GHC.Types.Bool;
                                             GHC.Types.Bool]) | []}
bind 15 GHC.Show.showString#r1v : {VV : func(0, [[GHC.Types.Char];
                                                 [GHC.Types.Char];
                                                 [GHC.Types.Char]]) | []}
bind 16 GHC.Show.showParen#r1w : {VV : func(0, [GHC.Types.Bool;
                                                func(0, [[GHC.Types.Char]; [GHC.Types.Char]]);
                                                [GHC.Types.Char];
                                                [GHC.Types.Char]]) | []}
bind 17 GHC.Base..#r2q : {VV : func(3, [func(0, [@(0); @(1)]);
                                        func(0, [@(2); @(0)]);
                                        @(2);
                                        @(1)]) | []}
bind 18 GHC.Show.showList__#r6N : {VV : func(1, [func(0, [@(0);
                                                          [GHC.Types.Char];
                                                          [GHC.Types.Char]]);
                                                 [@(0)];
                                                 [GHC.Types.Char];
                                                 [GHC.Types.Char]]) | []}
bind 19 GHC.Types.EQ#6U : {VV#818 : GHC.Types.Ordering | []}
bind 20 GHC.Types.LT#6S : {VV#819 : GHC.Types.Ordering | []}
bind 21 GHC.Types.GT#6W : {VV#820 : GHC.Types.Ordering | []}
bind 22 fix#GHC.Classes.#36#fOrdInt#35#rhx : {VV#821 : FAppTy GHC.Classes.Ord  int | []}
bind 23 fix#GHC.Classes.D#58#Eq#35#r62 : {VV : func(1, [func(0, [@(0);
                                                                 @(0);
                                                                 GHC.Types.Bool]);
                                                        func(0, [@(0); @(0); GHC.Types.Bool]);
                                                        FAppTy GHC.Classes.Eq  @(0)]) | []}
bind 24 Language.Haskell.Liquid.Prelude.liquidError#rpH : {VV : func(1, [[GHC.Types.Char];
                                                                         @(0)]) | []}
bind 25 GHC.Show.showSpace#r16a : {VV : func(0, [[GHC.Types.Char];
                                                 [GHC.Types.Char]]) | []}
bind 26 fix#GHC.Show.#36#dmshow#35#r16k : {VV : func(1, [@(0);
                                                         [GHC.Types.Char]]) | []}
bind 27 fix#GHC.Show.D#58#Show#35#rhl : {VV : func(1, [func(0, [int;
                                                                @(0);
                                                                [GHC.Types.Char];
                                                                [GHC.Types.Char]]);
                                                       func(0, [@(0); [GHC.Types.Char]]);
                                                       func(0, [[@(0)];
                                                                [GHC.Types.Char];
                                                                [GHC.Types.Char]]);
                                                       FAppTy GHC.Show.Show  @(0)]) | []}
bind 28 Foo.B#r12i : {VV#827 : Foo.Color | [|| [(VV#827 = Foo.R#r12h);
                                                (VV#827 = Foo.B#r12i)]]}
bind 29 Foo.R#r12h : {VV#828 : Foo.Color | [|| [(VV#828 = Foo.R#r12h);
                                                (VV#828 = Foo.B#r12i)]]}
bind 30 Foo.Leaf#r12l : {VV : func(1, [FAppTy Foo.RBTree  @(0)]) | []}
bind 31 fix#Foo.#36#WNode#35#r12k : {VV : func(1, [Foo.Color;
                                                   @(0);
                                                   FAppTy Foo.RBTree  @(0);
                                                   FAppTy Foo.RBTree  @(0);
                                                   FAppTy Foo.RBTree  @(0)]) | []}
bind 32 Foo.Node#r12k : {VV : func(1, [Foo.Color;
                                       @(0);
                                       FAppTy Foo.RBTree  @(0);
                                       FAppTy Foo.RBTree  @(0);
                                       FAppTy Foo.RBTree  @(0)]) | []}
bind 33 fix#GHC.Classes.D#58#Eq#35#r62 : {VV : func(1, [func(0, [@(0);
                                                                 @(0);
                                                                 GHC.Types.Bool]);
                                                        func(0, [@(0); @(0); GHC.Types.Bool]);
                                                        FAppTy GHC.Classes.Eq  @(0)]) | []}
bind 34 fix#GHC.Show.D#58#Show#35#rhl : {VV : func(1, [func(0, [int;
                                                                @(0);
                                                                [GHC.Types.Char];
                                                                [GHC.Types.Char]]);
                                                       func(0, [@(0); [GHC.Types.Char]]);
                                                       func(0, [[@(0)];
                                                                [GHC.Types.Char];
                                                                [GHC.Types.Char]]);
                                                       FAppTy GHC.Show.Show  @(0)]) | []}
bind 35 fix#GHC.Show.D#58#Show#35#rhl : {VV : func(1, [func(0, [int;
                                                                @(0);
                                                                [GHC.Types.Char];
                                                                [GHC.Types.Char]]);
                                                       func(0, [@(0); [GHC.Types.Char]]);
                                                       func(0, [[@(0)];
                                                                [GHC.Types.Char];
                                                                [GHC.Types.Char]]);
                                                       FAppTy GHC.Show.Show  @(0)]) | []}
bind 36 Foo.R#r12h : {VV#835 : Foo.Color | [(VV#835 = Foo.R#r12h);
                                            || [(VV#835 = Foo.R#r12h); (VV#835 = Foo.B#r12i)]]}
bind 37 Foo.B#r12i : {VV#836 : Foo.Color | [(VV#836 = Foo.B#r12i);
                                            || [(VV#836 = Foo.R#r12h); (VV#836 = Foo.B#r12i)]]}
bind 38 GHC.Types.EQ#6U : {VV#837 : GHC.Types.Ordering | [(VV#837 = GHC.Types.EQ#6U)]}
bind 39 GHC.Types.LT#6S : {VV#838 : GHC.Types.Ordering | [(VV#838 = GHC.Types.LT#6S)]}
bind 40 GHC.Types.GT#6W : {VV#839 : GHC.Types.Ordering | [(VV#839 = GHC.Types.GT#6W)]}
bind 41 GHC.Types.True#6u : {v : GHC.Types.Bool | [(? Prop([v]))]}
bind 42 fix#GHC.Classes.#62##61##35#02I : {VV : func(1, [@(0);
                                                         @(0);
                                                         GHC.Types.Bool]) | []}
bind 43 GHC.Types.EQ#6U : {v : GHC.Types.Ordering | [(v = cmp([v]))]}
bind 44 GHC.Types.False#68 : {v : GHC.Types.Bool | [(~ ((? Prop([v]))))]}
bind 45 GHC.Types.LT#6S : {v : GHC.Types.Ordering | [(v = cmp([v]))]}
bind 46 GHC.Types.GT#6W : {v : GHC.Types.Ordering | [(v = cmp([v]))]}
bind 47 GHC.Classes.not#r1d : {VV : func(0, [GHC.Types.Bool;
                                             GHC.Types.Bool]) | []}
bind 48 fix#GHC.Classes.#61##61##35#02H : {VV : func(1, [@(0);
                                                         @(0);
                                                         GHC.Types.Bool]) | []}
bind 49 GHC.Classes.compare#r2 : {VV : func(1, [@(0);
                                                @(0);
                                                GHC.Types.Ordering]) | []}
bind 50 fix#GHC.Classes.#38##38##35#r1e : {VV : func(0, [GHC.Types.Bool;
                                                         GHC.Types.Bool;
                                                         GHC.Types.Bool]) | []}
bind 51 fix#Foo.deleteMin#39##35#r12s : {VV : func(1, [@(0);
                                                       FAppTy Foo.RBTree  @(0);
                                                       FAppTy Foo.RBTree  @(0);
                                                       FAppTy (FAppTy fix##40##41#  @(0))  (FAppTy Foo.RBTree  @(0))]) | []}
bind 52 Language.Haskell.Liquid.Prelude.minus#rpv : {VV : func(0, [int;
                                                                   int;
                                                                   int]) | []}
bind 53 GHC.Integer.Type.smallInteger#0Z : {VV : func(0, [int;
                                                          int]) | []}
bind 54 Language.Haskell.Liquid.Prelude.isEven#rpL : {VV : func(0, [int;
                                                                    GHC.Types.Bool]) | []}
bind 55 fix#GHC.Tuple.#40##44##44##44##44##44##41##35#7c : {VV : func(6, [@(0);
                                                                          @(1);
                                                                          @(2);
                                                                          @(3);
                                                                          @(4);
                                                                          @(5);
                                                                          FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5)]) | []}
bind 56 GHC.Types.I##6c : {VV : func(0, [int; int]) | []}
bind 57 fix#GHC.Num.#43##35#rt : {VV : func(1, [@(0);
                                                @(0);
                                                @(0)]) | []}
bind 58 Foo.lbalS#r12t : {VV : func(1, [@(0);
                                        FAppTy Foo.RBTree  @(0);
                                        FAppTy Foo.RBTree  @(0);
                                        FAppTy Foo.RBTree  @(0)]) | []}
bind 59 Language.Haskell.Liquid.Prelude.times#rpw : {VV : func(0, [int;
                                                                   int;
                                                                   int]) | []}
bind 60 Language.Haskell.Liquid.Prelude.isOdd#rpM : {VV : func(0, [int;
                                                                   GHC.Types.Bool]) | []}
bind 61 fix#GHC.Num.#42##35#ru : {VV : func(1, [@(0);
                                                @(0);
                                                @(0)]) | []}
bind 62 GHC.List.takeWhile#r1M : {VV : func(1, [func(0, [@(0);
                                                         GHC.Types.Bool]);
                                                [@(0)];
                                                [@(0)]]) | []}
bind 63 GHC.List.length#r22 : {VV : func(1, [[@(0)]; int]) | []}
bind 64 GHC.Real.fromIntegral#034 : {VV : func(2, [@(0);
                                                   @(1)]) | []}
bind 65 fix#GHC.List.#33##33##35#r2i : {VV : func(1, [[@(0)];
                                                      int;
                                                      @(0)]) | []}
bind 66 Foo.rbalS#r12u : {VV : func(1, [@(0);
                                        FAppTy Foo.RBTree  @(0);
                                        FAppTy Foo.RBTree  @(0);
                                        FAppTy Foo.RBTree  @(0)]) | []}
bind 67 Language.Haskell.Liquid.Prelude.plus#rou : {VV : func(0, [int;
                                                                  int;
                                                                  int]) | []}
bind 68 Language.Haskell.Liquid.Prelude.eq#rpx : {VV : func(0, [int;
                                                                int;
                                                                GHC.Types.Bool]) | []}
bind 69 Language.Haskell.Liquid.Prelude.safeZipWith#rpN : {VV : func(3, [func(0, [@(0);
                                                                                  @(1);
                                                                                  @(2)]);
                                                                         [@(0)];
                                                                         [@(1)];
                                                                         [@(2)]]) | []}
bind 70 fix#GHC.Tuple.#40##44##44##44##44##44##44##41##35#7e : {VV : func(7, [@(0);
                                                                              @(1);
                                                                              @(2);
                                                                              @(3);
                                                                              @(4);
                                                                              @(5);
                                                                              @(6);
                                                                              FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6)]) | []}
bind 71 GHC.Types.True#6u : {v : GHC.Types.Bool | [(? Prop([v]))]}
bind 72 GHC.List.take#r1N : {VV : func(1, [int;
                                           [@(0)];
                                           [@(0)]]) | []}
bind 73 GHC.List.last#r23 : {VV : func(1, [[@(0)]; @(0)]) | []}
bind 74 Data.Maybe.Just#r1a : {VV : func(1, [@(0);
                                             FAppTy Data.Maybe.Maybe  @(0)]) | []}
bind 75 Foo.lbal#r12v : {VV : func(1, [@(0);
                                       FAppTy Foo.RBTree  @(0);
                                       FAppTy Foo.RBTree  @(0);
                                       FAppTy Foo.RBTree  @(0)]) | []}
bind 76 Language.Haskell.Liquid.Prelude.liquidAssumeB#rpG : {VV : func(1, [func(0, [@(0);
                                                                                    GHC.Types.Bool]);
                                                                           @(0);
                                                                           @(0)]) | []}
bind 77 fix#GHC.Prim.#43##35##35#98 : {VV : func(0, [int;
                                                     int;
                                                     int]) | []}
bind 78 fix#GHC.Prim.#61##61##35##35#9o : {VV : func(0, [int;
                                                         int;
                                                         int]) | []}
bind 79 fix#GHC.Real.#47##35#ro : {VV : func(1, [@(0);
                                                 @(0);
                                                 @(0)]) | []}
bind 80 GHC.List.replicate#r1W : {VV : func(1, [int;
                                                @(0);
                                                [@(0)]]) | []}
bind 81 fix#GHC.Classes.#62##61##35#02I : {VV : func(1, [@(0);
                                                         @(0);
                                                         GHC.Types.Bool]) | []}
bind 82 GHC.List.cycle#r2c : {VV : func(1, [[@(0)]; [@(0)]]) | []}
bind 83 Foo.remove#r12o : {VV : func(1, [@(0);
                                         FAppTy Foo.RBTree  @(0);
                                         FAppTy Foo.RBTree  @(0)]) | []}
bind 84 GHC.Types.EQ#6U : {VV#883 : GHC.Types.Ordering | [(cmp([VV#883]) = GHC.Types.EQ#6U)]}
bind 85 Language.Haskell.Liquid.Prelude.liquidError#rpH : {VV : func(1, [[GHC.Types.Char];
                                                                         @(0)]) | []}
bind 86 fix#GHC.Prim.#45##35##35#99 : {VV : func(0, [int;
                                                     int;
                                                     int]) | []}
bind 87 fix#GHC.Tuple.#40##44##44##44##41##35#78 : {VV : func(4, [@(0);
                                                                  @(1);
                                                                  @(2);
                                                                  @(3);
                                                                  FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3)]) | []}
bind 88 GHC.Types.False#68 : {v : GHC.Types.Bool | [(~ ((? Prop([v]))))]}
bind 89 GHC.List.repeat#r1X : {VV : func(1, [@(0); [@(0)]]) | []}
bind 90 GHC.Base.map#01X : {VV : func(2, [func(0, [@(0); @(1)]);
                                          [@(0)];
                                          [@(1)]]) | []}
bind 91 GHC.Num.negate#02J : {VV : func(1, [@(0); @(0)]) | []}
bind 92 Foo.del#r12p : {VV : func(1, [@(0);
                                      FAppTy Foo.RBTree  @(0);
                                      FAppTy Foo.RBTree  @(0)]) | []}
bind 93 GHC.Types.LT#6S : {VV#892 : GHC.Types.Ordering | [(cmp([VV#892]) = GHC.Types.LT#6S)]}
bind 94 Language.Haskell.Liquid.Prelude.crash#rpI : {VV : func(1, [GHC.Types.Bool;
                                                                   @(0)]) | []}
bind 95 fix#GHC.Prim.#60##35##35#9q : {VV : func(0, [int;
                                                     int;
                                                     int]) | []}
bind 96 GHC.List.zipWith#r1I : {VV : func(3, [func(0, [@(0);
                                                       @(1);
                                                       @(2)]);
                                              [@(0)];
                                              [@(1)];
                                              [@(2)]]) | []}
bind 97 fix#GHC.Classes.#124##124##35#r1c : {VV : func(0, [GHC.Types.Bool;
                                                           GHC.Types.Bool;
                                                           GHC.Types.Bool]) | []}
bind 98 GHC.List.break#r2e : {VV : func(1, [func(0, [@(0);
                                                     GHC.Types.Bool]);
                                            [@(0)];
                                            FAppTy (FAppTy fix##40##41#  ([@(0)]))  ([@(0)])]) | []}
bind 99 Foo.append#r12q : {VV : func(1, [@(0);
                                         FAppTy Foo.RBTree  @(0);
                                         FAppTy Foo.RBTree  @(0);
                                         FAppTy Foo.RBTree  @(0)]) | []}
bind 100 GHC.List.errorEmptyList#r2g2 : {VV : func(1, [[GHC.Types.Char];
                                                       @(0)]) | []}
bind 101 GHC.Types.isTrue##r3g : {VV : func(0, [int;
                                                GHC.Types.Bool]) | []}
bind 102 GHC.Types.GT#6W : {VV#901 : GHC.Types.Ordering | [(cmp([VV#901]) = GHC.Types.GT#6W)]}
bind 103 fix#GHC.Tuple.#40##44##44##44##44##41##35#7a : {VV : func(5, [@(0);
                                                                       @(1);
                                                                       @(2);
                                                                       @(3);
                                                                       @(4);
                                                                       FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4)]) | []}
bind 104 fix#GHC.Prim.#60##61##35##35#9r : {VV : func(0, [int;
                                                          int;
                                                          int]) | []}
bind 105 GHC.List.null#r1Z : {VV : func(1, [[@(0)];
                                            GHC.Types.Bool]) | []}
bind 106 fix#GHC.Base.#36##35#01Z : {VV : func(2, [func(0, [@(0);
                                                            @(1)]);
                                                   @(0);
                                                   @(1)]) | []}
bind 107 GHC.Classes.not#r1d : {VV : func(0, [GHC.Types.Bool;
                                              GHC.Types.Bool]) | []}
bind 108 Foo.deleteMin#r12r : {VV : func(1, [FAppTy Foo.RBTree  @(0);
                                             FAppTy Foo.RBTree  @(0)]) | []}
bind 109 Language.Haskell.Liquid.Prelude.gt#rpC : {VV : func(0, [int;
                                                                 int;
                                                                 GHC.Types.Bool]) | []}
bind 110 fix#GHC.Classes.#60##61##35#r4 : {VV : func(1, [@(0);
                                                         @(0);
                                                         GHC.Types.Bool]) | []}
bind 111 GHC.Real.mod#rk : {VV : func(1, [@(0); @(0); @(0)]) | []}
bind 112 GHC.List.scanr#r1S : {VV : func(2, [func(0, [@(0);
                                                      @(1);
                                                      @(1)]);
                                             @(1);
                                             [@(0)];
                                             [@(1)]]) | []}
bind 113 Foo.invc#r12A : {VV : func(1, [FAppTy Foo.RBTree  @(0);
                                        FAppTy Foo.RBTree  @(0)]) | []}
bind 114 fix#GHC.Real.D#58#Integral#35#r6o : {VV : func(1, [func(0, [@(0);
                                                                     @(0);
                                                                     @(0)]);
                                                            func(0, [@(0); @(0); @(0)]);
                                                            func(0, [@(0); @(0); @(0)]);
                                                            func(0, [@(0); @(0); @(0)]);
                                                            func(0, [@(0);
                                                                     @(0);
                                                                     FAppTy (FAppTy fix##40##41#  @(0))  @(0)]);
                                                            func(0, [@(0);
                                                                     @(0);
                                                                     FAppTy (FAppTy fix##40##41#  @(0))  @(0)]);
                                                            func(0, [@(0); int]);
                                                            FAppTy GHC.Real.Integral  @(0)]) | []}
bind 115 Language.Haskell.Liquid.Prelude.liquidAssertB#rpD : {VV : func(0, [GHC.Types.Bool;
                                                                            GHC.Types.Bool]) | []}
bind 116 fix#GHC.Classes.#60##35#r5 : {VV : func(1, [@(0);
                                                     @(0);
                                                     GHC.Types.Bool]) | []}
bind 117 fix#GHC.Tuple.#40##44##41##35#74 : {VV : func(2, [@(0);
                                                           @(1);
                                                           FAppTy (FAppTy fix##40##41#  @(0))  @(1)]) | []}
bind 118 fix#GHC.Types.#58##35#64 : {VV : func(1, [@(0);
                                                   [@(0)];
                                                   [@(0)]]) | []}
bind 119 GHC.Real.divMod#rl : {VV : func(1, [@(0);
                                             @(0);
                                             FAppTy (FAppTy fix##40##41#  @(0))  @(0)]) | []}
bind 120 GHC.List.scanl1#r1T : {VV : func(1, [func(0, [@(0);
                                                       @(0);
                                                       @(0)]);
                                              [@(0)];
                                              [@(0)]]) | []}
bind 121 Language.Haskell.Liquid.Prelude.liquidAssert#rpE : {VV : func(1, [GHC.Types.Bool;
                                                                           @(0);
                                                                           @(0)]) | []}
bind 122 fix#GHC.Classes.#47##61##35#r6 : {VV : func(1, [@(0);
                                                         @(0);
                                                         GHC.Types.Bool]) | []}
bind 123 fix#GHC.Prim.#62##35##35#9m : {VV : func(0, [int;
                                                      int;
                                                      int]) | []}
bind 124 GHC.Real.div#rm : {VV : func(1, [@(0); @(0); @(0)]) | []}
bind 125 GHC.List.scanl#r1U : {VV : func(2, [func(0, [@(0);
                                                      @(1);
                                                      @(0)]);
                                             @(0);
                                             [@(1)];
                                             [@(0)]]) | []}
bind 126 Foo.Node#r12k : {VV : func(1, [Foo.Color;
                                        @(0);
                                        FAppTy Foo.RBTree  @(0);
                                        FAppTy Foo.RBTree  @(0);
                                        FAppTy Foo.RBTree  @(0)]) | []}
bind 127 GHC.List.dropWhile#r2a : {VV : func(1, [func(0, [@(0);
                                                          GHC.Types.Bool]);
                                                 [@(0)];
                                                 [@(0)]]) | []}
bind 128 GHC.Base..#r2q : {VV : func(3, [func(0, [@(0); @(1)]);
                                         func(0, [@(2); @(0)]);
                                         @(2);
                                         @(1)]) | []}
bind 129 Foo.add#r12m : {VV : func(1, [@(0);
                                       FAppTy Foo.RBTree  @(0);
                                       FAppTy Foo.RBTree  @(0)]) | []}
bind 130 Language.Haskell.Liquid.Prelude.liquidAssume#rpF : {VV : func(1, [GHC.Types.Bool;
                                                                           @(0);
                                                                           @(0)]) | []}
bind 131 fix#GHC.Tuple.#40##44##44##41##35#76 : {VV : func(3, [@(0);
                                                               @(1);
                                                               @(2);
                                                               FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2)]) | []}
bind 132 GHC.Types.D##66 : {VV : func(0, [real; real]) | []}
bind 133 fix#GHC.Prim.#62##61##35##35#9n : {VV : func(0, [int;
                                                          int;
                                                          int]) | []}
bind 134 GHC.Real.recip#rn : {VV : func(1, [@(0); @(0)]) | []}
bind 135 fix#GHC.Types.#91##93##35#6m : {VV : func(1, [[@(0)]]) | []}
bind 136 GHC.List.reverse#r1V : {VV : func(1, [[@(0)];
                                               [@(0)]]) | []}
bind 137 fix#GHC.Classes.#61##61##35#02H : {VV : func(1, [@(0);
                                                          @(0);
                                                          GHC.Types.Bool]) | []}
bind 138 GHC.List.drop#r2b : {VV : func(1, [int;
                                            [@(0)];
                                            [@(0)]]) | []}
bind 139 Foo.ins#r12n : {VV : func(1, [@(0);
                                       FAppTy Foo.RBTree  @(0);
                                       FAppTy Foo.RBTree  @(0)]) | []}
bind 140 GHC.List.filter#0w : {VV : func(1, [func(0, [@(0);
                                                      GHC.Types.Bool]);
                                             [@(0)];
                                             [@(0)]]) | []}
bind 141 Language.Haskell.Liquid.Prelude.neq#rpy : {VV : func(0, [int;
                                                                  int;
                                                                  GHC.Types.Bool]) | []}
bind 142 GHC.Classes.min#r0 : {VV : func(1, [@(0);
                                             @(0);
                                             @(0)]) | []}
bind 143 GHC.List.tail#r1O : {VV : func(1, [[@(0)]; [@(0)]]) | []}
bind 144 fix#Language.Haskell.Liquid.Prelude.#61##61##62##35#rpO : {VV : func(0, [GHC.Types.Bool;
                                                                                  GHC.Types.Bool;
                                                                                  GHC.Types.Bool]) | []}
bind 145 GHC.Num.fromInteger#02A : {VV : func(1, [int; @(0)]) | []}
bind 146 Foo.rbal#r12w : {VV : func(1, [@(0);
                                        FAppTy Foo.RBTree  @(0);
                                        FAppTy Foo.RBTree  @(0);
                                        FAppTy Foo.RBTree  @(0)]) | []}
bind 147 GHC.List.iterate#r24 : {VV : func(1, [func(0, [@(0);
                                                        @(0)]);
                                               @(0);
                                               [@(0)]]) | []}
bind 148 GHC.Real.toInteger#036 : {VV : func(1, [@(0); int]) | []}
bind 149 GHC.List.zip#0x : {VV : func(2, [[@(0)];
                                          [@(1)];
                                          [FAppTy (FAppTy fix##40##41#  @(0))  @(1)]]) | []}
bind 150 Language.Haskell.Liquid.Prelude.leq#rpz : {VV : func(0, [int;
                                                                  int;
                                                                  GHC.Types.Bool]) | []}
bind 151 GHC.Classes.max#r1 : {VV : func(1, [@(0);
                                             @(0);
                                             @(0)]) | []}
bind 152 GHC.Real.rem#rh : {VV : func(1, [@(0); @(0); @(0)]) | []}
bind 153 GHC.List.splitAt#r1P : {VV : func(1, [int;
                                               [@(0)];
                                               FAppTy (FAppTy fix##40##41#  ([@(0)]))  ([@(0)])]) | []}
bind 154 Foo.Leaf#r12l : {VV : func(1, [FAppTy Foo.RBTree  @(0)]) | []}
bind 155 fix#GHC.Num.#45##35#02B : {VV : func(1, [@(0);
                                                  @(0);
                                                  @(0)]) | []}
bind 156 Data.Maybe.Nothing#r19 : {VV : func(1, [FAppTy Data.Maybe.Maybe  @(0)]) | []}
bind 157 Foo.makeRed#r12x : {VV : func(1, [FAppTy Foo.RBTree  @(0);
                                           FAppTy Foo.RBTree  @(0)]) | []}
bind 158 GHC.List.init#r25 : {VV : func(1, [[@(0)]; [@(0)]]) | []}
bind 159 Language.Haskell.Liquid.Prelude.geq#rpA : {VV : func(0, [int;
                                                                  int;
                                                                  GHC.Types.Bool]) | []}
bind 160 GHC.Classes.compare#r2 : {VV : func(1, [@(0);
                                                 @(0);
                                                 GHC.Types.Ordering]) | []}
bind 161 GHC.Real.quotRem#ri : {VV : func(1, [@(0);
                                              @(0);
                                              FAppTy (FAppTy fix##40##41#  @(0))  @(0)]) | []}
bind 162 GHC.List.span#r1Q : {VV : func(1, [func(0, [@(0);
                                                     GHC.Types.Bool]);
                                            [@(0)];
                                            FAppTy (FAppTy fix##40##41#  ([@(0)]))  ([@(0)])]) | []}
bind 163 fix#Foo.#36#WNode#35#r12k : {VV : func(1, [Foo.Color;
                                                    @(0);
                                                    FAppTy Foo.RBTree  @(0);
                                                    FAppTy Foo.RBTree  @(0);
                                                    FAppTy Foo.RBTree  @(0)]) | []}
bind 164 GHC.Real.fromRational#02C : {VV : func(1, [FAppTy GHC.Real.Ratio  int;
                                                    @(0)]) | []}
bind 165 Foo.makeBlack#r12y : {VV : func(1, [FAppTy Foo.RBTree  @(0);
                                             FAppTy Foo.RBTree  @(0)]) | []}
bind 166 GHC.List.head#r26 : {VV : func(1, [[@(0)]; @(0)]) | []}
bind 167 GHC.Base.id#r2m : {VV : func(1, [@(0); @(0)]) | []}
bind 168 Language.Haskell.Liquid.Prelude.lt#rpB : {VV : func(0, [int;
                                                                 int;
                                                                 GHC.Types.Bool]) | []}
bind 169 fix#GHC.Classes.#62##35#r3 : {VV : func(1, [@(0);
                                                     @(0);
                                                     GHC.Types.Bool]) | []}
bind 170 fix#GHC.Base.#43##43##35#03 : {VV : func(1, [[@(0)];
                                                      [@(0)];
                                                      [@(0)]]) | []}
bind 171 GHC.Real.quot#rj : {VV : func(1, [@(0); @(0); @(0)]) | []}
bind 172 GHC.List.scanr1#r1R : {VV : func(1, [func(0, [@(0);
                                                       @(0);
                                                       @(0)]);
                                              [@(0)];
                                              [@(0)]]) | []}
bind 173 Foo.inv#r12z : {VV : func(1, [FAppTy Foo.RBTree  @(0);
                                       FAppTy Foo.RBTree  @(0)]) | []}
bind 174 GHC.List.foldr1#r27 : {VV : func(1, [func(0, [@(0);
                                                       @(0);
                                                       @(0)]);
                                              [@(0)];
                                              @(0)]) | []}
bind 175 fix#GHC.Real.D#58#Fractional#35#rkT : {VV : func(1, [func(0, [@(0);
                                                                       @(0);
                                                                       @(0)]);
                                                              func(0, [@(0); @(0)]);
                                                              func(0, [FAppTy GHC.Real.Ratio  int;
                                                                       @(0)]);
                                                              FAppTy GHC.Real.Fractional  @(0)]) | []}
bind 176 fix#GHC.Tuple.#40##44##44##44##44##44##41##35#7c : {VV : func(6, [@(0);
                                                                           @(1);
                                                                           @(2);
                                                                           @(3);
                                                                           @(4);
                                                                           @(5);
                                                                           FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5)]) | []}
bind 177 fix#GHC.Tuple.#40##44##44##44##44##44##44##41##35#7e : {VV : func(7, [@(0);
                                                                               @(1);
                                                                               @(2);
                                                                               @(3);
                                                                               @(4);
                                                                               @(5);
                                                                               @(6);
                                                                               FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6)]) | []}
bind 178 Data.Maybe.Just#r1a : {VV : func(1, [@(0);
                                              FAppTy Data.Maybe.Maybe  @(0)]) | []}
bind 179 GHC.Types.EQ#6U : {VV#978 : GHC.Types.Ordering | [(cmp([VV#978]) = GHC.Types.EQ#6U);
                                                           (VV#978 = GHC.Types.EQ#6U)]}
bind 180 fix#GHC.Tuple.#40##44##44##44##41##35#78 : {VV : func(4, [@(0);
                                                                   @(1);
                                                                   @(2);
                                                                   @(3);
                                                                   FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3)]) | []}
bind 181 GHC.Types.LT#6S : {VV#980 : GHC.Types.Ordering | [(cmp([VV#980]) = GHC.Types.LT#6S);
                                                           (VV#980 = GHC.Types.LT#6S)]}
bind 182 GHC.Types.GT#6W : {VV#981 : GHC.Types.Ordering | [(cmp([VV#981]) = GHC.Types.GT#6W);
                                                           (VV#981 = GHC.Types.GT#6W)]}
bind 183 fix#GHC.Tuple.#40##44##44##44##44##41##35#7a : {VV : func(5, [@(0);
                                                                       @(1);
                                                                       @(2);
                                                                       @(3);
                                                                       @(4);
                                                                       FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4)]) | []}
bind 184 fix#GHC.Real.D#58#Integral#35#r6o : {VV : func(1, [func(0, [@(0);
                                                                     @(0);
                                                                     @(0)]);
                                                            func(0, [@(0); @(0); @(0)]);
                                                            func(0, [@(0); @(0); @(0)]);
                                                            func(0, [@(0); @(0); @(0)]);
                                                            func(0, [@(0);
                                                                     @(0);
                                                                     FAppTy (FAppTy fix##40##41#  @(0))  @(0)]);
                                                            func(0, [@(0);
                                                                     @(0);
                                                                     FAppTy (FAppTy fix##40##41#  @(0))  @(0)]);
                                                            func(0, [@(0); int]);
                                                            FAppTy GHC.Real.Integral  @(0)]) | []}
bind 185 fix#GHC.Tuple.#40##44##41##35#74 : {VV : func(2, [@(0);
                                                           @(1);
                                                           FAppTy (FAppTy fix##40##41#  @(0))  @(1)]) | []}
bind 186 fix#GHC.Types.#58##35#64 : {VV : func(1, [@(0);
                                                   [@(0)];
                                                   [@(0)]]) | []}
bind 187 Foo.Node#r12k : {VV : func(1, [Foo.Color;
                                        @(0);
                                        FAppTy Foo.RBTree  @(0);
                                        FAppTy Foo.RBTree  @(0);
                                        FAppTy Foo.RBTree  @(0)]) | []}
bind 188 fix#GHC.Tuple.#40##44##44##41##35#76 : {VV : func(3, [@(0);
                                                               @(1);
                                                               @(2);
                                                               FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2)]) | []}
bind 189 fix#GHC.Types.#91##93##35#6m : {VV : func(1, [[@(0)]]) | []}
bind 190 Foo.Leaf#r12l : {VV : func(1, [FAppTy Foo.RBTree  @(0)]) | []}
bind 191 Data.Maybe.Nothing#r19 : {VV : func(1, [FAppTy Data.Maybe.Maybe  @(0)]) | []}
bind 192 fix#Foo.#36#WNode#35#r12k : {VV : func(1, [Foo.Color;
                                                    @(0);
                                                    FAppTy Foo.RBTree  @(0);
                                                    FAppTy Foo.RBTree  @(0);
                                                    FAppTy Foo.RBTree  @(0)]) | []}
bind 193 fix#GHC.Real.D#58#Fractional#35#rkT : {VV : func(1, [func(0, [@(0);
                                                                       @(0);
                                                                       @(0)]);
                                                              func(0, [@(0); @(0)]);
                                                              func(0, [FAppTy GHC.Real.Ratio  int;
                                                                       @(0)]);
                                                              FAppTy GHC.Real.Fractional  @(0)]) | []}
// META bind 0 : <no location info>


// META bind 16 : <no location info>


// META bind 32 : <no location info>


// META bind 48 : <no location info>


// META bind 64 : <no location info>


// META bind 80 : <no location info>


// META bind 96 : <no location info>


// META bind 112 : <no location info>


// META bind 128 : <no location info>


// META bind 144 : <no location info>


// META bind 160 : <no location info>


// META bind 176 : <no location info>


// META bind 192 : <no location info>


// META bind 1 : <no location info>


// META bind 17 : <no location info>


// META bind 33 : <no location info>


// META bind 49 : <no location info>


// META bind 65 : <no location info>


// META bind 81 : <no location info>


// META bind 97 : <no location info>


// META bind 113 : <no location info>


// META bind 129 : <no location info>


// META bind 145 : <no location info>


// META bind 161 : <no location info>


// META bind 177 : <no location info>


// META bind 193 : <no location info>


// META bind 2 : <no location info>


// META bind 18 : <no location info>


// META bind 34 : <no location info>


// META bind 50 : <no location info>


// META bind 66 : <no location info>


// META bind 82 : <no location info>


// META bind 98 : <no location info>


// META bind 114 : <no location info>


// META bind 130 : <no location info>


// META bind 146 : <no location info>


// META bind 162 : <no location info>


// META bind 178 : <no location info>


// META bind 3 : <no location info>


// META bind 19 : <no location info>


// META bind 35 : <no location info>


// META bind 51 : <no location info>


// META bind 67 : <no location info>


// META bind 83 : <no location info>


// META bind 99 : <no location info>


// META bind 115 : <no location info>


// META bind 131 : <no location info>


// META bind 147 : <no location info>


// META bind 163 : <no location info>


// META bind 179 : <no location info>


// META bind 4 : <no location info>


// META bind 20 : <no location info>


// META bind 36 : <no location info>


// META bind 52 : <no location info>


// META bind 68 : <no location info>


// META bind 84 : <no location info>


// META bind 100 : <no location info>


// META bind 116 : <no location info>


// META bind 132 : <no location info>


// META bind 148 : <no location info>


// META bind 164 : <no location info>


// META bind 180 : <no location info>


// META bind 5 : <no location info>


// META bind 21 : <no location info>


// META bind 37 : <no location info>


// META bind 53 : <no location info>


// META bind 69 : <no location info>


// META bind 85 : <no location info>


// META bind 101 : <no location info>


// META bind 117 : <no location info>


// META bind 133 : <no location info>


// META bind 149 : <no location info>


// META bind 165 : <no location info>


// META bind 181 : <no location info>


// META bind 6 : <no location info>


// META bind 22 : <no location info>


// META bind 38 : <no location info>


// META bind 54 : <no location info>


// META bind 70 : <no location info>


// META bind 86 : <no location info>


// META bind 102 : <no location info>


// META bind 118 : <no location info>


// META bind 134 : <no location info>


// META bind 150 : <no location info>


// META bind 166 : <no location info>


// META bind 182 : <no location info>


// META bind 7 : <no location info>


// META bind 23 : <no location info>


// META bind 39 : <no location info>


// META bind 55 : <no location info>


// META bind 71 : <no location info>


// META bind 87 : <no location info>


// META bind 103 : <no location info>


// META bind 119 : <no location info>


// META bind 135 : <no location info>


// META bind 151 : <no location info>


// META bind 167 : <no location info>


// META bind 183 : <no location info>


// META bind 8 : <no location info>


// META bind 24 : <no location info>


// META bind 40 : <no location info>


// META bind 56 : <no location info>


// META bind 72 : <no location info>


// META bind 88 : <no location info>


// META bind 104 : <no location info>


// META bind 120 : <no location info>


// META bind 136 : <no location info>


// META bind 152 : <no location info>


// META bind 168 : <no location info>


// META bind 184 : <no location info>


// META bind 9 : <no location info>


// META bind 25 : <no location info>


// META bind 41 : <no location info>


// META bind 57 : <no location info>


// META bind 73 : <no location info>


// META bind 89 : <no location info>


// META bind 105 : <no location info>


// META bind 121 : <no location info>


// META bind 137 : <no location info>


// META bind 153 : <no location info>


// META bind 169 : <no location info>


// META bind 185 : <no location info>


// META bind 10 : <no location info>


// META bind 26 : <no location info>


// META bind 42 : <no location info>


// META bind 58 : <no location info>


// META bind 74 : <no location info>


// META bind 90 : <no location info>


// META bind 106 : <no location info>


// META bind 122 : <no location info>


// META bind 138 : <no location info>


// META bind 154 : <no location info>


// META bind 170 : <no location info>


// META bind 186 : <no location info>


// META bind 11 : <no location info>


// META bind 27 : <no location info>


// META bind 43 : <no location info>


// META bind 59 : <no location info>


// META bind 75 : <no location info>


// META bind 91 : <no location info>


// META bind 107 : <no location info>


// META bind 123 : <no location info>


// META bind 139 : <no location info>


// META bind 155 : <no location info>


// META bind 171 : <no location info>


// META bind 187 : <no location info>


// META bind 12 : <no location info>


// META bind 28 : <no location info>


// META bind 44 : <no location info>


// META bind 60 : <no location info>


// META bind 76 : <no location info>


// META bind 92 : <no location info>


// META bind 108 : <no location info>


// META bind 124 : <no location info>


// META bind 140 : <no location info>


// META bind 156 : <no location info>


// META bind 172 : <no location info>


// META bind 188 : <no location info>


// META bind 13 : <no location info>


// META bind 29 : <no location info>


// META bind 45 : <no location info>


// META bind 61 : <no location info>


// META bind 77 : <no location info>


// META bind 93 : <no location info>


// META bind 109 : <no location info>


// META bind 125 : <no location info>


// META bind 141 : <no location info>


// META bind 157 : <no location info>


// META bind 173 : <no location info>


// META bind 189 : <no location info>


// META bind 14 : <no location info>


// META bind 30 : <no location info>


// META bind 46 : <no location info>


// META bind 62 : <no location info>


// META bind 78 : <no location info>


// META bind 94 : <no location info>


// META bind 110 : <no location info>


// META bind 126 : <no location info>


// META bind 142 : <no location info>


// META bind 158 : <no location info>


// META bind 174 : <no location info>


// META bind 190 : <no location info>


// META bind 15 : <no location info>


// META bind 31 : <no location info>


// META bind 47 : <no location info>


// META bind 63 : <no location info>


// META bind 79 : <no location info>


// META bind 95 : <no location info>


// META bind 111 : <no location info>


// META bind 127 : <no location info>


// META bind 143 : <no location info>


// META bind 159 : <no location info>


// META bind 175 : <no location info>


// META bind 191 : <no location info>

