qualif Fst(v : @(1), fix##126#Y : @(0)): (v = fst([fix##126#Y])) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.spec" (line 27, column 8)
qualif Snd(v : @(1), fix##126#Y : @(0)): (v = snd([fix##126#Y])) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.spec" (line 28, column 8)
qualif Auto(v : int): (v = 1) // "Variance.hs" (line 10, column 1)
qualif Auto(v : int): (v > 0) // "Variance.hs" (line 10, column 1)
qualif Auto(v : int): (v > 0) // "Variance.hs" (line 15, column 1)
qualif Auto(v : int): (v = 1) // "Variance.hs" (line 15, column 1)
qualif Auto(v : int): (v = 1) // "Variance.hs" (line 19, column 1)
qualif Auto(v : int): (v > 0) // "Variance.hs" (line 19, column 1)
qualif Auto(v : int): (v = 1) // "Variance.hs" (line 23, column 1)
qualif Auto(v : int): (v > 0) // "Variance.hs" (line 23, column 1)
qualif Auto(v : int): (v < 2) // "Variance.hs" (line 23, column 1)
qualif Auto(v : int): (v = 1) // "Variance.hs" (line 28, column 1)
qualif Auto(v : int): (v > 0) // "Variance.hs" (line 28, column 1)
qualif Auto(v : int): (v < 2) // "Variance.hs" (line 28, column 1)
qualif IsEmp(v : GHC.Types.Bool, fix##126#Xs : [@(0)]): ((? Prop([v])) <=> (len([fix##126#Xs]) > 0)) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 13, column 8)
qualif IsEmp(v : GHC.Types.Bool, fix##126#Xs : [@(0)]): ((? Prop([v])) <=> (len([fix##126#Xs]) = 0)) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 14, column 8)
qualif ListZ(v : [@(0)]): (len([v]) = 0) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 16, column 8)
qualif ListZ(v : [@(0)]): (len([v]) >= 0) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 17, column 8)
qualif ListZ(v : [@(0)]): (len([v]) > 0) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 18, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) = len([fix##126#Xs])) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 20, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) >= len([fix##126#Xs])) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 21, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) > len([fix##126#Xs])) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 22, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) <= len([fix##126#Xs])) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 23, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) < len([fix##126#Xs])) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 24, column 8)
qualif EqLen(v : int, fix##126#Xs : [@(0)]): (v = len([fix##126#Xs])) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 26, column 8)
qualif LenEq(v : [@(0)], fix##126#X : int): (fix##126#X = len([v])) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 27, column 8)
qualif LenDiff(v : [@(0)], fix##126#X : int): (len([v]) = (fix##126#X + 1)) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 28, column 8)
qualif LenDiff(v : [@(0)], fix##126#X : int): (len([v]) = (fix##126#X - 1)) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 29, column 8)
qualif LenAcc(v : int, fix##126#Xs : [@(0)], fix##126#N : int): (v = (len([fix##126#Xs]) + fix##126#N)) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 30, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 3, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 4, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 5, column 8)
qualif Bot(v : bool): (0 = 1) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 6, column 8)
qualif Bot(v : int): (0 = 1) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 7, column 8)
qualif CmpZ(v : @(0)): (v < 0) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 9, column 8)
qualif CmpZ(v : @(0)): (v <= 0) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 10, column 8)
qualif CmpZ(v : @(0)): (v > 0) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 11, column 8)
qualif CmpZ(v : @(0)): (v >= 0) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 12, column 8)
qualif CmpZ(v : @(0)): (v = 0) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 13, column 8)
qualif CmpZ(v : @(0)): (v != 0) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 14, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v < fix##126#X) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 16, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v <= fix##126#X) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 17, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v > fix##126#X) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 18, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v >= fix##126#X) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 19, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v = fix##126#X) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 20, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v != fix##126#X) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 21, column 8)
qualif One(v : int): (v = 1) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 28, column 8)
qualif True(v : bool): (? v) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 29, column 8)
qualif False(v : bool): (~ ((? v))) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 30, column 8)
qualif True1(v : GHC.Types.Bool): (? Prop([v])) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 31, column 8)
qualif False1(v : GHC.Types.Bool): (~ ((? Prop([v])))) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 32, column 8)
qualif Papp(v : @(0), fix##126#P : FAppTy Pred  @(0)): (? papp1([fix##126#P;
                                                                 v])) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 35, column 8)
qualif Papp2(v : @(1), fix##126#X : @(0), fix##126#P : FAppTy (FAppTy Pred  @(1))  @(0)): (? papp2([fix##126#P;
                                                                                                    v;
                                                                                                    fix##126#X])) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 38, column 8)
qualif Papp3(v : @(2), fix##126#X : @(0), fix##126#Y : @(1), fix##126#P : FAppTy (FAppTy (FAppTy Pred  @(2))  @(0))  @(1)): (? papp3([fix##126#P;
                                                                                                                                      v;
                                                                                                                                      fix##126#X;
                                                                                                                                      fix##126#Y])) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 41, column 8)

constant Prop : (func(0, [GHC.Types.Bool; bool]))
constant x_Tuple64 : (func(6, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5);
                               @(3)]))
constant x_Tuple54 : (func(5, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4);
                               @(3)]))
constant x_Tuple44 : (func(4, [FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3);
                               @(3)]))
constant xListSelector : (func(1, [[@(0)]; @(0)]))
constant x_Tuple41 : (func(4, [FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3);
                               @(0)]))
constant x_Tuple76 : (func(7, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6);
                               @(5)]))
constant addrLen : (func(0, [int; int]))
constant x_Tuple65 : (func(6, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5);
                               @(4)]))
constant x_Tuple52 : (func(5, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4);
                               @(1)]))
constant x_Tuple75 : (func(7, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6);
                               @(4)]))
constant x_Tuple33 : (func(3, [FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2);
                               @(2)]))
constant fst : (func(2, [FAppTy (FAppTy fix##40##41#  @(0))  @(1);
                         @(0)]))
constant x_Tuple73 : (func(7, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6);
                               @(2)]))
constant x_Tuple31 : (func(3, [FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2);
                               @(0)]))
constant x_Tuple43 : (func(4, [FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3);
                               @(2)]))
constant papp4 : (func(8, [FAppTy (FAppTy (FAppTy (FAppTy Pred  @(0))  @(1))  @(2))  @(6);
                           @(3);
                           @(4);
                           @(5);
                           @(7);
                           bool]))
constant x_Tuple71 : (func(7, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6);
                               @(0)]))
constant papp2 : (func(4, [FAppTy (FAppTy Pred  @(0))  @(1);
                           @(2);
                           @(3);
                           bool]))
constant x_Tuple32 : (func(3, [FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2);
                               @(1)]))
constant x_Tuple72 : (func(7, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6);
                               @(1)]))
constant x_Tuple63 : (func(6, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5);
                               @(2)]))
constant x_Tuple51 : (func(5, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4);
                               @(0)]))
constant len : (func(2, [FAppTy @(0)  @(1); int]))
constant xsListSelector : (func(1, [[@(0)]; [@(0)]]))
constant null : (func(1, [[@(0)]; bool]))
constant x_Tuple53 : (func(5, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4);
                               @(2)]))
constant x_Tuple22 : (func(2, [FAppTy (FAppTy fix##40##41#  @(0))  @(1);
                               @(1)]))
constant fromJust : (func(1, [FAppTy Data.Maybe.Maybe  @(0);
                              @(0)]))
constant snd : (func(2, [FAppTy (FAppTy fix##40##41#  @(0))  @(1);
                         @(1)]))
constant x_Tuple62 : (func(6, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5);
                               @(1)]))
constant x_Tuple55 : (func(5, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4);
                               @(4)]))
constant papp3 : (func(6, [FAppTy (FAppTy (FAppTy Pred  @(0))  @(1))  @(2);
                           @(3);
                           @(4);
                           @(5);
                           bool]))
constant x_Tuple74 : (func(7, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6);
                               @(3)]))
constant cmp : (func(0, [GHC.Types.Ordering; GHC.Types.Ordering]))
constant papp1 : (func(1, [FAppTy Pred  @(0); @(0); bool]))
constant isJust : (func(1, [FAppTy Data.Maybe.Maybe  @(0); bool]))
constant x_Tuple42 : (func(4, [FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3);
                               @(1)]))
constant x_Tuple21 : (func(2, [FAppTy (FAppTy fix##40##41#  @(0))  @(1);
                               @(0)]))
constant x_Tuple61 : (func(6, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5);
                               @(0)]))
constant x_Tuple66 : (func(6, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5);
                               @(5)]))
constant x_Tuple77 : (func(7, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6);
                               @(6)]))
bind 0 GHC.Types.EQ#6U : {VV#88 : GHC.Types.Ordering | [(VV#88 = GHC.Types.EQ#6U)]}
bind 1 GHC.Types.LT#6S : {VV#89 : GHC.Types.Ordering | [(VV#89 = GHC.Types.LT#6S)]}
bind 2 GHC.Types.GT#6W : {VV#90 : GHC.Types.Ordering | [(VV#90 = GHC.Types.GT#6W)]}
bind 3 fix#GHC.Num.#42##35#ru : {VV : func(1, [@(0);
                                               @(0);
                                               @(0)]) | []}
bind 4 GHC.Base..#r2q : {VV : func(3, [func(0, [@(0); @(1)]);
                                       func(0, [@(2); @(0)]);
                                       @(2);
                                       @(1)]) | []}
bind 5 GHC.Integer.Type.smallInteger#0Z : {VV : func(0, [int;
                                                         int]) | []}
bind 6 fix#GHC.Num.#43##35#rt : {VV : func(1, [@(0);
                                               @(0);
                                               @(0)]) | []}
bind 7 fix#GHC.Num.#45##35#02B : {VV : func(1, [@(0);
                                                @(0);
                                                @(0)]) | []}
bind 8 GHC.Types.I##6c : {VV : func(0, [int; int]) | []}
bind 9 fix#GHC.Prim.#43##35##35#98 : {VV : func(0, [int;
                                                    int;
                                                    int]) | []}
bind 10 fix#GHC.Prim.#45##35##35#99 : {VV : func(0, [int;
                                                     int;
                                                     int]) | []}
bind 11 fix#GHC.Prim.#61##61##35##35#9o : {VV : func(0, [int;
                                                         int;
                                                         int]) | []}
bind 12 fix#GHC.Prim.#62##61##35##35#9n : {VV : func(0, [int;
                                                         int;
                                                         int]) | []}
bind 13 fix#GHC.Prim.#60##61##35##35#9r : {VV : func(0, [int;
                                                         int;
                                                         int]) | []}
bind 14 fix#GHC.Prim.#60##35##35#9q : {VV : func(0, [int;
                                                     int;
                                                     int]) | []}
bind 15 fix#GHC.Prim.#62##35##35#9m : {VV : func(0, [int;
                                                     int;
                                                     int]) | []}
bind 16 fix#GHC.Tuple.#40##44##44##44##44##44##41##35#7c : {VV : func(6, [@(0);
                                                                          @(1);
                                                                          @(2);
                                                                          @(3);
                                                                          @(4);
                                                                          @(5);
                                                                          FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5)]) | []}
bind 17 fix#GHC.Tuple.#40##44##44##44##44##44##44##41##35#7e : {VV : func(7, [@(0);
                                                                              @(1);
                                                                              @(2);
                                                                              @(3);
                                                                              @(4);
                                                                              @(5);
                                                                              @(6);
                                                                              FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6)]) | []}
bind 18 Data.Maybe.Just#r1a : {VV : func(1, [@(0);
                                             FAppTy Data.Maybe.Maybe  @(0)]) | []}
bind 19 GHC.Types.EQ#6U : {VV#107 : GHC.Types.Ordering | [(cmp([VV#107]) = GHC.Types.EQ#6U);
                                                          (VV#107 = GHC.Types.EQ#6U)]}
bind 20 fix#GHC.Tuple.#40##44##44##44##41##35#78 : {VV : func(4, [@(0);
                                                                  @(1);
                                                                  @(2);
                                                                  @(3);
                                                                  FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3)]) | []}
bind 21 GHC.Types.LT#6S : {VV#109 : GHC.Types.Ordering | [(cmp([VV#109]) = GHC.Types.LT#6S);
                                                          (VV#109 = GHC.Types.LT#6S)]}
bind 22 GHC.Types.GT#6W : {VV#110 : GHC.Types.Ordering | [(cmp([VV#110]) = GHC.Types.GT#6W);
                                                          (VV#110 = GHC.Types.GT#6W)]}
bind 23 fix#GHC.Tuple.#40##44##44##44##44##41##35#7a : {VV : func(5, [@(0);
                                                                      @(1);
                                                                      @(2);
                                                                      @(3);
                                                                      @(4);
                                                                      FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4)]) | []}
bind 24 fix#GHC.Real.D#58#Integral#35#r6o : {VV : func(1, [func(0, [@(0);
                                                                    @(0);
                                                                    @(0)]);
                                                           func(0, [@(0); @(0); @(0)]);
                                                           func(0, [@(0); @(0); @(0)]);
                                                           func(0, [@(0); @(0); @(0)]);
                                                           func(0, [@(0);
                                                                    @(0);
                                                                    FAppTy (FAppTy fix##40##41#  @(0))  @(0)]);
                                                           func(0, [@(0);
                                                                    @(0);
                                                                    FAppTy (FAppTy fix##40##41#  @(0))  @(0)]);
                                                           func(0, [@(0); int]);
                                                           FAppTy GHC.Real.Integral  @(0)]) | []}
bind 25 fix#GHC.Tuple.#40##44##41##35#74 : {VV : func(2, [@(0);
                                                          @(1);
                                                          FAppTy (FAppTy fix##40##41#  @(0))  @(1)]) | []}
bind 26 fix#GHC.Types.#58##35#64 : {VV : func(1, [@(0);
                                                  [@(0)];
                                                  [@(0)]]) | []}
bind 27 fix#GHC.Tuple.#40##44##44##41##35#76 : {VV : func(3, [@(0);
                                                              @(1);
                                                              @(2);
                                                              FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2)]) | []}
bind 28 fix#GHC.Types.#91##93##35#6m : {VV : func(1, [[@(0)]]) | []}
bind 29 Data.Maybe.Nothing#r19 : {VV : func(1, [FAppTy Data.Maybe.Maybe  @(0)]) | []}
bind 30 fix#GHC.Real.D#58#Fractional#35#rkT : {VV : func(1, [func(0, [@(0);
                                                                      @(0);
                                                                      @(0)]);
                                                             func(0, [@(0); @(0)]);
                                                             func(0, [FAppTy GHC.Real.Ratio  int;
                                                                      @(0)]);
                                                             FAppTy GHC.Real.Fractional  @(0)]) | []}
bind 31 r#aMd : {VV#120 : FAppTy (FAppTy (FAppTy (FAppTy Variance.Foo  int)  b_aMy)  c_aMz)  d_aMA | []}
bind 32 Variance.check_invariant#rpz : {VV : func(3, [FAppTy (FAppTy (FAppTy (FAppTy Variance.Foo  int)  @(0))  @(1))  @(2);
                                                      FAppTy (FAppTy (FAppTy (FAppTy Variance.Foo  int)  @(0))  @(1))  @(2)]) | []}
bind 33 r#aMc : {VV#125 : FAppTy (FAppTy (FAppTy (FAppTy Variance.Foo  a_aMQ)  int)  c_aMR)  d_aMS | []}
bind 34 Variance.check_bivariant#rpy : {VV : func(3, [FAppTy (FAppTy (FAppTy (FAppTy Variance.Foo  @(0))  int)  @(1))  @(2);
                                                      FAppTy (FAppTy (FAppTy (FAppTy Variance.Foo  @(0))  int)  @(1))  @(2)]) | []}
bind 35 r#aMb : {VV : func(0, [FAppTy (FAppTy (FAppTy (FAppTy Variance.Foo  a_aN8)  b_aN9)  c_aNa)  int;
                               fix##40##41#]) | []}
bind 36 Variance.check_contravariant#rpx : {VV : func(3, [func(0, [FAppTy (FAppTy (FAppTy (FAppTy Variance.Foo  @(0))  @(1))  @(2))  int;
                                                                   fix##40##41#]);
                                                          FAppTy (FAppTy (FAppTy (FAppTy Variance.Foo  @(0))  @(1))  @(2))  int;
                                                          fix##40##41#]) | []}
bind 37 r#aMa : {VV#140 : FAppTy (FAppTy (FAppTy (FAppTy Variance.Foo  a_aNq)  b_aNr)  c_aNs)  int | []}
bind 38 Variance.check_contravariant0#rpw : {VV : func(3, [FAppTy (FAppTy (FAppTy (FAppTy Variance.Foo  @(0))  @(1))  @(2))  int;
                                                           FAppTy (FAppTy (FAppTy (FAppTy Variance.Foo  @(0))  @(1))  @(2))  int]) | []}
bind 39 r#aM9 : {VV#145 : FAppTy (FAppTy (FAppTy (FAppTy Variance.Foo  a_aNI)  b_aNJ)  int)  c_aNK | []}
bind 40 Variance.check_covariant#rpv : {VV : func(3, [FAppTy (FAppTy (FAppTy (FAppTy Variance.Foo  @(0))  @(1))  int)  @(2);
                                                      FAppTy (FAppTy (FAppTy (FAppTy Variance.Foo  @(0))  @(1))  int)  @(2)]) | []}
bind 41 VV#149 : {VV#149 : FAppTy (FAppTy (FAppTy (FAppTy Variance.Foo  a_aNI)  b_aNJ)  int)  c_aNK | [(VV#149 = r#aM9)]}
bind 42 VV#149 : {VV#149 : FAppTy (FAppTy (FAppTy (FAppTy Variance.Foo  a_aNI)  b_aNJ)  int)  c_aNK | [(VV#149 = r#aM9)]}
bind 43 VV : {VV : a_aNI | []}
bind 44 VV : {VV : a_aNI | []}
bind 45 VV : {VV : b_aNJ | []}
bind 46 VV : {VV : b_aNJ | []}
bind 47 VV#156 : {VV#156 : int | [(VV#156 = 1)]}
bind 48 VV#156 : {VV#156 : int | [(VV#156 = 1)]}
bind 49 VV : {VV : c_aNK | []}
bind 50 VV#160 : {VV#160 : FAppTy (FAppTy (FAppTy (FAppTy Variance.Foo  a_aNq)  b_aNr)  c_aNs)  int | [(VV#160 = r#aMa)]}
bind 51 VV#160 : {VV#160 : FAppTy (FAppTy (FAppTy (FAppTy Variance.Foo  a_aNq)  b_aNr)  c_aNs)  int | [(VV#160 = r#aMa)]}
bind 52 VV : {VV : a_aNq | []}
bind 53 VV : {VV : a_aNq | []}
bind 54 VV : {VV : b_aNr | []}
bind 55 VV : {VV : b_aNr | []}
bind 56 VV : {VV : c_aNs | []}
bind 57 VV#168 : {VV#168 : int | [(VV#168 = 1)]}
bind 58 VV#168 : {VV#168 : int | [(VV#168 = 1)]}
bind 59 lq_tmp_x_136 : {lq_tmp_x_136 : func(0, [FAppTy (FAppTy (FAppTy (FAppTy Variance.Foo  a_aN8)  b_aN9)  c_aNa)  int;
                                                fix##40##41#]) | [(lq_tmp_x_136 = r#aMb)]}
bind 60 VV#172 : {VV#172 : FAppTy (FAppTy (FAppTy (FAppTy Variance.Foo  a_aN8)  b_aN9)  c_aNa)  int | []}
bind 61 VV#172 : {VV#172 : FAppTy (FAppTy (FAppTy (FAppTy Variance.Foo  a_aN8)  b_aN9)  c_aNa)  int | []}
bind 62 VV : {VV : a_aN8 | []}
bind 63 VV : {VV : a_aN8 | []}
bind 64 VV : {VV : b_aN9 | []}
bind 65 VV : {VV : b_aN9 | []}
bind 66 VV : {VV : c_aNa | []}
bind 67 VV#180 : {VV#180 : int | [(VV#180 = 1)]}
bind 68 VV#180 : {VV#180 : int | [(VV#180 = 1)]}
bind 69 lq_tmp_x_131 : {VV#183 : FAppTy (FAppTy (FAppTy (FAppTy Variance.Foo  a_aN8)  b_aN9)  c_aNa)  int | []}
bind 70 VV#184 : {VV#184 : fix##40##41# | []}
bind 71 VV#184 : {VV#184 : fix##40##41# | []}
bind 72 VV#187 : {VV#187 : FAppTy (FAppTy (FAppTy (FAppTy Variance.Foo  a_aMQ)  int)  c_aMR)  d_aMS | [(VV#187 = r#aMc)]}
bind 73 VV#187 : {VV#187 : FAppTy (FAppTy (FAppTy (FAppTy Variance.Foo  a_aMQ)  int)  c_aMR)  d_aMS | [(VV#187 = r#aMc)]}
bind 74 VV : {VV : a_aMQ | []}
bind 75 VV : {VV : a_aMQ | []}
bind 76 VV#192 : {VV#192 : int | [(VV#192 = 1)]}
bind 77 VV#192 : {VV#192 : int | [(VV#192 = 1)]}
bind 78 VV#195 : {VV#195 : int | [(VV#195 > 0); (VV#195 < 2)]}
bind 79 VV#195 : {VV#195 : int | [(VV#195 > 0); (VV#195 < 2)]}
bind 80 VV : {VV : c_aMR | []}
bind 81 VV : {VV : d_aMS | []}
bind 82 VV#200 : {VV#200 : FAppTy (FAppTy (FAppTy (FAppTy Variance.Foo  int)  b_aMy)  c_aMz)  d_aMA | [(VV#200 = r#aMd)]}
bind 83 VV#200 : {VV#200 : FAppTy (FAppTy (FAppTy (FAppTy Variance.Foo  int)  b_aMy)  c_aMz)  d_aMA | [(VV#200 = r#aMd)]}
bind 84 VV#203 : {VV#203 : int | [(VV#203 = 1)]}
bind 85 VV#203 : {VV#203 : int | [(VV#203 = 1)]}
bind 86 VV#206 : {VV#206 : int | [(VV#206 > 0); (VV#206 < 2)]}
bind 87 VV#206 : {VV#206 : int | [(VV#206 > 0); (VV#206 < 2)]}
bind 88 VV : {VV : b_aMy | []}
bind 89 VV : {VV : b_aMy | []}
bind 90 VV : {VV : c_aMz | []}
bind 91 VV : {VV : d_aMA | []}


constraint:
  env [0;
       16;
       32;
       1;
       17;
       2;
       18;
       34;
       3;
       19;
       4;
       20;
       36;
       5;
       21;
       6;
       22;
       38;
       7;
       23;
       39;
       8;
       24;
       9;
       25;
       10;
       26;
       42;
       11;
       27;
       12;
       28;
       13;
       29;
       14;
       30;
       15;
       47]
  grd true
  lhs {VV#F1 : int | [(VV#F1 = 1)]}
  rhs {VV#F1 : int | [(VV#F1 > 0)]}
  id 1 tag [5]
  // META constraint id 1 : Variance.hs:10:21
  



constraint:
  env [0;
       16;
       32;
       1;
       17;
       2;
       18;
       34;
       3;
       19;
       51;
       4;
       20;
       36;
       5;
       21;
       37;
       6;
       22;
       7;
       23;
       8;
       24;
       9;
       25;
       57;
       10;
       26;
       11;
       27;
       12;
       28;
       13;
       29;
       14;
       30;
       15]
  grd true
  lhs {VV#F2 : int | [(VV#F2 = 1)]}
  rhs {VV#F2 : int | [(VV#F2 > 0)]}
  id 2 tag [4]
  // META constraint id 2 : Variance.hs:15:26
  



constraint:
  env [0;
       16;
       32;
       1;
       17;
       2;
       18;
       34;
       3;
       19;
       35;
       67;
       4;
       20;
       5;
       21;
       6;
       22;
       7;
       23;
       8;
       24;
       9;
       25;
       10;
       26;
       11;
       27;
       12;
       28;
       13;
       29;
       61;
       14;
       30;
       15]
  grd true
  lhs {VV#F3 : int | [(VV#F3 = 1)]}
  rhs {VV#F3 : int | [(VV#F3 > 0)]}
  id 3 tag [3]
  // META constraint id 3 : Variance.hs:19:25
  



constraint:
  env [0;
       16;
       32;
       1;
       17;
       33;
       2;
       18;
       3;
       19;
       4;
       20;
       5;
       21;
       6;
       22;
       7;
       23;
       8;
       24;
       9;
       25;
       73;
       10;
       26;
       11;
       27;
       12;
       28;
       76;
       13;
       29;
       14;
       30;
       15]
  grd true
  lhs {VV#F4 : int | [(VV#F4 = 1)]}
  rhs {VV#F4 : int | [(VV#F4 > 0)]}
  id 4 tag [2]
  // META constraint id 4 : Variance.hs:23:21
  



constraint:
  env [0;
       16;
       32;
       1;
       17;
       33;
       2;
       18;
       3;
       19;
       4;
       20;
       5;
       21;
       6;
       22;
       7;
       23;
       8;
       24;
       9;
       25;
       73;
       10;
       26;
       11;
       27;
       12;
       28;
       76;
       13;
       29;
       14;
       30;
       15]
  grd true
  lhs {VV#F5 : int | [(VV#F5 = 1)]}
  rhs {VV#F5 : int | [(VV#F5 < 2)]}
  id 5 tag [2]
  // META constraint id 5 : Variance.hs:23:21
  



constraint:
  env [0;
       16;
       32;
       1;
       17;
       33;
       2;
       18;
       3;
       19;
       4;
       20;
       5;
       21;
       6;
       22;
       7;
       23;
       8;
       24;
       9;
       25;
       73;
       10;
       26;
       11;
       27;
       12;
       28;
       13;
       29;
       14;
       30;
       78;
       15]
  grd true
  lhs {VV#F6 : int | [(VV#F6 > 0); (VV#F6 < 2)]}
  rhs {VV#F6 : int | [(VV#F6 = 1)]}
  id 6 tag [2]
  // META constraint id 6 : Variance.hs:23:21
  



constraint:
  env [0;
       16;
       1;
       17;
       2;
       18;
       3;
       19;
       83;
       4;
       20;
       84;
       5;
       21;
       6;
       22;
       7;
       23;
       8;
       24;
       9;
       25;
       10;
       26;
       11;
       27;
       12;
       28;
       13;
       29;
       14;
       30;
       15;
       31]
  grd true
  lhs {VV#F7 : int | [(VV#F7 = 1)]}
  rhs {VV#F7 : int | [(VV#F7 > 0)]}
  id 7 tag [1]
  // META constraint id 7 : Variance.hs:28:21
  



constraint:
  env [0;
       16;
       1;
       17;
       2;
       18;
       3;
       19;
       83;
       4;
       20;
       84;
       5;
       21;
       6;
       22;
       7;
       23;
       8;
       24;
       9;
       25;
       10;
       26;
       11;
       27;
       12;
       28;
       13;
       29;
       14;
       30;
       15;
       31]
  grd true
  lhs {VV#F8 : int | [(VV#F8 = 1)]}
  rhs {VV#F8 : int | [(VV#F8 < 2)]}
  id 8 tag [1]
  // META constraint id 8 : Variance.hs:28:21
  



constraint:
  env [0;
       16;
       1;
       17;
       2;
       18;
       3;
       19;
       83;
       4;
       20;
       5;
       21;
       6;
       22;
       86;
       7;
       23;
       8;
       24;
       9;
       25;
       10;
       26;
       11;
       27;
       12;
       28;
       13;
       29;
       14;
       30;
       15;
       31]
  grd true
  lhs {VV#F9 : int | [(VV#F9 > 0); (VV#F9 < 2)]}
  rhs {VV#F9 : int | [(VV#F9 = 1)]}
  id 9 tag [1]
  // META constraint id 9 : Variance.hs:28:21
  

// META bind 0 : <no location info>


// META bind 16 : <no location info>


// META bind 32 : <no location info>


// META bind 48 : Variance.hs:10:21


// META bind 64 : Variance.hs:19:25


// META bind 80 : Variance.hs:23:21


// META bind 1 : <no location info>


// META bind 17 : <no location info>


// META bind 33 : Variance.hs:23:1-15


// META bind 49 : Variance.hs:10:21


// META bind 65 : Variance.hs:19:25


// META bind 81 : Variance.hs:23:21


// META bind 2 : <no location info>


// META bind 18 : <no location info>


// META bind 34 : <no location info>


// META bind 50 : Variance.hs:15:26


// META bind 66 : Variance.hs:19:25


// META bind 82 : Variance.hs:28:21


// META bind 3 : <no location info>


// META bind 19 : <no location info>


// META bind 35 : Variance.hs:19:1-19


// META bind 51 : Variance.hs:15:26


// META bind 67 : Variance.hs:19:25


// META bind 83 : Variance.hs:28:21


// META bind 4 : <no location info>


// META bind 20 : <no location info>


// META bind 36 : <no location info>


// META bind 52 : Variance.hs:15:26


// META bind 68 : Variance.hs:19:25


// META bind 84 : Variance.hs:28:21


// META bind 5 : <no location info>


// META bind 21 : <no location info>


// META bind 37 : Variance.hs:15:1-20


// META bind 53 : Variance.hs:15:26


// META bind 69 : Variance.hs:19:25


// META bind 85 : Variance.hs:28:21


// META bind 6 : <no location info>


// META bind 22 : <no location info>


// META bind 38 : <no location info>


// META bind 54 : Variance.hs:15:26


// META bind 70 : Variance.hs:19:25


// META bind 86 : Variance.hs:28:21


// META bind 7 : <no location info>


// META bind 23 : <no location info>


// META bind 39 : Variance.hs:10:1-15


// META bind 55 : Variance.hs:15:26


// META bind 71 : Variance.hs:19:25


// META bind 87 : Variance.hs:28:21


// META bind 8 : <no location info>


// META bind 24 : <no location info>


// META bind 40 : <no location info>


// META bind 56 : Variance.hs:15:26


// META bind 72 : Variance.hs:23:21


// META bind 88 : Variance.hs:28:21


// META bind 9 : <no location info>


// META bind 25 : <no location info>


// META bind 41 : Variance.hs:10:21


// META bind 57 : Variance.hs:15:26


// META bind 73 : Variance.hs:23:21


// META bind 89 : Variance.hs:28:21


// META bind 10 : <no location info>


// META bind 26 : <no location info>


// META bind 42 : Variance.hs:10:21


// META bind 58 : Variance.hs:15:26


// META bind 74 : Variance.hs:23:21


// META bind 90 : Variance.hs:28:21


// META bind 11 : <no location info>


// META bind 27 : <no location info>


// META bind 43 : Variance.hs:10:21


// META bind 59 : Variance.hs:19:25


// META bind 75 : Variance.hs:23:21


// META bind 91 : Variance.hs:28:21


// META bind 12 : <no location info>


// META bind 28 : <no location info>


// META bind 44 : Variance.hs:10:21


// META bind 60 : Variance.hs:19:25


// META bind 76 : Variance.hs:23:21


// META bind 13 : <no location info>


// META bind 29 : <no location info>


// META bind 45 : Variance.hs:10:21


// META bind 61 : Variance.hs:19:25


// META bind 77 : Variance.hs:23:21


// META bind 14 : <no location info>


// META bind 30 : <no location info>


// META bind 46 : Variance.hs:10:21


// META bind 62 : Variance.hs:19:25


// META bind 78 : Variance.hs:23:21


// META bind 15 : <no location info>


// META bind 31 : Variance.hs:28:1-15


// META bind 47 : Variance.hs:10:21


// META bind 63 : Variance.hs:19:25


// META bind 79 : Variance.hs:23:21

