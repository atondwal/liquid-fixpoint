qualif Fst(v : @(1), fix##126#Y : @(0)): (v = fst([fix##126#Y])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.spec" (line 29, column 8)
qualif Snd(v : @(1), fix##126#Y : @(0)): (v = snd([fix##126#Y])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.spec" (line 30, column 8)
qualif Auto(VV : int, fix##126#A0 : int): (VV > fix##126#A0) // "tup0.hs" (line 11, column 1)
qualif Auto(VV : int, fix##126#A0 : int): (VV > fix##126#A0) // "tup0.hs" (line 7, column 1)
qualif IsEmp(v : GHC.Types.Bool, fix##126#Xs : [@(0)]): ((? Prop([v])) <=> (len([fix##126#Xs]) > 0)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 13, column 8)
qualif IsEmp(v : GHC.Types.Bool, fix##126#Xs : [@(0)]): ((? Prop([v])) <=> (len([fix##126#Xs]) = 0)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 14, column 8)
qualif ListZ(v : [@(0)]): (len([v]) = 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 16, column 8)
qualif ListZ(v : [@(0)]): (len([v]) >= 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 17, column 8)
qualif ListZ(v : [@(0)]): (len([v]) > 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 18, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) = len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 20, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) >= len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 21, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) > len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 22, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) <= len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 23, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) < len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 24, column 8)
qualif EqLen(v : int, fix##126#Xs : [@(0)]): (v = len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 26, column 8)
qualif LenEq(v : [@(0)], fix##126#X : int): (fix##126#X = len([v])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 27, column 8)
qualif LenDiff(v : [@(0)], fix##126#X : int): (len([v]) = (fix##126#X + 1)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 28, column 8)
qualif LenDiff(v : [@(0)], fix##126#X : int): (len([v]) = (fix##126#X - 1)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 29, column 8)
qualif LenAcc(v : int, fix##126#Xs : [@(0)], fix##126#N : int): (v = (len([fix##126#Xs]) + fix##126#N)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 30, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 3, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 4, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 5, column 8)
qualif Bot(v : bool): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 6, column 8)
qualif Bot(v : int): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 7, column 8)
qualif CmpZ(v : @(0)): (v < 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 9, column 8)
qualif CmpZ(v : @(0)): (v <= 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 10, column 8)
qualif CmpZ(v : @(0)): (v > 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 11, column 8)
qualif CmpZ(v : @(0)): (v >= 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 12, column 8)
qualif CmpZ(v : @(0)): (v = 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 13, column 8)
qualif CmpZ(v : @(0)): (v != 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 14, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v < fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 16, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v <= fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 17, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v > fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 18, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v >= fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 19, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v = fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 20, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v != fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 21, column 8)
qualif One(v : int): (v = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 28, column 8)
qualif True(v : bool): (? v) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 29, column 8)
qualif False(v : bool): (~ ((? v))) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 30, column 8)
qualif True1(v : GHC.Types.Bool): (? Prop([v])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 31, column 8)
qualif False1(v : GHC.Types.Bool): (~ ((? Prop([v])))) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 32, column 8)
qualif Papp(v : @(0), fix##126#P : (Pred  @(0))): (? papp1([fix##126#P;
                                                            v])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 35, column 8)
qualif Papp2(v : @(1), fix##126#X : @(0), fix##126#P : (Pred  @(1)  @(0))): (? papp2([fix##126#P;
                                                                                      v;
                                                                                      fix##126#X])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 38, column 8)
qualif Papp3(v : @(2), fix##126#X : @(0), fix##126#Y : @(1), fix##126#P : (Pred  @(2)  @(0)  @(1))): (? papp3([fix##126#P;
                                                                                                               v;
                                                                                                               fix##126#X;
                                                                                                               fix##126#Y])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 41, column 8)

qualif Fst(v : @(1), fix##126#Y : @(0)): (v = fst([fix##126#Y])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.spec" (line 29, column 8)
qualif Snd(v : @(1), fix##126#Y : @(0)): (v = snd([fix##126#Y])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.spec" (line 30, column 8)
qualif Auto(VV : int, fix##126#A0 : int): (VV > fix##126#A0) // "tup0.hs" (line 11, column 1)
qualif Auto(VV : int, fix##126#A0 : int): (VV > fix##126#A0) // "tup0.hs" (line 7, column 1)
qualif IsEmp(v : GHC.Types.Bool, fix##126#Xs : [@(0)]): ((? Prop([v])) <=> (len([fix##126#Xs]) > 0)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 13, column 8)
qualif IsEmp(v : GHC.Types.Bool, fix##126#Xs : [@(0)]): ((? Prop([v])) <=> (len([fix##126#Xs]) = 0)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 14, column 8)
qualif ListZ(v : [@(0)]): (len([v]) = 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 16, column 8)
qualif ListZ(v : [@(0)]): (len([v]) >= 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 17, column 8)
qualif ListZ(v : [@(0)]): (len([v]) > 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 18, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) = len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 20, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) >= len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 21, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) > len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 22, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) <= len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 23, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) < len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 24, column 8)
qualif EqLen(v : int, fix##126#Xs : [@(0)]): (v = len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 26, column 8)
qualif LenEq(v : [@(0)], fix##126#X : int): (fix##126#X = len([v])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 27, column 8)
qualif LenDiff(v : [@(0)], fix##126#X : int): (len([v]) = (fix##126#X + 1)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 28, column 8)
qualif LenDiff(v : [@(0)], fix##126#X : int): (len([v]) = (fix##126#X - 1)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 29, column 8)
qualif LenAcc(v : int, fix##126#Xs : [@(0)], fix##126#N : int): (v = (len([fix##126#Xs]) + fix##126#N)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 30, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 3, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 4, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 5, column 8)
qualif Bot(v : bool): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 6, column 8)
qualif Bot(v : int): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 7, column 8)
qualif CmpZ(v : @(0)): (v < 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 9, column 8)
qualif CmpZ(v : @(0)): (v <= 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 10, column 8)
qualif CmpZ(v : @(0)): (v > 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 11, column 8)
qualif CmpZ(v : @(0)): (v >= 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 12, column 8)
qualif CmpZ(v : @(0)): (v = 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 13, column 8)
qualif CmpZ(v : @(0)): (v != 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 14, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v < fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 16, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v <= fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 17, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v > fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 18, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v >= fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 19, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v = fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 20, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v != fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 21, column 8)
qualif One(v : int): (v = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 28, column 8)
qualif True(v : bool): (? v) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 29, column 8)
qualif False(v : bool): (~ ((? v))) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 30, column 8)
qualif True1(v : GHC.Types.Bool): (? Prop([v])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 31, column 8)
qualif False1(v : GHC.Types.Bool): (~ ((? Prop([v])))) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 32, column 8)
qualif Papp(v : @(0), fix##126#P : (Pred  @(0))): (? papp1([fix##126#P;
                                                            v])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 35, column 8)
qualif Papp2(v : @(1), fix##126#X : @(0), fix##126#P : (Pred  @(1)  @(0))): (? papp2([fix##126#P;
                                                                                      v;
                                                                                      fix##126#X])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 38, column 8)
qualif Papp3(v : @(2), fix##126#X : @(0), fix##126#Y : @(1), fix##126#P : (Pred  @(2)  @(0)  @(1))): (? papp3([fix##126#P;
                                                                                                               v;
                                                                                                               fix##126#X;
                                                                                                               fix##126#Y])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 41, column 8)




constant Prop : (func(0, [GHC.Types.Bool; bool]))
constant x_Tuple64 : (func(6, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5));
                               @(3)]))
constant x_Tuple54 : (func(5, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4));
                               @(3)]))
constant x_Tuple44 : (func(4, [(Tuple  @(0)  @(1)  @(2)  @(3));
                               @(3)]))
constant xListSelector : (func(1, [[@(0)]; @(0)]))
constant x_Tuple41 : (func(4, [(Tuple  @(0)  @(1)  @(2)  @(3));
                               @(0)]))
constant x_Tuple76 : (func(7, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5)  @(6));
                               @(5)]))
constant Data.Maybe.Just#r1a : (func(1, [@(0);
                                         (Data.Maybe.Maybe  @(0))]))
constant autolen : (func(1, [@(0); int]))
constant addrLen : (func(0, [int; int]))
constant x_Tuple65 : (func(6, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5));
                               @(4)]))
constant strLen : (func(0, [int; int]))
constant x_Tuple75 : (func(7, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5)  @(6));
                               @(4)]))
constant GHC.Types.I##6c : (func(0, [int; int]))
constant x_Tuple33 : (func(3, [(Tuple  @(0)  @(1)  @(2)); @(2)]))
constant fst : (func(2, [(Tuple  @(0)  @(1)); @(0)]))
constant x_Tuple73 : (func(7, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5)  @(6));
                               @(2)]))
constant x_Tuple31 : (func(3, [(Tuple  @(0)  @(1)  @(2)); @(0)]))
constant x_Tuple43 : (func(4, [(Tuple  @(0)  @(1)  @(2)  @(3));
                               @(2)]))
constant x_Tuple71 : (func(7, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5)  @(6));
                               @(0)]))
constant x_Tuple52 : (func(5, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4));
                               @(1)]))
constant papp2 : (func(4, [(Pred  @(0)  @(1)); @(2); @(3); bool]))
constant x_Tuple32 : (func(3, [(Tuple  @(0)  @(1)  @(2)); @(1)]))
constant x_Tuple72 : (func(7, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5)  @(6));
                               @(1)]))
constant x_Tuple63 : (func(6, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5));
                               @(2)]))
constant x_Tuple51 : (func(5, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4));
                               @(0)]))
constant len : (func(2, [(@(0)  @(1)); int]))
constant xsListSelector : (func(1, [[@(0)]; [@(0)]]))
constant null : (func(1, [[@(0)]; bool]))
constant x_Tuple53 : (func(5, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4));
                               @(2)]))
constant x_Tuple22 : (func(2, [(Tuple  @(0)  @(1)); @(1)]))
constant fromJust : (func(1, [(Data.Maybe.Maybe  @(0)); @(0)]))
constant snd : (func(2, [(Tuple  @(0)  @(1)); @(1)]))
constant x_Tuple62 : (func(6, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5));
                               @(1)]))
constant x_Tuple55 : (func(5, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4));
                               @(4)]))
constant papp3 : (func(6, [(Pred  @(0)  @(1)  @(2));
                           @(3);
                           @(4);
                           @(5);
                           bool]))
constant papp4 : (func(8, [(Pred  @(0)  @(1)  @(2)  @(6));
                           @(3);
                           @(4);
                           @(5);
                           @(7);
                           bool]))
constant fix#GHC.Tuple.#40##44##41##35#74 : (func(2, [@(0);
                                                      @(1);
                                                      (Tuple  @(0)  @(1))]))
constant x_Tuple74 : (func(7, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5)  @(6));
                               @(3)]))
constant cmp : (func(0, [GHC.Types.Ordering; GHC.Types.Ordering]))
constant papp1 : (func(1, [(Pred  @(0)); @(0); bool]))
constant isJust : (func(1, [(Data.Maybe.Maybe  @(0)); bool]))
constant x_Tuple42 : (func(4, [(Tuple  @(0)  @(1)  @(2)  @(3));
                               @(1)]))
constant x_Tuple21 : (func(2, [(Tuple  @(0)  @(1)); @(0)]))
constant x_Tuple61 : (func(6, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5));
                               @(0)]))
constant x_Tuple66 : (func(6, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5));
                               @(5)]))
constant x_Tuple77 : (func(7, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5)  @(6));
                               @(6)]))


constant Data.Maybe.Just#r1a : (func(1, [@(0);
                                         (Data.Maybe.Maybe  @(0))]))
constant fix#GHC.Tuple.#40##44##41##35#74 : (func(2, [@(0);
                                                      @(1);
                                                      (Tuple  @(0)  @(1))]))


bind 0 GHC.Types.EQ#6U : {VV#125 : GHC.Types.Ordering | [(VV#125 = GHC.Types.EQ#6U)]}
bind 1 GHC.Types.LT#6S : {VV#126 : GHC.Types.Ordering | [(VV#126 = GHC.Types.LT#6S)]}
bind 2 GHC.Types.GT#6W : {VV#127 : GHC.Types.Ordering | [(VV#127 = GHC.Types.GT#6W)]}
bind 3 fix#GHC.Types.#91##93##35#6m : {VV : func(1, [[@(0)]]) | []}
bind 4 Data.Maybe.Nothing#r19 : {VV : func(1, [(Data.Maybe.Maybe  @(0))]) | []}
bind 5 GHC.Types.EQ#6U : {VV#150 : GHC.Types.Ordering | [(cmp([VV#150]) = GHC.Types.EQ#6U)]}
bind 6 GHC.Types.LT#6S : {VV#151 : GHC.Types.Ordering | [(cmp([VV#151]) = GHC.Types.LT#6S)]}
bind 7 GHC.Types.GT#6W : {VV#152 : GHC.Types.Ordering | [(cmp([VV#152]) = GHC.Types.GT#6W)]}
bind 8 lq_anf__dL5 : {lq_tmp_x_157 : int | [(lq_tmp_x_157 = (0  :  int))]}
bind 9 lq_anf__dL6 : {lq_tmp_x_163 : int | [(lq_tmp_x_163 = (1  :  int))]}
bind 10 lq_tmp_x_185 : {VV#186 : int | []}
bind 11 DepTup0.plusOne#rou : {VV#189 : (Tuple  int  int) | []}
bind 12 DepTup0.plusOnes#rpv : {VV#216 : (Data.Maybe.Maybe  (Tuple  int  int)) | []}
bind 13 VV#217 : {VV#217 : (Data.Maybe.Maybe  (Tuple  int  int)) | [(fromJust([VV#217]) = DepTup0.plusOne#rou);
                                                                    ((? isJust([VV#217])) <=> true)]}
bind 14 VV#217 : {VV#217 : (Data.Maybe.Maybe  (Tuple  int  int)) | [(fromJust([VV#217]) = DepTup0.plusOne#rou);
                                                                    ((? isJust([VV#217])) <=> true)]}
bind 15 VV#220 : {VV#220 : (Tuple  int  int) | [$k__204[VV#203:=VV#220][lq_tmp_x_192:=DepTup0.plusOne#rou][lq_tmp_x_190:=VV#217][lq_tmp_x_210:=VV#220]]}
bind 16 VV#220 : {VV#220 : (Tuple  int  int) | [$k__204[VV#203:=VV#220][lq_tmp_x_192:=DepTup0.plusOne#rou][lq_tmp_x_190:=VV#217][lq_tmp_x_210:=VV#220]]}
bind 17 VV#223 : {VV#223 : int | [$k__194[VV#193:=VV#223][VV#203:=VV#220][lq_tmp_x_192:=DepTup0.plusOne#rou][lq_tmp_x_190:=VV#217][lq_tmp_x_210:=VV#220][lq_tmp_x_206:=VV#223]]}
bind 18 VV#223 : {VV#223 : int | [$k__194[VV#193:=VV#223][VV#203:=VV#220][lq_tmp_x_192:=DepTup0.plusOne#rou][lq_tmp_x_190:=VV#217][lq_tmp_x_210:=VV#220][lq_tmp_x_206:=VV#223]]}
bind 19 VV#226 : {VV#226 : int | [$k__197[VV#196:=VV#226][VV#203:=VV#220][lq_tmp_x_192:=DepTup0.plusOne#rou][lq_tmp_x_190:=VV#217][lq_tmp_x_210:=VV#220][lq_tmp_x_207:=VV#226]]}
bind 20 VV#226 : {VV#226 : int | [$k__197[VV#196:=VV#226][VV#203:=VV#220][lq_tmp_x_192:=DepTup0.plusOne#rou][lq_tmp_x_190:=VV#217][lq_tmp_x_210:=VV#220][lq_tmp_x_207:=VV#226]]}
bind 21 x_0 : {VV#229 : int | []}
bind 22 VV#230 : {VV#230 : int | [$k__201[VV#200:=VV#230][lq_tmp_x_199:=x_0][lq_tmp_x_192:=DepTup0.plusOne#rou][lq_tmp_x_190:=VV#217][lq_tmp_x_208:=x_0][lq_tmp_x_209:=VV#230]]}
bind 23 VV#230 : {VV#230 : int | [$k__201[VV#200:=VV#230][lq_tmp_x_199:=x_0][lq_tmp_x_192:=DepTup0.plusOne#rou][lq_tmp_x_190:=VV#217][lq_tmp_x_208:=x_0][lq_tmp_x_209:=VV#230]]}
bind 24 VV#233 : {VV#233 : (Tuple  int  int) | [(VV#233 = DepTup0.plusOne#rou)]}
bind 25 VV#233 : {VV#233 : (Tuple  int  int) | [(VV#233 = DepTup0.plusOne#rou)]}
bind 26 VV#236 : {VV#236 : int | []}
bind 27 VV#236 : {VV#236 : int | []}
bind 28 VV#239 : {VV#239 : int | []}
bind 29 VV#239 : {VV#239 : int | []}
bind 30 lq_tmp_x_208 : {VV#242 : int | []}
bind 31 VV#243 : {VV#243 : int | [(VV#243 > lq_tmp_x_208)]}
bind 32 VV#243 : {VV#243 : int | [(VV#243 > lq_tmp_x_208)]}
bind 33 VV#246 : {VV#246 : (Tuple  int  int) | [(snd([VV#246]) = lq_anf__dL6);
                                                (fst([VV#246]) = lq_anf__dL5);
                                                (x_Tuple22([VV#246]) = lq_anf__dL6);
                                                (x_Tuple21([VV#246]) = lq_anf__dL5)]}
bind 34 VV#246 : {VV#246 : (Tuple  int  int) | [(snd([VV#246]) = lq_anf__dL6);
                                                (fst([VV#246]) = lq_anf__dL5);
                                                (x_Tuple22([VV#246]) = lq_anf__dL6);
                                                (x_Tuple21([VV#246]) = lq_anf__dL5)]}
bind 35 VV#249 : {VV#249 : int | [$k__175[VV#174:=VV#249][lq_tmp_x_172:=lq_anf__dL5][lq_tmp_x_173:=lq_anf__dL6][lq_tmp_x_169:=VV#246][lq_tmp_x_177:=VV#249]]}
bind 36 VV#249 : {VV#249 : int | [$k__175[VV#174:=VV#249][lq_tmp_x_172:=lq_anf__dL5][lq_tmp_x_173:=lq_anf__dL6][lq_tmp_x_169:=VV#246][lq_tmp_x_177:=VV#249]]}
bind 37 VV#252 : {VV#252 : int | [$k__179[VV#178:=VV#252][lq_tmp_x_172:=lq_anf__dL5][lq_tmp_x_173:=lq_anf__dL6][lq_tmp_x_169:=VV#246][lq_tmp_x_181:=VV#252]]}
bind 38 VV#252 : {VV#252 : int | [$k__179[VV#178:=VV#252][lq_tmp_x_172:=lq_anf__dL5][lq_tmp_x_173:=lq_anf__dL6][lq_tmp_x_169:=VV#246][lq_tmp_x_181:=VV#252]]}
bind 39 x_0 : {VV#255 : int | []}
bind 40 VV#256 : {VV#256 : int | [$k__183[lq_tmp_x_185:=x_0][VV#182:=VV#256][lq_tmp_x_172:=lq_anf__dL5][lq_tmp_x_173:=lq_anf__dL6][lq_tmp_x_168:=x_0][lq_tmp_x_181:=VV#256]]}
bind 41 VV#256 : {VV#256 : int | [$k__183[lq_tmp_x_185:=x_0][VV#182:=VV#256][lq_tmp_x_172:=lq_anf__dL5][lq_tmp_x_173:=lq_anf__dL6][lq_tmp_x_168:=x_0][lq_tmp_x_181:=VV#256]]}
bind 42 VV#259 : {VV#259 : int | [(VV#259 = lq_anf__dL6)]}
bind 43 VV#259 : {VV#259 : int | [(VV#259 = lq_anf__dL6)]}
bind 44 VV#262 : {VV#262 : int | [(VV#262 = lq_anf__dL5)]}
bind 45 VV#262 : {VV#262 : int | [(VV#262 = lq_anf__dL5)]}
bind 46 VV#265 : {VV#265 : int | [(VV#265 = 1)]}
bind 47 VV#265 : {VV#265 : int | [(VV#265 = 1)]}
bind 48 VV#268 : {VV#268 : int | [(VV#268 = 0)]}
bind 49 VV#268 : {VV#268 : int | [(VV#268 = 0)]}
bind 50 VV#203 : {VV#203 : (Tuple  int  int) | [$k__204]}
bind 51 VV#193 : {VV#193 : int | [$k__194]}
bind 52 VV#196 : {VV#196 : int | [$k__197]}
bind 53 lq_tmp_x_199 : {VV#274 : int | []}
bind 54 VV#200 : {VV#200 : int | [$k__201]}
bind 55 VV#182 : {VV#182 : int | [$k__183]}
bind 56 VV#178 : {VV#178 : int | [$k__179]}
bind 57 VV#174 : {VV#174 : int | [$k__175]}




constraint:
  env [0; 16; 1; 2; 3; 4; 5; 21; 6; 22; 7; 11; 14]
  grd true
  lhs {VV#F1 : int | [$k__201[VV#200:=VV#F1][lq_tmp_x_199:=x_0][lq_tmp_x_192:=DepTup0.plusOne#rou][lq_tmp_x_190:=VV#217][lq_tmp_x_208:=x_0][lq_tmp_x_209:=VV#F1][VV#230:=VV#F1][VV#F:=VV#F1]]}
  rhs {VV#F1 : int | [(VV#F1 > x_0)]}
  id 1 tag [2]
  // META constraint id 1 : tup0.hs:11:12-23


constraint:
  env [0; 1; 2; 3; 4; 5; 6; 7; 24; 11]
  grd true
  lhs {VV#F2 : (Tuple  int  int) | [(VV#F2 = DepTup0.plusOne#rou)]}
  rhs {VV#F2 : (Tuple  int  int) | [$k__204[VV#203:=VV#F2][lq_tmp_x_210:=VV#F2][VV#233:=VV#F2][VV#F:=VV#F2]]}
  id 2 tag [2]
  // META constraint id 2 : tup0.hs:11:17-23


constraint:
  env [0; 1; 2; 3; 4; 5; 6; 7; 25; 26; 11]
  grd true
  lhs {VV#F3 : int | []}
  rhs {VV#F3 : int | [$k__194[VV#193:=VV#F3][VV#203:=VV#233][lq_tmp_x_210:=VV#233][lq_tmp_x_206:=VV#F3][VV#236:=VV#F3][VV#F:=VV#F3]]}
  id 3 tag [2]
  // META constraint id 3 : tup0.hs:11:17-23


constraint:
  env [0; 1; 2; 3; 4; 5; 6; 7; 25; 11; 28]
  grd true
  lhs {VV#F4 : int | []}
  rhs {VV#F4 : int | [$k__197[VV#196:=VV#F4][VV#203:=VV#233][lq_tmp_x_210:=VV#233][lq_tmp_x_207:=VV#F4][VV#239:=VV#F4][VV#F:=VV#F4]]}
  id 4 tag [2]
  // META constraint id 4 : tup0.hs:11:17-23


constraint:
  env [0; 1; 2; 3; 4; 5; 6; 7; 25; 11; 30; 31]
  grd true
  lhs {VV#F5 : int | [(VV#F5 > lq_tmp_x_208)]}
  rhs {VV#F5 : int | [$k__201[VV#200:=VV#F5][lq_tmp_x_199:=lq_tmp_x_208][lq_tmp_x_209:=VV#F5][VV#243:=VV#F5][VV#F:=VV#F5]]}
  id 5 tag [2]
  // META constraint id 5 : tup0.hs:11:17-23


constraint:
  env [0; 1; 2; 34; 3; 4; 5; 6; 7; 39; 8; 40; 9]
  grd true
  lhs {VV#F6 : int | [$k__183[lq_tmp_x_185:=x_0][VV#182:=VV#F6][lq_tmp_x_172:=lq_anf__dL5][lq_tmp_x_173:=lq_anf__dL6][lq_tmp_x_168:=x_0][lq_tmp_x_181:=VV#F6][VV#256:=VV#F6][VV#F:=VV#F6]]}
  rhs {VV#F6 : int | [(VV#F6 > x_0)]}
  id 6 tag [1]
  // META constraint id 6 : tup0.hs:7:11-16


constraint:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 42]
  grd true
  lhs {VV#F7 : int | [(VV#F7 = lq_anf__dL6)]}
  rhs {VV#F7 : int | [$k__179[VV#178:=VV#F7][lq_tmp_x_172:=lq_anf__dL5][lq_tmp_x_181:=VV#F7][VV#259:=VV#F7][VV#F:=VV#F7]]}
  id 7 tag [1]
  // META constraint id 7 : tup0.hs:7:15


constraint:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 42]
  grd true
  lhs {VV#F8 : int | [(VV#F8 = lq_anf__dL6)]}
  rhs {VV#F8 : int | [$k__183[lq_tmp_x_185:=lq_anf__dL5][VV#182:=VV#F8][lq_tmp_x_172:=lq_anf__dL5][lq_tmp_x_181:=VV#F8][VV#259:=VV#F8][VV#F:=VV#F8]]}
  id 8 tag [1]
  // META constraint id 8 : tup0.hs:7:15


constraint:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 44]
  grd true
  lhs {VV#F9 : int | [(VV#F9 = lq_anf__dL5)]}
  rhs {VV#F9 : int | [$k__175[VV#174:=VV#F9][lq_tmp_x_177:=VV#F9][VV#262:=VV#F9][VV#F:=VV#F9]]}
  id 9 tag [1]
  // META constraint id 9 : tup0.hs:7:12




wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 11]
  reft {VV#203 : (Tuple  int  int) | [$k__204]}
  
  // META wf  : tup0.hs:11:12-15


wf:
  env [0; 1; 2; 50; 3; 4; 5; 6; 7; 11]
  reft {VV#193 : int | [$k__194]}
  
  // META wf  : tup0.hs:11:12-15


wf:
  env [0; 1; 2; 50; 3; 4; 5; 6; 7; 11]
  reft {VV#196 : int | [$k__197]}
  
  // META wf  : tup0.hs:11:12-15


wf:
  env [0; 1; 2; 3; 4; 5; 53; 6; 7; 11]
  reft {VV#200 : int | [$k__201]}
  
  // META wf  : tup0.hs:11:12-15


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10]
  reft {VV#182 : int | [$k__183]}
  
  // META wf  : tup0.hs:7:11-16


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9]
  reft {VV#178 : int | [$k__179]}
  
  // META wf  : tup0.hs:7:11-16


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9]
  reft {VV#174 : int | [$k__175]}
  
  // META wf  : tup0.hs:7:11-16







