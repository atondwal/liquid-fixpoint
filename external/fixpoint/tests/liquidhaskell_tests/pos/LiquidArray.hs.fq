qualif Fst(v : @(1), fix##126#Y : @(0)): (v = fst([fix##126#Y])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.spec" (line 29, column 8)
qualif Snd(v : @(1), fix##126#Y : @(0)): (v = snd([fix##126#Y])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.spec" (line 30, column 8)
qualif Auto(VV : int): (? papp1([r;
                                 VV])) // "LiquidArray.hs" (line 16, column 1)
qualif Auto(VV : int): (? papp1([r;
                                 VV])) // "LiquidArray.hs" (line 16, column 1)
qualif Auto(VV : a_aXj, fix##126#A0 : int): (? papp2([p;
                                                      VV;
                                                      fix##126#A0])) // "LiquidArray.hs" (line 16, column 1)
qualif Auto(vv : int, fix##126#A0 : int): (vv = fix##126#A0) // "LiquidArray.hs" (line 16, column 1)
qualif Auto(VV : a_aXj, fix##126#A0 : int): (? papp2([p;
                                                      VV;
                                                      fix##126#A0])) // "LiquidArray.hs" (line 16, column 1)
qualif Auto(vv : int, fix##126#A0 : int): (vv = fix##126#A0) // "LiquidArray.hs" (line 16, column 1)
qualif Auto(v : a_aXj, fix##126#P : (Pred  a_aXj  int), fix##126#A0 : int): (? papp2([fix##126#P;
                                                                                      v;
                                                                                      fix##126#A0])) // "LiquidArray.hs" (line 16, column 1)
qualif Auto(v : a_aXj, fix##126#P : (Pred  a_aXj  int), fix##126#A0 : int): (? papp2([fix##126#P;
                                                                                      v;
                                                                                      fix##126#A0])) // "LiquidArray.hs" (line 16, column 1)
qualif Auto(v : int): false // "LiquidArray.hs" (line 20, column 1)
qualif Auto(VV : int): (? papp1([r;
                                 VV])) // "LiquidArray.hs" (line 9, column 1)
qualif Auto(VV : a_aXr, fix##126#A0 : int): (? papp2([p;
                                                      VV;
                                                      fix##126#A0])) // "LiquidArray.hs" (line 9, column 1)
qualif Auto(vv : int, fix##126#A0 : int): (vv = fix##126#A0) // "LiquidArray.hs" (line 9, column 1)
qualif Auto(VV : int, fix##126#A0 : int): (VV != fix##126#A0) // "LiquidArray.hs" (line 9, column 1)
qualif Auto(VV : int): (? papp1([r;
                                 VV])) // "LiquidArray.hs" (line 9, column 1)
qualif Auto(VV : a_aXr, fix##126#A0 : int): (? papp2([p;
                                                      VV;
                                                      fix##126#A0])) // "LiquidArray.hs" (line 9, column 1)
qualif Auto(vv : int, fix##126#A0 : int): (vv = fix##126#A0) // "LiquidArray.hs" (line 9, column 1)
qualif Auto(VV : int): (? papp1([r;
                                 VV])) // "LiquidArray.hs" (line 9, column 1)
qualif Auto(VV : a_aXr, fix##126#A0 : int): (? papp2([p;
                                                      VV;
                                                      fix##126#A0])) // "LiquidArray.hs" (line 9, column 1)
qualif Auto(vv : int, fix##126#A0 : int): (vv = fix##126#A0) // "LiquidArray.hs" (line 9, column 1)
qualif Auto(v : a_aXr, fix##126#P : (Pred  a_aXr  int), fix##126#A0 : int): (? papp2([fix##126#P;
                                                                                      v;
                                                                                      fix##126#A0])) // "LiquidArray.hs" (line 9, column 1)
qualif Auto(v : a_aXr, fix##126#P : (Pred  a_aXr  int), fix##126#A0 : int): (? papp2([fix##126#P;
                                                                                      v;
                                                                                      fix##126#A0])) // "LiquidArray.hs" (line 9, column 1)
qualif Auto(v : a_aXr, fix##126#P : (Pred  a_aXr  int), fix##126#A0 : int): (? papp2([fix##126#P;
                                                                                      v;
                                                                                      fix##126#A0])) // "LiquidArray.hs" (line 9, column 1)
qualif IsEmp(v : GHC.Types.Bool, fix##126#Xs : [@(0)]): ((? Prop([v])) <=> (len([fix##126#Xs]) > 0)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 13, column 8)
qualif IsEmp(v : GHC.Types.Bool, fix##126#Xs : [@(0)]): ((? Prop([v])) <=> (len([fix##126#Xs]) = 0)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 14, column 8)
qualif ListZ(v : [@(0)]): (len([v]) = 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 16, column 8)
qualif ListZ(v : [@(0)]): (len([v]) >= 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 17, column 8)
qualif ListZ(v : [@(0)]): (len([v]) > 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 18, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) = len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 20, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) >= len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 21, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) > len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 22, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) <= len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 23, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) < len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 24, column 8)
qualif EqLen(v : int, fix##126#Xs : [@(0)]): (v = len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 26, column 8)
qualif LenEq(v : [@(0)], fix##126#X : int): (fix##126#X = len([v])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 27, column 8)
qualif LenDiff(v : [@(0)], fix##126#X : int): (len([v]) = (fix##126#X + 1)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 28, column 8)
qualif LenDiff(v : [@(0)], fix##126#X : int): (len([v]) = (fix##126#X - 1)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 29, column 8)
qualif LenAcc(v : int, fix##126#Xs : [@(0)], fix##126#N : int): (v = (len([fix##126#Xs]) + fix##126#N)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 30, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 3, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 4, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 5, column 8)
qualif Bot(v : bool): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 6, column 8)
qualif Bot(v : int): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 7, column 8)
qualif CmpZ(v : @(0)): (v < 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 9, column 8)
qualif CmpZ(v : @(0)): (v <= 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 10, column 8)
qualif CmpZ(v : @(0)): (v > 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 11, column 8)
qualif CmpZ(v : @(0)): (v >= 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 12, column 8)
qualif CmpZ(v : @(0)): (v = 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 13, column 8)
qualif CmpZ(v : @(0)): (v != 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 14, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v < fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 16, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v <= fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 17, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v > fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 18, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v >= fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 19, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v = fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 20, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v != fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 21, column 8)
qualif One(v : int): (v = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 28, column 8)
qualif True(v : bool): (? v) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 29, column 8)
qualif False(v : bool): (~ ((? v))) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 30, column 8)
qualif True1(v : GHC.Types.Bool): (? Prop([v])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 31, column 8)
qualif False1(v : GHC.Types.Bool): (~ ((? Prop([v])))) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 32, column 8)
qualif Papp(v : @(0), fix##126#P : (Pred  @(0))): (? papp1([fix##126#P;
                                                            v])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 35, column 8)
qualif Papp2(v : @(1), fix##126#X : @(0), fix##126#P : (Pred  @(1)  @(0))): (? papp2([fix##126#P;
                                                                                      v;
                                                                                      fix##126#X])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 38, column 8)
qualif Papp3(v : @(2), fix##126#X : @(0), fix##126#Y : @(1), fix##126#P : (Pred  @(2)  @(0)  @(1))): (? papp3([fix##126#P;
                                                                                                               v;
                                                                                                               fix##126#X;
                                                                                                               fix##126#Y])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 41, column 8)

qualif Fst(v : @(1), fix##126#Y : @(0)): (v = fst([fix##126#Y])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.spec" (line 29, column 8)
qualif Snd(v : @(1), fix##126#Y : @(0)): (v = snd([fix##126#Y])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.spec" (line 30, column 8)
qualif Auto(VV : int): (? papp1([r;
                                 VV])) // "LiquidArray.hs" (line 16, column 1)
qualif Auto(VV : int): (? papp1([r;
                                 VV])) // "LiquidArray.hs" (line 16, column 1)
qualif Auto(VV : a_aXj, fix##126#A0 : int): (? papp2([p;
                                                      VV;
                                                      fix##126#A0])) // "LiquidArray.hs" (line 16, column 1)
qualif Auto(vv : int, fix##126#A0 : int): (vv = fix##126#A0) // "LiquidArray.hs" (line 16, column 1)
qualif Auto(VV : a_aXj, fix##126#A0 : int): (? papp2([p;
                                                      VV;
                                                      fix##126#A0])) // "LiquidArray.hs" (line 16, column 1)
qualif Auto(vv : int, fix##126#A0 : int): (vv = fix##126#A0) // "LiquidArray.hs" (line 16, column 1)
qualif Auto(v : a_aXj, fix##126#P : (Pred  a_aXj  int), fix##126#A0 : int): (? papp2([fix##126#P;
                                                                                      v;
                                                                                      fix##126#A0])) // "LiquidArray.hs" (line 16, column 1)
qualif Auto(v : a_aXj, fix##126#P : (Pred  a_aXj  int), fix##126#A0 : int): (? papp2([fix##126#P;
                                                                                      v;
                                                                                      fix##126#A0])) // "LiquidArray.hs" (line 16, column 1)
qualif Auto(v : int): false // "LiquidArray.hs" (line 20, column 1)
qualif Auto(VV : int): (? papp1([r;
                                 VV])) // "LiquidArray.hs" (line 9, column 1)
qualif Auto(VV : a_aXr, fix##126#A0 : int): (? papp2([p;
                                                      VV;
                                                      fix##126#A0])) // "LiquidArray.hs" (line 9, column 1)
qualif Auto(vv : int, fix##126#A0 : int): (vv = fix##126#A0) // "LiquidArray.hs" (line 9, column 1)
qualif Auto(VV : int, fix##126#A0 : int): (VV != fix##126#A0) // "LiquidArray.hs" (line 9, column 1)
qualif Auto(VV : int): (? papp1([r;
                                 VV])) // "LiquidArray.hs" (line 9, column 1)
qualif Auto(VV : a_aXr, fix##126#A0 : int): (? papp2([p;
                                                      VV;
                                                      fix##126#A0])) // "LiquidArray.hs" (line 9, column 1)
qualif Auto(vv : int, fix##126#A0 : int): (vv = fix##126#A0) // "LiquidArray.hs" (line 9, column 1)
qualif Auto(VV : int): (? papp1([r;
                                 VV])) // "LiquidArray.hs" (line 9, column 1)
qualif Auto(VV : a_aXr, fix##126#A0 : int): (? papp2([p;
                                                      VV;
                                                      fix##126#A0])) // "LiquidArray.hs" (line 9, column 1)
qualif Auto(vv : int, fix##126#A0 : int): (vv = fix##126#A0) // "LiquidArray.hs" (line 9, column 1)
qualif Auto(v : a_aXr, fix##126#P : (Pred  a_aXr  int), fix##126#A0 : int): (? papp2([fix##126#P;
                                                                                      v;
                                                                                      fix##126#A0])) // "LiquidArray.hs" (line 9, column 1)
qualif Auto(v : a_aXr, fix##126#P : (Pred  a_aXr  int), fix##126#A0 : int): (? papp2([fix##126#P;
                                                                                      v;
                                                                                      fix##126#A0])) // "LiquidArray.hs" (line 9, column 1)
qualif Auto(v : a_aXr, fix##126#P : (Pred  a_aXr  int), fix##126#A0 : int): (? papp2([fix##126#P;
                                                                                      v;
                                                                                      fix##126#A0])) // "LiquidArray.hs" (line 9, column 1)
qualif IsEmp(v : GHC.Types.Bool, fix##126#Xs : [@(0)]): ((? Prop([v])) <=> (len([fix##126#Xs]) > 0)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 13, column 8)
qualif IsEmp(v : GHC.Types.Bool, fix##126#Xs : [@(0)]): ((? Prop([v])) <=> (len([fix##126#Xs]) = 0)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 14, column 8)
qualif ListZ(v : [@(0)]): (len([v]) = 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 16, column 8)
qualif ListZ(v : [@(0)]): (len([v]) >= 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 17, column 8)
qualif ListZ(v : [@(0)]): (len([v]) > 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 18, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) = len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 20, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) >= len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 21, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) > len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 22, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) <= len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 23, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) < len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 24, column 8)
qualif EqLen(v : int, fix##126#Xs : [@(0)]): (v = len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 26, column 8)
qualif LenEq(v : [@(0)], fix##126#X : int): (fix##126#X = len([v])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 27, column 8)
qualif LenDiff(v : [@(0)], fix##126#X : int): (len([v]) = (fix##126#X + 1)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 28, column 8)
qualif LenDiff(v : [@(0)], fix##126#X : int): (len([v]) = (fix##126#X - 1)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 29, column 8)
qualif LenAcc(v : int, fix##126#Xs : [@(0)], fix##126#N : int): (v = (len([fix##126#Xs]) + fix##126#N)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 30, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 3, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 4, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 5, column 8)
qualif Bot(v : bool): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 6, column 8)
qualif Bot(v : int): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 7, column 8)
qualif CmpZ(v : @(0)): (v < 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 9, column 8)
qualif CmpZ(v : @(0)): (v <= 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 10, column 8)
qualif CmpZ(v : @(0)): (v > 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 11, column 8)
qualif CmpZ(v : @(0)): (v >= 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 12, column 8)
qualif CmpZ(v : @(0)): (v = 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 13, column 8)
qualif CmpZ(v : @(0)): (v != 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 14, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v < fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 16, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v <= fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 17, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v > fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 18, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v >= fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 19, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v = fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 20, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v != fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 21, column 8)
qualif One(v : int): (v = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 28, column 8)
qualif True(v : bool): (? v) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 29, column 8)
qualif False(v : bool): (~ ((? v))) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 30, column 8)
qualif True1(v : GHC.Types.Bool): (? Prop([v])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 31, column 8)
qualif False1(v : GHC.Types.Bool): (~ ((? Prop([v])))) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 32, column 8)
qualif Papp(v : @(0), fix##126#P : (Pred  @(0))): (? papp1([fix##126#P;
                                                            v])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 35, column 8)
qualif Papp2(v : @(1), fix##126#X : @(0), fix##126#P : (Pred  @(1)  @(0))): (? papp2([fix##126#P;
                                                                                      v;
                                                                                      fix##126#X])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 38, column 8)
qualif Papp3(v : @(2), fix##126#X : @(0), fix##126#Y : @(1), fix##126#P : (Pred  @(2)  @(0)  @(1))): (? papp3([fix##126#P;
                                                                                                               v;
                                                                                                               fix##126#X;
                                                                                                               fix##126#Y])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 41, column 8)




constant Prop : (func(0, [GHC.Types.Bool; bool]))
constant x_Tuple64 : (func(6, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5));
                               @(3)]))
constant x_Tuple54 : (func(5, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4));
                               @(3)]))
constant x_Tuple44 : (func(4, [(Tuple  @(0)  @(1)  @(2)  @(3));
                               @(3)]))
constant xListSelector : (func(1, [[@(0)]; @(0)]))
constant x_Tuple76 : (func(7, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5)  @(6));
                               @(5)]))
constant autolen : (func(1, [@(0); int]))
constant addrLen : (func(0, [int; int]))
constant strLen : (func(0, [int; int]))
constant x_Tuple52 : (func(5, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4));
                               @(1)]))
constant GHC.Types.False#68 : (GHC.Types.Bool)
constant x_Tuple75 : (func(7, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5)  @(6));
                               @(4)]))
constant x_Tuple33 : (func(3, [(Tuple  @(0)  @(1)  @(2)); @(2)]))
constant x_Tuple41 : (func(4, [(Tuple  @(0)  @(1)  @(2)  @(3));
                               @(0)]))
constant fst : (func(2, [(Tuple  @(0)  @(1)); @(0)]))
constant x_Tuple73 : (func(7, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5)  @(6));
                               @(2)]))
constant x_Tuple31 : (func(3, [(Tuple  @(0)  @(1)  @(2)); @(0)]))
constant papp4 : (func(8, [(Pred  @(0)  @(1)  @(2)  @(6));
                           @(3);
                           @(4);
                           @(5);
                           @(7);
                           bool]))
constant x_Tuple71 : (func(7, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5)  @(6));
                               @(0)]))
constant x_Tuple65 : (func(6, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5));
                               @(4)]))
constant papp2 : (func(4, [(Pred  @(0)  @(1)); @(2); @(3); bool]))
constant x_Tuple32 : (func(3, [(Tuple  @(0)  @(1)  @(2)); @(1)]))
constant x_Tuple72 : (func(7, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5)  @(6));
                               @(1)]))
constant x_Tuple63 : (func(6, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5));
                               @(2)]))
constant x_Tuple51 : (func(5, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4));
                               @(0)]))
constant len : (func(2, [(@(0)  @(1)); int]))
constant xsListSelector : (func(1, [[@(0)]; [@(0)]]))
constant null : (func(1, [[@(0)]; bool]))
constant x_Tuple53 : (func(5, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4));
                               @(2)]))
constant x_Tuple22 : (func(2, [(Tuple  @(0)  @(1)); @(1)]))
constant fromJust : (func(1, [(Data.Maybe.Maybe  @(0)); @(0)]))
constant snd : (func(2, [(Tuple  @(0)  @(1)); @(1)]))
constant x_Tuple62 : (func(6, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5));
                               @(1)]))
constant x_Tuple55 : (func(5, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4));
                               @(4)]))
constant papp3 : (func(6, [(Pred  @(0)  @(1)  @(2));
                           @(3);
                           @(4);
                           @(5);
                           bool]))
constant x_Tuple43 : (func(4, [(Tuple  @(0)  @(1)  @(2)  @(3));
                               @(2)]))
constant x_Tuple74 : (func(7, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5)  @(6));
                               @(3)]))
constant cmp : (func(0, [GHC.Types.Ordering; GHC.Types.Ordering]))
constant isJust : (func(1, [(Data.Maybe.Maybe  @(0)); bool]))
constant x_Tuple21 : (func(2, [(Tuple  @(0)  @(1)); @(0)]))
constant x_Tuple61 : (func(6, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5));
                               @(0)]))
constant papp1 : (func(1, [(Pred  @(0)); @(0); bool]))
constant x_Tuple66 : (func(6, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5));
                               @(5)]))
constant x_Tuple42 : (func(4, [(Tuple  @(0)  @(1)  @(2)  @(3));
                               @(1)]))
constant x_Tuple77 : (func(7, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5)  @(6));
                               @(6)]))
constant GHC.Types.True#6u : (GHC.Types.Bool)


constant fix#lit#35#Empty#32#array#33# : (Str)


bind 0 GHC.Err.error#05 : {VV : func(1, [[GHC.Types.Char];
                                         @(0)]) | []}
bind 1 GHC.CString.unpackCString##0k : {VV : func(0, [int;
                                                      [GHC.Types.Char]]) | []}
bind 2 fix#GHC.Classes.#61##61##35#02H : {VV : func(1, [@(0);
                                                        @(0);
                                                        GHC.Types.Bool]) | []}
bind 3 GHC.Types.False#68 : {VV#129 : GHC.Types.Bool | []}
bind 4 GHC.Types.True#6u : {VV#130 : GHC.Types.Bool | []}
bind 5 GHC.Base.const#r2o : {VV : func(2, [@(0); @(1); @(0)]) | []}
bind 6 fix#GHC.Classes.#36#fEqInt#35#rqT : {VV#132 : (GHC.Classes.Eq  int) | []}
bind 7 GHC.Types.EQ#6U : {VV#133 : GHC.Types.Ordering | [(VV#133 = GHC.Types.EQ#6U)]}
bind 8 GHC.Types.LT#6S : {VV#134 : GHC.Types.Ordering | [(VV#134 = GHC.Types.LT#6S)]}
bind 9 GHC.Types.GT#6W : {VV#135 : GHC.Types.Ordering | [(VV#135 = GHC.Types.GT#6W)]}
bind 10 GHC.Types.True#6u : {v : GHC.Types.Bool | [(? Prop([v]))]}
bind 11 GHC.Types.False#68 : {v : GHC.Types.Bool | [(~ ((? Prop([v]))))]}
bind 12 GHC.CString.unpackCString##0k : {VV : func(0, [int;
                                                       [GHC.Types.Char]]) | []}
bind 13 fix#GHC.Classes.#61##61##35#02H : {VV : func(1, [@(0);
                                                         @(0);
                                                         GHC.Types.Bool]) | []}
bind 14 fix#GHC.Num.#42##35#ru : {VV : func(1, [@(0);
                                                @(0);
                                                @(0)]) | []}
bind 15 GHC.Base..#r2q : {VV : func(3, [func(0, [@(0); @(1)]);
                                        func(0, [@(2); @(0)]);
                                        @(2);
                                        @(1)]) | []}
bind 16 GHC.Integer.Type.smallInteger#0Z : {VV : func(0, [int;
                                                          int]) | []}
bind 17 fix#GHC.Num.#43##35#rt : {VV : func(1, [@(0);
                                                @(0);
                                                @(0)]) | []}
bind 18 fix#GHC.Num.#45##35#02B : {VV : func(1, [@(0);
                                                 @(0);
                                                 @(0)]) | []}
bind 19 GHC.Types.I##6c : {VV : func(0, [int; int]) | []}
bind 20 fix#GHC.Prim.#43##35##35#98 : {VV : func(0, [int;
                                                     int;
                                                     int]) | []}
bind 21 fix#GHC.Prim.#45##35##35#99 : {VV : func(0, [int;
                                                     int;
                                                     int]) | []}
bind 22 fix#GHC.Prim.#61##61##35##35#9o : {VV : func(0, [int;
                                                         int;
                                                         int]) | []}
bind 23 fix#GHC.Prim.#62##61##35##35#9n : {VV : func(0, [int;
                                                         int;
                                                         int]) | []}
bind 24 fix#GHC.Prim.#60##61##35##35#9r : {VV : func(0, [int;
                                                         int;
                                                         int]) | []}
bind 25 fix#GHC.Prim.#60##35##35#9q : {VV : func(0, [int;
                                                     int;
                                                     int]) | []}
bind 26 fix#GHC.Prim.#62##35##35#9m : {VV : func(0, [int;
                                                     int;
                                                     int]) | []}
bind 27 fix#GHC.Types.#58##35#64 : {VV : func(1, [@(0);
                                                  [@(0)];
                                                  [@(0)]]) | []}
bind 28 fix#GHC.Types.#91##93##35#6m : {VV : func(1, [[@(0)]]) | []}
bind 29 fix#GHC.Tuple.#40##44##41##35#74 : {VV : func(2, [@(0);
                                                          @(1);
                                                          (Tuple  @(0)  @(1))]) | []}
bind 30 fix#GHC.Tuple.#40##44##44##41##35#76 : {VV : func(3, [@(0);
                                                              @(1);
                                                              @(2);
                                                              (Tuple  @(0)  @(1)  @(2))]) | []}
bind 31 fix#GHC.Tuple.#40##44##44##44##41##35#78 : {VV : func(4, [@(0);
                                                                  @(1);
                                                                  @(2);
                                                                  @(3);
                                                                  (Tuple  @(0)  @(1)  @(2)  @(3))]) | []}
bind 32 fix#GHC.Tuple.#40##44##44##44##44##41##35#7a : {VV : func(5, [@(0);
                                                                      @(1);
                                                                      @(2);
                                                                      @(3);
                                                                      @(4);
                                                                      (Tuple  @(0)  @(1)  @(2)  @(3)  @(4))]) | []}
bind 33 fix#GHC.Tuple.#40##44##44##44##44##44##41##35#7c : {VV : func(6, [@(0);
                                                                          @(1);
                                                                          @(2);
                                                                          @(3);
                                                                          @(4);
                                                                          @(5);
                                                                          (Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5))]) | []}
bind 34 fix#GHC.Tuple.#40##44##44##44##44##44##44##41##35#7e : {VV : func(7, [@(0);
                                                                              @(1);
                                                                              @(2);
                                                                              @(3);
                                                                              @(4);
                                                                              @(5);
                                                                              @(6);
                                                                              (Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5)  @(6))]) | []}
bind 35 Data.Maybe.Nothing#r19 : {VV : func(1, [(Data.Maybe.Maybe  @(0))]) | []}
bind 36 GHC.Types.EQ#6U : {VV#162 : GHC.Types.Ordering | [(cmp([VV#162]) = GHC.Types.EQ#6U)]}
bind 37 GHC.Types.LT#6S : {VV#163 : GHC.Types.Ordering | [(cmp([VV#163]) = GHC.Types.LT#6S)]}
bind 38 GHC.Types.GT#6W : {VV#164 : GHC.Types.Ordering | [(cmp([VV#164]) = GHC.Types.GT#6W)]}
bind 39 fix#GHC.Real.D#58#Fractional#35#rkT : {VV : func(1, [func(0, [@(0);
                                                                      @(0);
                                                                      @(0)]);
                                                             func(0, [@(0); @(0)]);
                                                             func(0, [(GHC.Real.Ratio  int); @(0)]);
                                                             (GHC.Real.Fractional  @(0))]) | []}
bind 40 fix#GHC.Real.D#58#Integral#35#r6o : {VV : func(1, [func(0, [@(0);
                                                                    @(0);
                                                                    @(0)]);
                                                           func(0, [@(0); @(0); @(0)]);
                                                           func(0, [@(0); @(0); @(0)]);
                                                           func(0, [@(0); @(0); @(0)]);
                                                           func(0, [@(0);
                                                                    @(0);
                                                                    (Tuple  @(0)  @(0))]);
                                                           func(0, [@(0);
                                                                    @(0);
                                                                    (Tuple  @(0)  @(0))]);
                                                           func(0, [@(0); int]);
                                                           (GHC.Real.Integral  @(0))]) | []}
bind 41 Data.Maybe.Just#r1a : {VV : func(1, [@(0);
                                             (Data.Maybe.Maybe  @(0))]) | []}
bind 42 lq_anf__dXD : {lq_tmp_x_169 : int | [(lq_tmp_x_169 ~~ fix#lit#35#Empty#32#array#33#);
                                             (strLen([lq_tmp_x_169]) = 12)]}
bind 43 lq_anf__dXE : {lq_tmp_x_175 : [GHC.Types.Char] | [(lq_tmp_x_175 ~~ lq_anf__dXD);
                                                          (len([lq_tmp_x_175]) = strLen([lq_anf__dXD]));
                                                          (len([lq_tmp_x_175]) >= 0)]}
bind 44 lq_anf__dXF : {VV#186 : a_aXb | [$k__187[lq_tmp_x_185:=lq_anf__dXE]]}
bind 45 LiquidArray.empty#rpw : {VV : func(1, [int; @(0)]) | []}
bind 46 p : {VV#209 : (Pred  a_aXj  int) | []}
bind 47 x0 : {VV#210 : int | []}
bind 48 r : {VV#211 : (Pred  int) | []}
bind 49 i#aX2 : {VV#212 : int | [(? papp1([r; VV#212]))]}
bind 50 a#aX3 : {VV : func(0, [int; a_aXj]) | []}
bind 51 LiquidArray.get#rpv : {VV : func(1, [int;
                                             func(0, [int; @(0)]);
                                             @(0)]) | []}
bind 52 p : {VV#224 : (Pred  a_aXr  int) | []}
bind 53 x0 : {VV#225 : int | []}
bind 54 r : {VV#226 : (Pred  int) | []}
bind 55 i#aWY : {VV#227 : int | [(? papp1([r; VV#227]))]}
bind 56 x#aWZ : {VV : a_aXr | [(? papp2([p; VV; i#aWY]))]}
bind 57 a#aX0 : {VV : func(0, [int; a_aXr]) | []}
bind 58 k#aX1 : {VV#230 : int | [(? papp1([r; VV#230]))]}
bind 59 lq_anf__dXG : {lq_tmp_x_232 : GHC.Types.Bool | [((? Prop([lq_tmp_x_232])) <=> (k#aX1 = i#aWY))]}
bind 60 lq_anf__dXH : {lq_tmp_x_248 : GHC.Types.Bool | [(lq_tmp_x_248 = lq_anf__dXG)]}
bind 61 lq_anf__dXH : {lq_tmp_x_250 : GHC.Types.Bool | [(lq_tmp_x_250 = lq_anf__dXG)]}
bind 62 lq_anf__dXH : {lq_tmp_x_250 : GHC.Types.Bool | [(lq_tmp_x_250 = lq_anf__dXG);
                                                        (~ ((? Prop([lq_tmp_x_250]))));
                                                        (~ ((? Prop([lq_tmp_x_250]))));
                                                        (~ ((? Prop([lq_tmp_x_250]))))]}
bind 63 lq_anf__dXH : {lq_tmp_x_259 : GHC.Types.Bool | [(lq_tmp_x_259 = lq_anf__dXG)]}
bind 64 lq_anf__dXH : {lq_tmp_x_259 : GHC.Types.Bool | [(lq_tmp_x_259 = lq_anf__dXG);
                                                        (? Prop([lq_tmp_x_259]));
                                                        (? Prop([lq_tmp_x_259]));
                                                        (? Prop([lq_tmp_x_259]))]}
bind 65 LiquidArray.set#rou : {VV : func(1, [int;
                                             @(0);
                                             func(0, [int; @(0)]);
                                             int;
                                             @(0)]) | []}
bind 66 VV : {VV : a_aXr | [(VV = x#aWZ)]}
bind 67 VV : {VV : a_aXr | [(? papp2([p; VV; k#aX1]))]}
bind 68 VV#267 : {VV#267 : int | [(VV#267 = k#aX1)]}
bind 69 VV#267 : {VV#267 : int | [(VV#267 = k#aX1)]}
bind 70 VV#270 : {VV#270 : int | [(VV#270 = i#aWY)]}
bind 71 VV#270 : {VV#270 : int | [(VV#270 = i#aWY)]}
bind 72 VV#273 : {VV#273 : int | [(VV#273 = k#aX1)]}
bind 73 VV#273 : {VV#273 : int | [(VV#273 = k#aX1)]}
bind 74 VV : {VV : a_aXj | [(? papp2([p; VV; i#aX2]))]}
bind 75 VV#277 : {VV#277 : int | [(VV#277 = i#aX2)]}
bind 76 VV#277 : {VV#277 : int | [(VV#277 = i#aX2)]}
bind 77 lq_tmp_x_194 : {lq_tmp_x_194 : func(0, [int; a_aXb]) | []}
bind 78 VV#281 : {VV#281 : int | [false]}
bind 79 VV#281 : {VV#281 : int | [false]}
bind 80 lq_tmp_x_168 : {v : int | [false]}
bind 81 VV#198 : {VV#198 : a_aXb | [$k__199[lq_tmp_x_196:=lq_anf__dXF][lq_tmp_x_197:=lq_tmp_x_168]]}
bind 82 VV#186 : {VV#186 : a_aXb | [(VV#186 = lq_anf__dXF)]}
bind 83 VV#287 : {VV#287 : [GHC.Types.Char] | [(VV#287 = lq_anf__dXE);
                                               (len([VV#287]) >= 0)]}
bind 84 VV#287 : {VV#287 : [GHC.Types.Char] | [(VV#287 = lq_anf__dXE);
                                               (len([VV#287]) >= 0)]}
bind 85 VV#290 : {VV#290 : GHC.Types.Char | []}
bind 86 VV#290 : {VV#290 : GHC.Types.Char | []}
bind 87 lq_tmp_x_181 : {VV#293 : GHC.Types.Char | []}
bind 88 VV#294 : {VV#294 : GHC.Types.Char | []}
bind 89 VV#294 : {VV#294 : GHC.Types.Char | []}
bind 90 VV#297 : {VV#297 : int | [(VV#297 = lq_anf__dXD)]}
bind 91 VV#297 : {VV#297 : int | [(VV#297 = lq_anf__dXD)]}
bind 92 VV#239 : {VV#239 : int | [$k__240]}
bind 93 VV#201 : {VV#201 : int | [$k__202]}




constraint:
  env [0;
       16;
       32;
       64;
       1;
       17;
       33;
       2;
       18;
       34;
       66;
       3;
       19;
       35;
       51;
       4;
       20;
       36;
       52;
       5;
       21;
       37;
       53;
       6;
       22;
       38;
       54;
       7;
       23;
       39;
       55;
       8;
       24;
       40;
       56;
       9;
       25;
       41;
       57;
       10;
       26;
       58;
       11;
       27;
       59;
       12;
       28;
       60;
       13;
       29;
       45;
       14;
       30;
       15;
       31;
       63]
  grd true
  lhs {VV#F1 : a_aXr | [(VV#F1 = x#aWZ)]}
  rhs {VV#F1 : a_aXr | [(? papp2([p; VV#F1; k#aX1]))]}
  id 1 tag [3]
  // META constraint id 1 : LiquidArray.hs:9:34


constraint:
  env [0;
       16;
       32;
       1;
       17;
       33;
       2;
       18;
       34;
       3;
       19;
       35;
       51;
       67;
       4;
       20;
       36;
       52;
       5;
       21;
       37;
       53;
       6;
       22;
       38;
       54;
       7;
       23;
       39;
       55;
       8;
       24;
       40;
       56;
       9;
       25;
       41;
       57;
       10;
       26;
       58;
       11;
       27;
       59;
       12;
       28;
       60;
       13;
       29;
       45;
       61;
       14;
       30;
       62;
       15;
       31]
  grd true
  lhs {VV#F2 : a_aXr | [(? papp2([p; VV#F2; k#aX1]))]}
  rhs {VV#F2 : a_aXr | [(? papp2([p; VV#F2; k#aX1]))]}
  id 2 tag [3]
  // META constraint id 2 : LiquidArray.hs:9:41-43


constraint:
  env [0;
       16;
       32;
       1;
       17;
       33;
       2;
       18;
       34;
       3;
       19;
       35;
       51;
       4;
       20;
       36;
       52;
       68;
       5;
       21;
       37;
       53;
       6;
       22;
       38;
       54;
       7;
       23;
       39;
       55;
       8;
       24;
       40;
       56;
       9;
       25;
       41;
       57;
       10;
       26;
       58;
       11;
       27;
       59;
       12;
       28;
       60;
       13;
       29;
       45;
       61;
       14;
       30;
       62;
       15;
       31]
  grd true
  lhs {VV#F3 : int | [(VV#F3 = k#aX1)]}
  rhs {VV#F3 : int | [(VV#F3 != i#aWY)]}
  id 3 tag [3]
  // META constraint id 3 : LiquidArray.hs:9:43


constraint:
  env [0;
       16;
       32;
       1;
       17;
       33;
       2;
       18;
       34;
       3;
       19;
       35;
       51;
       4;
       20;
       36;
       52;
       68;
       5;
       21;
       37;
       53;
       6;
       22;
       38;
       54;
       7;
       23;
       39;
       55;
       8;
       24;
       40;
       56;
       9;
       25;
       41;
       57;
       10;
       26;
       58;
       11;
       27;
       59;
       12;
       28;
       60;
       13;
       29;
       45;
       61;
       14;
       30;
       62;
       15;
       31]
  grd true
  lhs {VV#F4 : int | [(VV#F4 = k#aX1)]}
  rhs {VV#F4 : int | [(? papp1([r; VV#F4]))]}
  id 4 tag [3]
  // META constraint id 4 : LiquidArray.hs:9:43


constraint:
  env [0;
       16;
       32;
       1;
       17;
       33;
       2;
       18;
       34;
       3;
       19;
       35;
       51;
       4;
       20;
       36;
       52;
       5;
       21;
       37;
       53;
       6;
       22;
       38;
       54;
       70;
       7;
       23;
       39;
       55;
       8;
       24;
       40;
       56;
       9;
       25;
       41;
       57;
       10;
       26;
       58;
       11;
       27;
       12;
       28;
       13;
       29;
       45;
       14;
       30;
       15;
       31]
  grd true
  lhs {VV#F5 : int | [(VV#F5 = i#aWY)]}
  rhs {VV#F5 : int | [$k__240[VV#239:=VV#F5][lq_tmp_x_236:=fix#GHC.Classes.#36#fEqInt#35#rqT][lq_tmp_x_237:=k#aX1][lq_tmp_x_242:=VV#F5][VV#270:=VV#F5][VV#F:=VV#F5]]}
  id 5 tag [3]
  // META constraint id 5 : LiquidArray.hs:9:27


constraint:
  env [0;
       16;
       32;
       1;
       17;
       33;
       2;
       18;
       34;
       3;
       19;
       35;
       51;
       4;
       20;
       36;
       52;
       5;
       21;
       37;
       53;
       6;
       22;
       38;
       54;
       7;
       23;
       39;
       55;
       8;
       24;
       40;
       56;
       72;
       9;
       25;
       41;
       57;
       10;
       26;
       58;
       11;
       27;
       12;
       28;
       13;
       29;
       45;
       14;
       30;
       15;
       31]
  grd true
  lhs {VV#F6 : int | [(VV#F6 = k#aX1)]}
  rhs {VV#F6 : int | [$k__240[VV#239:=VV#F6][lq_tmp_x_236:=fix#GHC.Classes.#36#fEqInt#35#rqT][lq_tmp_x_242:=VV#F6][VV#273:=VV#F6][VV#F:=VV#F6]]}
  id 6 tag [3]
  // META constraint id 6 : LiquidArray.hs:9:22


constraint:
  env [0;
       16;
       32;
       48;
       1;
       17;
       33;
       49;
       2;
       18;
       34;
       50;
       3;
       19;
       35;
       4;
       20;
       36;
       5;
       21;
       37;
       6;
       22;
       38;
       7;
       23;
       39;
       8;
       24;
       40;
       9;
       25;
       41;
       10;
       26;
       74;
       11;
       27;
       12;
       28;
       13;
       29;
       45;
       14;
       30;
       46;
       15;
       31;
       47]
  grd true
  lhs {VV#F7 : a_aXj | [(? papp2([p; VV#F7; i#aX2]))]}
  rhs {VV#F7 : a_aXj | [(? papp2([p; VV#F7; i#aX2]))]}
  id 7 tag [2]
  // META constraint id 7 : LiquidArray.hs:16:11-13


constraint:
  env [0;
       16;
       32;
       48;
       1;
       17;
       33;
       49;
       2;
       18;
       34;
       50;
       3;
       19;
       35;
       4;
       20;
       36;
       5;
       21;
       37;
       6;
       22;
       38;
       7;
       23;
       39;
       8;
       24;
       40;
       9;
       25;
       41;
       10;
       26;
       11;
       27;
       75;
       12;
       28;
       13;
       29;
       45;
       14;
       30;
       46;
       15;
       31;
       47]
  grd true
  lhs {VV#F8 : int | [(VV#F8 = i#aX2)]}
  rhs {VV#F8 : int | [(? papp1([r; VV#F8]))]}
  id 8 tag [2]
  // META constraint id 8 : LiquidArray.hs:16:13


constraint:
  env [0;
       16;
       32;
       1;
       17;
       33;
       2;
       18;
       34;
       3;
       19;
       35;
       4;
       20;
       36;
       5;
       21;
       37;
       6;
       22;
       38;
       7;
       23;
       39;
       8;
       24;
       40;
       9;
       25;
       41;
       10;
       26;
       42;
       11;
       27;
       43;
       12;
       28;
       44;
       13;
       29;
       14;
       30;
       78;
       15;
       31]
  grd true
  lhs {VV#F9 : int | [false]}
  rhs {VV#F9 : int | [$k__202[VV#201:=VV#F9][lq_tmp_x_196:=lq_anf__dXF][lq_tmp_x_204:=VV#F9][VV#281:=VV#F9][VV#F:=VV#F9]]}
  id 9 tag [1]
  // META constraint id 9 : LiquidArray.hs:20:9-36


constraint:
  env [0;
       16;
       32;
       1;
       17;
       33;
       2;
       18;
       34;
       82;
       3;
       19;
       35;
       4;
       20;
       36;
       5;
       21;
       37;
       6;
       22;
       38;
       7;
       23;
       39;
       8;
       24;
       40;
       9;
       25;
       41;
       10;
       26;
       42;
       11;
       27;
       43;
       12;
       28;
       44;
       13;
       29;
       14;
       30;
       15;
       31]
  grd true
  lhs {VV#F10 : a_aXb | [(VV#F10 = lq_anf__dXF)]}
  rhs {VV#F10 : a_aXb | [$k__199[VV#198:=VV#F10][VV#F:=VV#F10]]}
  id 10 tag [1]
  // META constraint id 10 : LiquidArray.hs:20:16-35




wf:
  env [0;
       16;
       32;
       1;
       17;
       33;
       2;
       18;
       34;
       3;
       19;
       35;
       51;
       4;
       20;
       36;
       52;
       5;
       21;
       37;
       53;
       6;
       22;
       38;
       54;
       7;
       23;
       39;
       55;
       8;
       24;
       40;
       56;
       9;
       25;
       41;
       57;
       10;
       26;
       58;
       11;
       27;
       12;
       28;
       13;
       29;
       45;
       14;
       30;
       15;
       31]
  reft {VV#239 : int | [$k__240]}
  
  // META wf  : LiquidArray.hs:9:24-25


wf:
  env [0;
       16;
       32;
       1;
       17;
       33;
       2;
       18;
       34;
       3;
       19;
       35;
       4;
       20;
       36;
       5;
       21;
       37;
       6;
       22;
       38;
       7;
       23;
       39;
       8;
       24;
       40;
       9;
       25;
       41;
       10;
       26;
       42;
       11;
       27;
       43;
       12;
       28;
       44;
       13;
       29;
       14;
       30;
       15;
       31]
  reft {VV#201 : int | [$k__202]}
  
  // META wf  : LiquidArray.hs:20:9-13


wf:
  env [0;
       16;
       32;
       1;
       17;
       33;
       2;
       18;
       34;
       3;
       19;
       35;
       4;
       20;
       36;
       5;
       21;
       37;
       6;
       22;
       38;
       7;
       23;
       39;
       8;
       24;
       40;
       9;
       25;
       41;
       10;
       26;
       42;
       11;
       27;
       43;
       12;
       28;
       44;
       13;
       29;
       14;
       30;
       15;
       31]
  reft {VV#198 : a_aXb | [$k__199]}
  
  // META wf  : LiquidArray.hs:20:9-13


wf:
  env [0;
       16;
       32;
       1;
       17;
       33;
       2;
       18;
       34;
       3;
       19;
       35;
       4;
       20;
       36;
       5;
       21;
       37;
       6;
       22;
       38;
       7;
       23;
       39;
       8;
       24;
       40;
       9;
       25;
       41;
       10;
       26;
       42;
       11;
       27;
       43;
       12;
       28;
       13;
       29;
       14;
       30;
       15;
       31]
  reft {VV#186 : a_aXb | [$k__187]}
  
  // META wf  : LiquidArray.hs:20:16-20







