qualif Fst(v : @(1), fix##126#Y : @(0)): (v = fst([fix##126#Y])) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.spec" (line 27, column 8)
qualif Snd(v : @(1), fix##126#Y : @(0)): (v = snd([fix##126#Y])) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.spec" (line 28, column 8)
qualif Auto(VV : int): (? papp1([r;
                                 VV])) // "LiquidArray.hs" (line 16, column 1)
qualif Auto(VV : int): (? papp1([r;
                                 VV])) // "LiquidArray.hs" (line 16, column 1)
qualif Auto(VV : a_aXj, fix##126#A0 : int): (? papp2([p;
                                                      VV;
                                                      fix##126#A0])) // "LiquidArray.hs" (line 16, column 1)
qualif Auto(vv : int, fix##126#A0 : int): (vv = fix##126#A0) // "LiquidArray.hs" (line 16, column 1)
qualif Auto(VV : a_aXj, fix##126#A0 : int): (? papp2([p;
                                                      VV;
                                                      fix##126#A0])) // "LiquidArray.hs" (line 16, column 1)
qualif Auto(vv : int, fix##126#A0 : int): (vv = fix##126#A0) // "LiquidArray.hs" (line 16, column 1)
qualif Auto(v : a_aXj, fix##126#P : FAppTy (FAppTy Pred  a_aXj)  int, fix##126#A0 : int): (? papp2([fix##126#P;
                                                                                                    v;
                                                                                                    fix##126#A0])) // "LiquidArray.hs" (line 16, column 1)
qualif Auto(v : a_aXj, fix##126#P : FAppTy (FAppTy Pred  a_aXj)  int, fix##126#A0 : int): (? papp2([fix##126#P;
                                                                                                    v;
                                                                                                    fix##126#A0])) // "LiquidArray.hs" (line 16, column 1)
qualif Auto(v : int): false // "LiquidArray.hs" (line 20, column 1)
qualif Auto(VV : int): (? papp1([r;
                                 VV])) // "LiquidArray.hs" (line 9, column 1)
qualif Auto(VV : a_aXr, fix##126#A0 : int): (? papp2([p;
                                                      VV;
                                                      fix##126#A0])) // "LiquidArray.hs" (line 9, column 1)
qualif Auto(vv : int, fix##126#A0 : int): (vv = fix##126#A0) // "LiquidArray.hs" (line 9, column 1)
qualif Auto(VV : int, fix##126#A0 : int): (VV != fix##126#A0) // "LiquidArray.hs" (line 9, column 1)
qualif Auto(VV : int): (? papp1([r;
                                 VV])) // "LiquidArray.hs" (line 9, column 1)
qualif Auto(VV : a_aXr, fix##126#A0 : int): (? papp2([p;
                                                      VV;
                                                      fix##126#A0])) // "LiquidArray.hs" (line 9, column 1)
qualif Auto(vv : int, fix##126#A0 : int): (vv = fix##126#A0) // "LiquidArray.hs" (line 9, column 1)
qualif Auto(VV : int): (? papp1([r;
                                 VV])) // "LiquidArray.hs" (line 9, column 1)
qualif Auto(VV : a_aXr, fix##126#A0 : int): (? papp2([p;
                                                      VV;
                                                      fix##126#A0])) // "LiquidArray.hs" (line 9, column 1)
qualif Auto(vv : int, fix##126#A0 : int): (vv = fix##126#A0) // "LiquidArray.hs" (line 9, column 1)
qualif Auto(v : a_aXr, fix##126#P : FAppTy (FAppTy Pred  a_aXr)  int, fix##126#A0 : int): (? papp2([fix##126#P;
                                                                                                    v;
                                                                                                    fix##126#A0])) // "LiquidArray.hs" (line 9, column 1)
qualif Auto(v : a_aXr, fix##126#P : FAppTy (FAppTy Pred  a_aXr)  int, fix##126#A0 : int): (? papp2([fix##126#P;
                                                                                                    v;
                                                                                                    fix##126#A0])) // "LiquidArray.hs" (line 9, column 1)
qualif Auto(v : a_aXr, fix##126#P : FAppTy (FAppTy Pred  a_aXr)  int, fix##126#A0 : int): (? papp2([fix##126#P;
                                                                                                    v;
                                                                                                    fix##126#A0])) // "LiquidArray.hs" (line 9, column 1)
qualif IsEmp(v : GHC.Types.Bool, fix##126#Xs : [@(0)]): ((? Prop([v])) <=> (len([fix##126#Xs]) > 0)) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 13, column 8)
qualif IsEmp(v : GHC.Types.Bool, fix##126#Xs : [@(0)]): ((? Prop([v])) <=> (len([fix##126#Xs]) = 0)) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 14, column 8)
qualif ListZ(v : [@(0)]): (len([v]) = 0) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 16, column 8)
qualif ListZ(v : [@(0)]): (len([v]) >= 0) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 17, column 8)
qualif ListZ(v : [@(0)]): (len([v]) > 0) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 18, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) = len([fix##126#Xs])) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 20, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) >= len([fix##126#Xs])) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 21, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) > len([fix##126#Xs])) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 22, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) <= len([fix##126#Xs])) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 23, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) < len([fix##126#Xs])) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 24, column 8)
qualif EqLen(v : int, fix##126#Xs : [@(0)]): (v = len([fix##126#Xs])) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 26, column 8)
qualif LenEq(v : [@(0)], fix##126#X : int): (fix##126#X = len([v])) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 27, column 8)
qualif LenDiff(v : [@(0)], fix##126#X : int): (len([v]) = (fix##126#X + 1)) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 28, column 8)
qualif LenDiff(v : [@(0)], fix##126#X : int): (len([v]) = (fix##126#X - 1)) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 29, column 8)
qualif LenAcc(v : int, fix##126#Xs : [@(0)], fix##126#N : int): (v = (len([fix##126#Xs]) + fix##126#N)) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/GHC/Base.hquals" (line 30, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 3, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 4, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 5, column 8)
qualif Bot(v : bool): (0 = 1) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 6, column 8)
qualif Bot(v : int): (0 = 1) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 7, column 8)
qualif CmpZ(v : @(0)): (v < 0) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 9, column 8)
qualif CmpZ(v : @(0)): (v <= 0) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 10, column 8)
qualif CmpZ(v : @(0)): (v > 0) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 11, column 8)
qualif CmpZ(v : @(0)): (v >= 0) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 12, column 8)
qualif CmpZ(v : @(0)): (v = 0) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 13, column 8)
qualif CmpZ(v : @(0)): (v != 0) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 14, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v < fix##126#X) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 16, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v <= fix##126#X) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 17, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v > fix##126#X) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 18, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v >= fix##126#X) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 19, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v = fix##126#X) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 20, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v != fix##126#X) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 21, column 8)
qualif One(v : int): (v = 1) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 28, column 8)
qualif True(v : bool): (? v) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 29, column 8)
qualif False(v : bool): (~ ((? v))) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 30, column 8)
qualif True1(v : GHC.Types.Bool): (? Prop([v])) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 31, column 8)
qualif False1(v : GHC.Types.Bool): (~ ((? Prop([v])))) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 32, column 8)
qualif Papp(v : @(0), fix##126#P : FAppTy Pred  @(0)): (? papp1([fix##126#P;
                                                                 v])) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 35, column 8)
qualif Papp2(v : @(1), fix##126#X : @(0), fix##126#P : FAppTy (FAppTy Pred  @(1))  @(0)): (? papp2([fix##126#P;
                                                                                                    v;
                                                                                                    fix##126#X])) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 38, column 8)
qualif Papp3(v : @(2), fix##126#X : @(0), fix##126#Y : @(1), fix##126#P : FAppTy (FAppTy (FAppTy Pred  @(2))  @(0))  @(1)): (? papp3([fix##126#P;
                                                                                                                                      v;
                                                                                                                                      fix##126#X;
                                                                                                                                      fix##126#Y])) // "/Users/benjamin/refscript/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.4.1.1/include/Prelude.hquals" (line 41, column 8)

constant Prop : (func(0, [GHC.Types.Bool; bool]))
constant x_Tuple64 : (func(6, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5);
                               @(3)]))
constant x_Tuple54 : (func(5, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4);
                               @(3)]))
constant x_Tuple44 : (func(4, [FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3);
                               @(3)]))
constant xListSelector : (func(1, [[@(0)]; @(0)]))
constant x_Tuple76 : (func(7, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6);
                               @(5)]))
constant addrLen : (func(0, [int; int]))
constant x_Tuple52 : (func(5, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4);
                               @(1)]))
constant GHC.Types.False#68 : (GHC.Types.Bool)
constant x_Tuple75 : (func(7, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6);
                               @(4)]))
constant x_Tuple33 : (func(3, [FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2);
                               @(2)]))
constant x_Tuple41 : (func(4, [FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3);
                               @(0)]))
constant fst : (func(2, [FAppTy (FAppTy fix##40##41#  @(0))  @(1);
                         @(0)]))
constant x_Tuple73 : (func(7, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6);
                               @(2)]))
constant x_Tuple31 : (func(3, [FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2);
                               @(0)]))
constant papp4 : (func(8, [FAppTy (FAppTy (FAppTy (FAppTy Pred  @(0))  @(1))  @(2))  @(6);
                           @(3);
                           @(4);
                           @(5);
                           @(7);
                           bool]))
constant x_Tuple71 : (func(7, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6);
                               @(0)]))
constant x_Tuple65 : (func(6, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5);
                               @(4)]))
constant papp2 : (func(4, [FAppTy (FAppTy Pred  @(0))  @(1);
                           @(2);
                           @(3);
                           bool]))
constant x_Tuple32 : (func(3, [FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2);
                               @(1)]))
constant x_Tuple72 : (func(7, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6);
                               @(1)]))
constant x_Tuple63 : (func(6, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5);
                               @(2)]))
constant x_Tuple51 : (func(5, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4);
                               @(0)]))
constant len : (func(2, [FAppTy @(0)  @(1); int]))
constant xsListSelector : (func(1, [[@(0)]; [@(0)]]))
constant null : (func(1, [[@(0)]; bool]))
constant x_Tuple53 : (func(5, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4);
                               @(2)]))
constant x_Tuple22 : (func(2, [FAppTy (FAppTy fix##40##41#  @(0))  @(1);
                               @(1)]))
constant fromJust : (func(1, [FAppTy Data.Maybe.Maybe  @(0);
                              @(0)]))
constant snd : (func(2, [FAppTy (FAppTy fix##40##41#  @(0))  @(1);
                         @(1)]))
constant x_Tuple62 : (func(6, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5);
                               @(1)]))
constant x_Tuple55 : (func(5, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4);
                               @(4)]))
constant papp3 : (func(6, [FAppTy (FAppTy (FAppTy Pred  @(0))  @(1))  @(2);
                           @(3);
                           @(4);
                           @(5);
                           bool]))
constant x_Tuple43 : (func(4, [FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3);
                               @(2)]))
constant x_Tuple74 : (func(7, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6);
                               @(3)]))
constant cmp : (func(0, [GHC.Types.Ordering; GHC.Types.Ordering]))
constant isJust : (func(1, [FAppTy Data.Maybe.Maybe  @(0); bool]))
constant x_Tuple21 : (func(2, [FAppTy (FAppTy fix##40##41#  @(0))  @(1);
                               @(0)]))
constant x_Tuple61 : (func(6, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5);
                               @(0)]))
constant papp1 : (func(1, [FAppTy Pred  @(0); @(0); bool]))
constant x_Tuple66 : (func(6, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5);
                               @(5)]))
constant x_Tuple42 : (func(4, [FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3);
                               @(1)]))
constant x_Tuple77 : (func(7, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6);
                               @(6)]))
constant GHC.Types.True#6u : (GHC.Types.Bool)
constant fix#lit#35#Empty#32#array#33# : (Str)
bind 0 GHC.Err.error#05 : {VV : func(1, [[GHC.Types.Char];
                                         @(0)]) | []}
bind 1 GHC.CString.unpackCString##0k : {VV : func(0, [int;
                                                      [GHC.Types.Char]]) | []}
bind 2 fix#GHC.Classes.#61##61##35#02H : {VV : func(1, [@(0);
                                                        @(0);
                                                        GHC.Types.Bool]) | []}
bind 3 GHC.Types.False#68 : {VV#126 : GHC.Types.Bool | []}
bind 4 GHC.Types.True#6u : {VV#127 : GHC.Types.Bool | []}
bind 5 GHC.Base.const#r2o : {VV : func(2, [@(0); @(1); @(0)]) | []}
bind 6 fix#GHC.Classes.#36#fEqInt#35#rqT : {VV#129 : FAppTy GHC.Classes.Eq  int | []}
bind 7 GHC.Types.EQ#6U : {VV#130 : GHC.Types.Ordering | [(VV#130 = GHC.Types.EQ#6U)]}
bind 8 GHC.Types.LT#6S : {VV#131 : GHC.Types.Ordering | [(VV#131 = GHC.Types.LT#6S)]}
bind 9 GHC.Types.GT#6W : {VV#132 : GHC.Types.Ordering | [(VV#132 = GHC.Types.GT#6W)]}
bind 10 GHC.Types.True#6u : {v : GHC.Types.Bool | [(? Prop([v]))]}
bind 11 GHC.Types.False#68 : {v : GHC.Types.Bool | [(~ ((? Prop([v]))))]}
bind 12 fix#GHC.Classes.#61##61##35#02H : {VV : func(1, [@(0);
                                                         @(0);
                                                         GHC.Types.Bool]) | []}
bind 13 fix#GHC.Num.#42##35#ru : {VV : func(1, [@(0);
                                                @(0);
                                                @(0)]) | []}
bind 14 GHC.Base..#r2q : {VV : func(3, [func(0, [@(0); @(1)]);
                                        func(0, [@(2); @(0)]);
                                        @(2);
                                        @(1)]) | []}
bind 15 GHC.Integer.Type.smallInteger#0Z : {VV : func(0, [int;
                                                          int]) | []}
bind 16 fix#GHC.Num.#43##35#rt : {VV : func(1, [@(0);
                                                @(0);
                                                @(0)]) | []}
bind 17 fix#GHC.Num.#45##35#02B : {VV : func(1, [@(0);
                                                 @(0);
                                                 @(0)]) | []}
bind 18 GHC.Types.I##6c : {VV : func(0, [int; int]) | []}
bind 19 fix#GHC.Prim.#43##35##35#98 : {VV : func(0, [int;
                                                     int;
                                                     int]) | []}
bind 20 fix#GHC.Prim.#45##35##35#99 : {VV : func(0, [int;
                                                     int;
                                                     int]) | []}
bind 21 fix#GHC.Prim.#61##61##35##35#9o : {VV : func(0, [int;
                                                         int;
                                                         int]) | []}
bind 22 fix#GHC.Prim.#62##61##35##35#9n : {VV : func(0, [int;
                                                         int;
                                                         int]) | []}
bind 23 fix#GHC.Prim.#60##61##35##35#9r : {VV : func(0, [int;
                                                         int;
                                                         int]) | []}
bind 24 fix#GHC.Prim.#60##35##35#9q : {VV : func(0, [int;
                                                     int;
                                                     int]) | []}
bind 25 fix#GHC.Prim.#62##35##35#9m : {VV : func(0, [int;
                                                     int;
                                                     int]) | []}
bind 26 fix#GHC.Tuple.#40##44##44##44##44##44##41##35#7c : {VV : func(6, [@(0);
                                                                          @(1);
                                                                          @(2);
                                                                          @(3);
                                                                          @(4);
                                                                          @(5);
                                                                          FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5)]) | []}
bind 27 fix#GHC.Tuple.#40##44##44##44##44##44##44##41##35#7e : {VV : func(7, [@(0);
                                                                              @(1);
                                                                              @(2);
                                                                              @(3);
                                                                              @(4);
                                                                              @(5);
                                                                              @(6);
                                                                              FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6)]) | []}
bind 28 Data.Maybe.Just#r1a : {VV : func(1, [@(0);
                                             FAppTy Data.Maybe.Maybe  @(0)]) | []}
bind 29 GHC.Types.EQ#6U : {VV#152 : GHC.Types.Ordering | [(cmp([VV#152]) = GHC.Types.EQ#6U);
                                                          (VV#152 = GHC.Types.EQ#6U)]}
bind 30 fix#GHC.Tuple.#40##44##44##44##41##35#78 : {VV : func(4, [@(0);
                                                                  @(1);
                                                                  @(2);
                                                                  @(3);
                                                                  FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3)]) | []}
bind 31 GHC.Types.LT#6S : {VV#154 : GHC.Types.Ordering | [(cmp([VV#154]) = GHC.Types.LT#6S);
                                                          (VV#154 = GHC.Types.LT#6S)]}
bind 32 GHC.Types.GT#6W : {VV#155 : GHC.Types.Ordering | [(cmp([VV#155]) = GHC.Types.GT#6W);
                                                          (VV#155 = GHC.Types.GT#6W)]}
bind 33 fix#GHC.Tuple.#40##44##44##44##44##41##35#7a : {VV : func(5, [@(0);
                                                                      @(1);
                                                                      @(2);
                                                                      @(3);
                                                                      @(4);
                                                                      FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4)]) | []}
bind 34 fix#GHC.Real.D#58#Integral#35#r6o : {VV : func(1, [func(0, [@(0);
                                                                    @(0);
                                                                    @(0)]);
                                                           func(0, [@(0); @(0); @(0)]);
                                                           func(0, [@(0); @(0); @(0)]);
                                                           func(0, [@(0); @(0); @(0)]);
                                                           func(0, [@(0);
                                                                    @(0);
                                                                    FAppTy (FAppTy fix##40##41#  @(0))  @(0)]);
                                                           func(0, [@(0);
                                                                    @(0);
                                                                    FAppTy (FAppTy fix##40##41#  @(0))  @(0)]);
                                                           func(0, [@(0); int]);
                                                           FAppTy GHC.Real.Integral  @(0)]) | []}
bind 35 fix#GHC.Tuple.#40##44##41##35#74 : {VV : func(2, [@(0);
                                                          @(1);
                                                          FAppTy (FAppTy fix##40##41#  @(0))  @(1)]) | []}
bind 36 fix#GHC.Types.#58##35#64 : {VV : func(1, [@(0);
                                                  [@(0)];
                                                  [@(0)]]) | []}
bind 37 fix#GHC.Tuple.#40##44##44##41##35#76 : {VV : func(3, [@(0);
                                                              @(1);
                                                              @(2);
                                                              FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2)]) | []}
bind 38 fix#GHC.Types.#91##93##35#6m : {VV : func(1, [[@(0)]]) | []}
bind 39 Data.Maybe.Nothing#r19 : {VV : func(1, [FAppTy Data.Maybe.Maybe  @(0)]) | []}
bind 40 fix#GHC.Real.D#58#Fractional#35#rkT : {VV : func(1, [func(0, [@(0);
                                                                      @(0);
                                                                      @(0)]);
                                                             func(0, [@(0); @(0)]);
                                                             func(0, [FAppTy GHC.Real.Ratio  int;
                                                                      @(0)]);
                                                             FAppTy GHC.Real.Fractional  @(0)]) | []}
bind 41 lq_anf__dXD : {lq_tmp_x_169 : [GHC.Types.Char] | [(len([lq_tmp_x_169]) >= 0)]}
bind 42 lq_anf__dXE : {VV#180 : a_aXb | [$k__181[lq_tmp_x_179:=lq_anf__dXD]]}
bind 43 LiquidArray.empty#rpw : {VV : func(1, [int; @(0)]) | []}
bind 44 p : {VV#203 : FAppTy (FAppTy Pred  a_aXj)  int | []}
bind 45 x0 : {VV#204 : int | []}
bind 46 r : {VV#205 : FAppTy Pred  int | []}
bind 47 i#aX2 : {VV#206 : int | [(? papp1([r; VV#206]))]}
bind 48 a#aX3 : {VV : func(0, [int; a_aXj]) | []}
bind 49 LiquidArray.get#rpv : {VV : func(1, [int;
                                             func(0, [int; @(0)]);
                                             @(0)]) | []}
bind 50 p : {VV#218 : FAppTy (FAppTy Pred  a_aXr)  int | []}
bind 51 x0 : {VV#219 : int | []}
bind 52 r : {VV#220 : FAppTy Pred  int | []}
bind 53 i#aWY : {VV#221 : int | [(? papp1([r; VV#221]))]}
bind 54 x#aWZ : {VV : a_aXr | [(? papp2([p; VV; i#aWY]))]}
bind 55 a#aX0 : {VV : func(0, [int; a_aXr]) | []}
bind 56 k#aX1 : {VV#224 : int | [(? papp1([r; VV#224]))]}
bind 57 lq_anf__dXF : {lq_tmp_x_226 : GHC.Types.Bool | [((? Prop([lq_tmp_x_226])) <=> (k#aX1 = i#aWY))]}
bind 58 lq_anf__dXG : {lq_tmp_x_242 : GHC.Types.Bool | [((? Prop([lq_tmp_x_242])) <=> (k#aX1 = i#aWY));
                                                        (lq_tmp_x_242 = lq_anf__dXF)]}
bind 59 lq_anf__dXG : {lq_tmp_x_244 : GHC.Types.Bool | [((? Prop([lq_tmp_x_244])) <=> (k#aX1 = i#aWY));
                                                        (lq_tmp_x_244 = lq_anf__dXF)]}
bind 60 lq_anf__dXG : {lq_tmp_x_244 : GHC.Types.Bool | [((? Prop([lq_tmp_x_244])) <=> (k#aX1 = i#aWY));
                                                        (lq_tmp_x_244 = lq_anf__dXF);
                                                        (~ ((? Prop([lq_tmp_x_244]))));
                                                        (~ ((? Prop([lq_tmp_x_244]))));
                                                        (~ ((? Prop([lq_tmp_x_244]))))]}
bind 61 lq_anf__dXG : {lq_tmp_x_253 : GHC.Types.Bool | [((? Prop([lq_tmp_x_253])) <=> (k#aX1 = i#aWY));
                                                        (lq_tmp_x_253 = lq_anf__dXF)]}
bind 62 lq_anf__dXG : {lq_tmp_x_253 : GHC.Types.Bool | [((? Prop([lq_tmp_x_253])) <=> (k#aX1 = i#aWY));
                                                        (lq_tmp_x_253 = lq_anf__dXF);
                                                        (? Prop([lq_tmp_x_253]));
                                                        (? Prop([lq_tmp_x_253]));
                                                        (? Prop([lq_tmp_x_253]))]}
bind 63 LiquidArray.set#rou : {VV : func(1, [int;
                                             @(0);
                                             func(0, [int; @(0)]);
                                             int;
                                             @(0)]) | []}
bind 64 VV : {VV : a_aXr | [(? papp2([p; VV; i#aWY]));
                            (VV = x#aWZ)]}
bind 65 VV : {VV : a_aXr | [(? papp2([p; VV; k#aX1]))]}
bind 66 VV#261 : {VV#261 : int | [(? papp1([r; VV#261]));
                                  (VV#261 = k#aX1)]}
bind 67 VV#261 : {VV#261 : int | [(? papp1([r; VV#261]));
                                  (VV#261 = k#aX1)]}
bind 68 VV#264 : {VV#264 : int | [(? papp1([r; VV#264]));
                                  (VV#264 = i#aWY)]}
bind 69 VV#264 : {VV#264 : int | [(? papp1([r; VV#264]));
                                  (VV#264 = i#aWY)]}
bind 70 VV#267 : {VV#267 : int | [(? papp1([r; VV#267]));
                                  (VV#267 = k#aX1)]}
bind 71 VV#267 : {VV#267 : int | [(? papp1([r; VV#267]));
                                  (VV#267 = k#aX1)]}
bind 72 VV : {VV : a_aXj | [(? papp2([p; VV; i#aX2]))]}
bind 73 VV#271 : {VV#271 : int | [(? papp1([r; VV#271]));
                                  (VV#271 = i#aX2)]}
bind 74 VV#271 : {VV#271 : int | [(? papp1([r; VV#271]));
                                  (VV#271 = i#aX2)]}
bind 75 lq_tmp_x_188 : {lq_tmp_x_188 : func(0, [int; a_aXb]) | []}
bind 76 VV#275 : {VV#275 : int | [false]}
bind 77 VV#275 : {VV#275 : int | [false]}
bind 78 lq_tmp_x_164 : {v : int | [false]}
bind 79 VV#192 : {VV#192 : a_aXb | [$k__193[lq_tmp_x_190:=lq_anf__dXE][lq_tmp_x_191:=lq_tmp_x_164]]}
bind 80 VV#180 : {VV#180 : a_aXb | [$k__181[lq_tmp_x_179:=lq_anf__dXD];
                                    (VV#180 = lq_anf__dXE)]}
bind 81 VV#281 : {VV#281 : [GHC.Types.Char] | [(len([VV#281]) >= 0);
                                               (VV#281 = lq_anf__dXD);
                                               (len([VV#281]) >= 0)]}
bind 82 VV#281 : {VV#281 : [GHC.Types.Char] | [(len([VV#281]) >= 0);
                                               (VV#281 = lq_anf__dXD);
                                               (len([VV#281]) >= 0)]}
bind 83 VV#284 : {VV#284 : GHC.Types.Char | []}
bind 84 VV#284 : {VV#284 : GHC.Types.Char | []}
bind 85 lq_tmp_x_175 : {VV#287 : GHC.Types.Char | []}
bind 86 VV#288 : {VV#288 : GHC.Types.Char | []}
bind 87 VV#288 : {VV#288 : GHC.Types.Char | []}
bind 88 VV#291 : {VV#291 : int | []}
bind 89 VV#291 : {VV#291 : int | []}
bind 90 VV#233 : {VV#233 : int | [$k__234]}
bind 91 VV#195 : {VV#195 : int | [$k__196]}


constraint:
  env [0;
       16;
       32;
       64;
       1;
       17;
       33;
       49;
       2;
       18;
       34;
       50;
       3;
       19;
       35;
       51;
       4;
       20;
       36;
       52;
       5;
       21;
       37;
       53;
       6;
       22;
       38;
       54;
       7;
       23;
       39;
       55;
       8;
       24;
       40;
       56;
       9;
       25;
       57;
       10;
       26;
       58;
       11;
       27;
       43;
       12;
       28;
       13;
       29;
       61;
       14;
       30;
       62;
       15;
       31]
  grd true
  lhs {VV#F1 : a_aXr | [(? papp2([p; VV#F1; i#aWY]));
                        (VV#F1 = x#aWZ)]}
  rhs {VV#F1 : a_aXr | [(? papp2([p; VV#F1; k#aX1]))]}
  id 1 tag [3]
  // META constraint id 1 : LiquidArray.hs:9:34
  



constraint:
  env [0;
       16;
       32;
       1;
       17;
       33;
       49;
       65;
       2;
       18;
       34;
       50;
       3;
       19;
       35;
       51;
       4;
       20;
       36;
       52;
       5;
       21;
       37;
       53;
       6;
       22;
       38;
       54;
       7;
       23;
       39;
       55;
       8;
       24;
       40;
       56;
       9;
       25;
       57;
       10;
       26;
       58;
       11;
       27;
       43;
       59;
       12;
       28;
       60;
       13;
       29;
       14;
       30;
       15;
       31]
  grd true
  lhs {VV#F2 : a_aXr | [(? papp2([p; VV#F2; k#aX1]))]}
  rhs {VV#F2 : a_aXr | [(? papp2([p; VV#F2; k#aX1]))]}
  id 2 tag [3]
  // META constraint id 2 : LiquidArray.hs:9:41-43
  



constraint:
  env [0;
       16;
       32;
       1;
       17;
       33;
       49;
       2;
       18;
       34;
       50;
       66;
       3;
       19;
       35;
       51;
       4;
       20;
       36;
       52;
       5;
       21;
       37;
       53;
       6;
       22;
       38;
       54;
       7;
       23;
       39;
       55;
       8;
       24;
       40;
       56;
       9;
       25;
       57;
       10;
       26;
       58;
       11;
       27;
       43;
       59;
       12;
       28;
       60;
       13;
       29;
       14;
       30;
       15;
       31]
  grd true
  lhs {VV#F3 : int | [(? papp1([r; VV#F3])); (VV#F3 = k#aX1)]}
  rhs {VV#F3 : int | [(VV#F3 != i#aWY)]}
  id 3 tag [3]
  // META constraint id 3 : LiquidArray.hs:9:43
  



constraint:
  env [0;
       16;
       32;
       1;
       17;
       33;
       49;
       2;
       18;
       34;
       50;
       66;
       3;
       19;
       35;
       51;
       4;
       20;
       36;
       52;
       5;
       21;
       37;
       53;
       6;
       22;
       38;
       54;
       7;
       23;
       39;
       55;
       8;
       24;
       40;
       56;
       9;
       25;
       57;
       10;
       26;
       58;
       11;
       27;
       43;
       59;
       12;
       28;
       60;
       13;
       29;
       14;
       30;
       15;
       31]
  grd true
  lhs {VV#F4 : int | [(? papp1([r; VV#F4])); (VV#F4 = k#aX1)]}
  rhs {VV#F4 : int | [(? papp1([r; VV#F4]))]}
  id 4 tag [3]
  // META constraint id 4 : LiquidArray.hs:9:43
  



constraint:
  env [0;
       16;
       32;
       1;
       17;
       33;
       49;
       2;
       18;
       34;
       50;
       3;
       19;
       35;
       51;
       4;
       20;
       36;
       52;
       68;
       5;
       21;
       37;
       53;
       6;
       22;
       38;
       54;
       7;
       23;
       39;
       55;
       8;
       24;
       40;
       56;
       9;
       25;
       10;
       26;
       11;
       27;
       43;
       12;
       28;
       13;
       29;
       14;
       30;
       15;
       31]
  grd true
  lhs {VV#F5 : int | [(? papp1([r; VV#F5])); (VV#F5 = i#aWY)]}
  rhs {VV#F5 : int | [$k__234[VV#233:=VV#F5][lq_tmp_x_230:=fix#GHC.Classes.#36#fEqInt#35#rqT][lq_tmp_x_231:=k#aX1][lq_tmp_x_236:=VV#F5][VV#264:=VV#F5][VV#F:=VV#F5]]}
  id 5 tag [3]
  // META constraint id 5 : LiquidArray.hs:9:27
  



constraint:
  env [0;
       16;
       32;
       1;
       17;
       33;
       49;
       2;
       18;
       34;
       50;
       3;
       19;
       35;
       51;
       4;
       20;
       36;
       52;
       5;
       21;
       37;
       53;
       6;
       22;
       38;
       54;
       70;
       7;
       23;
       39;
       55;
       8;
       24;
       40;
       56;
       9;
       25;
       10;
       26;
       11;
       27;
       43;
       12;
       28;
       13;
       29;
       14;
       30;
       15;
       31]
  grd true
  lhs {VV#F6 : int | [(? papp1([r; VV#F6])); (VV#F6 = k#aX1)]}
  rhs {VV#F6 : int | [$k__234[VV#233:=VV#F6][lq_tmp_x_230:=fix#GHC.Classes.#36#fEqInt#35#rqT][lq_tmp_x_236:=VV#F6][VV#267:=VV#F6][VV#F:=VV#F6]]}
  id 6 tag [3]
  // META constraint id 6 : LiquidArray.hs:9:22
  



constraint:
  env [0;
       16;
       32;
       48;
       1;
       17;
       33;
       2;
       18;
       34;
       3;
       19;
       35;
       4;
       20;
       36;
       5;
       21;
       37;
       6;
       22;
       38;
       7;
       23;
       39;
       8;
       24;
       40;
       72;
       9;
       25;
       10;
       26;
       11;
       27;
       43;
       12;
       28;
       44;
       13;
       29;
       45;
       14;
       30;
       46;
       15;
       31;
       47]
  grd true
  lhs {VV#F7 : a_aXj | [(? papp2([p; VV#F7; i#aX2]))]}
  rhs {VV#F7 : a_aXj | [(? papp2([p; VV#F7; i#aX2]))]}
  id 7 tag [2]
  // META constraint id 7 : LiquidArray.hs:16:11-13
  



constraint:
  env [0;
       16;
       32;
       48;
       1;
       17;
       33;
       2;
       18;
       34;
       3;
       19;
       35;
       4;
       20;
       36;
       5;
       21;
       37;
       6;
       22;
       38;
       7;
       23;
       39;
       8;
       24;
       40;
       9;
       25;
       73;
       10;
       26;
       11;
       27;
       43;
       12;
       28;
       44;
       13;
       29;
       45;
       14;
       30;
       46;
       15;
       31;
       47]
  grd true
  lhs {VV#F8 : int | [(? papp1([r; VV#F8])); (VV#F8 = i#aX2)]}
  rhs {VV#F8 : int | [(? papp1([r; VV#F8]))]}
  id 8 tag [2]
  // META constraint id 8 : LiquidArray.hs:16:13
  



constraint:
  env [0;
       16;
       32;
       1;
       17;
       33;
       2;
       18;
       34;
       3;
       19;
       35;
       4;
       20;
       36;
       5;
       21;
       37;
       6;
       22;
       38;
       7;
       23;
       39;
       8;
       24;
       40;
       9;
       25;
       41;
       10;
       26;
       42;
       11;
       27;
       12;
       28;
       76;
       13;
       29;
       14;
       30;
       15;
       31]
  grd true
  lhs {VV#F9 : int | [false]}
  rhs {VV#F9 : int | [$k__196[VV#195:=VV#F9][lq_tmp_x_190:=lq_anf__dXE][lq_tmp_x_198:=VV#F9][VV#275:=VV#F9][VV#F:=VV#F9]]}
  id 9 tag [1]
  // META constraint id 9 : LiquidArray.hs:20:9-36
  



constraint:
  env [0;
       16;
       32;
       80;
       1;
       17;
       33;
       2;
       18;
       34;
       3;
       19;
       35;
       4;
       20;
       36;
       5;
       21;
       37;
       6;
       22;
       38;
       7;
       23;
       39;
       8;
       24;
       40;
       9;
       25;
       41;
       10;
       26;
       42;
       11;
       27;
       12;
       28;
       13;
       29;
       14;
       30;
       15;
       31]
  grd true
  lhs {VV#F10 : a_aXb | [$k__181[lq_tmp_x_179:=lq_anf__dXD][VV#180:=VV#F10][VV#F:=VV#F10];
                         (VV#F10 = lq_anf__dXE)]}
  rhs {VV#F10 : a_aXb | [$k__193[VV#192:=VV#F10][VV#F:=VV#F10]]}
  id 10 tag [1]
  // META constraint id 10 : LiquidArray.hs:20:16-35
  



wf:
  env [0;
       16;
       32;
       1;
       17;
       33;
       49;
       2;
       18;
       34;
       50;
       3;
       19;
       35;
       51;
       4;
       20;
       36;
       52;
       5;
       21;
       37;
       53;
       6;
       22;
       38;
       54;
       7;
       23;
       39;
       55;
       8;
       24;
       40;
       56;
       9;
       25;
       10;
       26;
       11;
       27;
       43;
       12;
       28;
       13;
       29;
       14;
       30;
       15;
       31]
  reft {VV#233 : int | [$k__234]}
  
  // META wf  : LiquidArray.hs:9:24-25
  



wf:
  env [0;
       16;
       32;
       1;
       17;
       33;
       2;
       18;
       34;
       3;
       19;
       35;
       4;
       20;
       36;
       5;
       21;
       37;
       6;
       22;
       38;
       7;
       23;
       39;
       8;
       24;
       40;
       9;
       25;
       41;
       10;
       26;
       42;
       11;
       27;
       12;
       28;
       13;
       29;
       14;
       30;
       15;
       31]
  reft {VV#195 : int | [$k__196]}
  
  // META wf  : LiquidArray.hs:20:9-13
  



wf:
  env [0;
       16;
       32;
       1;
       17;
       33;
       2;
       18;
       34;
       3;
       19;
       35;
       4;
       20;
       36;
       5;
       21;
       37;
       6;
       22;
       38;
       7;
       23;
       39;
       8;
       24;
       40;
       9;
       25;
       41;
       10;
       26;
       42;
       11;
       27;
       12;
       28;
       13;
       29;
       14;
       30;
       15;
       31]
  reft {VV#192 : a_aXb | [$k__193]}
  
  // META wf  : LiquidArray.hs:20:9-13
  



wf:
  env [0;
       16;
       32;
       1;
       17;
       33;
       2;
       18;
       34;
       3;
       19;
       35;
       4;
       20;
       36;
       5;
       21;
       37;
       6;
       22;
       38;
       7;
       23;
       39;
       8;
       24;
       40;
       9;
       25;
       41;
       10;
       26;
       11;
       27;
       12;
       28;
       13;
       29;
       14;
       30;
       15;
       31]
  reft {VV#180 : a_aXb | [$k__181]}
  
  // META wf  : LiquidArray.hs:20:16-20
  

// META bind 0 : <no location info>


// META bind 16 : <no location info>


// META bind 32 : <no location info>


// META bind 48 : LiquidArray.hs:16:1-3


// META bind 64 : LiquidArray.hs:9:34


// META bind 80 : LiquidArray.hs:20:16-35


// META bind 1 : <no location info>


// META bind 17 : <no location info>


// META bind 33 : <no location info>


// META bind 49 : <no location info>


// META bind 65 : LiquidArray.hs:9:41-43


// META bind 81 : LiquidArray.hs:20:22-35


// META bind 2 : <no location info>


// META bind 18 : <no location info>


// META bind 34 : <no location info>


// META bind 50 : LiquidArray.hs:9:1-3


// META bind 66 : LiquidArray.hs:9:43


// META bind 82 : LiquidArray.hs:20:22-35


// META bind 3 : <no location info>


// META bind 19 : <no location info>


// META bind 35 : <no location info>


// META bind 51 : LiquidArray.hs:9:1-3


// META bind 67 : LiquidArray.hs:9:43


// META bind 83 : LiquidArray.hs:20:22-35


// META bind 4 : <no location info>


// META bind 20 : <no location info>


// META bind 36 : <no location info>


// META bind 52 : LiquidArray.hs:9:1-3


// META bind 68 : LiquidArray.hs:9:27


// META bind 84 : LiquidArray.hs:20:22-35


// META bind 5 : <no location info>


// META bind 21 : <no location info>


// META bind 37 : <no location info>


// META bind 53 : LiquidArray.hs:9:1-3


// META bind 69 : LiquidArray.hs:9:27


// META bind 85 : LiquidArray.hs:20:22-35


// META bind 6 : <no location info>


// META bind 22 : <no location info>


// META bind 38 : <no location info>


// META bind 54 : LiquidArray.hs:9:1-3


// META bind 70 : LiquidArray.hs:9:22


// META bind 86 : LiquidArray.hs:20:22-35


// META bind 7 : <no location info>


// META bind 23 : <no location info>


// META bind 39 : <no location info>


// META bind 55 : LiquidArray.hs:9:1-3


// META bind 71 : LiquidArray.hs:9:22


// META bind 87 : LiquidArray.hs:20:22-35


// META bind 8 : <no location info>


// META bind 24 : <no location info>


// META bind 40 : <no location info>


// META bind 56 : LiquidArray.hs:9:13-43


// META bind 72 : LiquidArray.hs:16:11-13


// META bind 88 : LiquidArray.hs:20:1-5


// META bind 9 : <no location info>


// META bind 25 : <no location info>


// META bind 41 : LiquidArray.hs:20:1-5


// META bind 57 : LiquidArray.hs:9:13-43


// META bind 73 : LiquidArray.hs:16:13


// META bind 89 : LiquidArray.hs:20:1-5


// META bind 10 : <no location info>


// META bind 26 : <no location info>


// META bind 42 : LiquidArray.hs:20:1-5


// META bind 58 : LiquidArray.hs:9:19-43


// META bind 74 : LiquidArray.hs:16:13


// META bind 90 : LiquidArray.hs:9:24-25


// META bind 11 : <no location info>


// META bind 27 : <no location info>


// META bind 43 : <no location info>


// META bind 59 : LiquidArray.hs:9:19-43


// META bind 75 : LiquidArray.hs:20:9-36


// META bind 91 : LiquidArray.hs:20:9-13


// META bind 12 : <no location info>


// META bind 28 : <no location info>


// META bind 44 : LiquidArray.hs:16:1-3


// META bind 60 : LiquidArray.hs:9:19-43


// META bind 76 : LiquidArray.hs:20:9-36


// META bind 13 : <no location info>


// META bind 29 : <no location info>


// META bind 45 : LiquidArray.hs:16:1-3


// META bind 61 : LiquidArray.hs:9:19-43


// META bind 77 : LiquidArray.hs:20:9-36


// META bind 14 : <no location info>


// META bind 30 : <no location info>


// META bind 46 : LiquidArray.hs:16:1-3


// META bind 62 : LiquidArray.hs:9:19-43


// META bind 78 : LiquidArray.hs:20:9-36


// META bind 15 : <no location info>


// META bind 31 : <no location info>


// META bind 47 : LiquidArray.hs:16:1-3


// META bind 63 : <no location info>


// META bind 79 : LiquidArray.hs:20:9-36

