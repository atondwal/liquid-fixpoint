qualif Fst(v : @(1), fix##126#Y : @(0)): (v = fst([fix##126#Y])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.spec" (line 29, column 8)
qualif Snd(v : @(1), fix##126#Y : @(0)): (v = snd([fix##126#Y])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.spec" (line 30, column 8)
qualif Auto(VV : (Foo.L  a_apy), fix##126#A0 : (Foo.L  a_apy)): (xs([VV]) = fix##126#A0) // "absref-crash.hs" (line 3, column 12)
qualif IsEmp(v : GHC.Types.Bool, fix##126#Xs : [@(0)]): ((? Prop([v])) <=> (len([fix##126#Xs]) > 0)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 13, column 8)
qualif IsEmp(v : GHC.Types.Bool, fix##126#Xs : [@(0)]): ((? Prop([v])) <=> (len([fix##126#Xs]) = 0)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 14, column 8)
qualif ListZ(v : [@(0)]): (len([v]) = 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 16, column 8)
qualif ListZ(v : [@(0)]): (len([v]) >= 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 17, column 8)
qualif ListZ(v : [@(0)]): (len([v]) > 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 18, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) = len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 20, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) >= len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 21, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) > len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 22, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) <= len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 23, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) < len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 24, column 8)
qualif EqLen(v : int, fix##126#Xs : [@(0)]): (v = len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 26, column 8)
qualif LenEq(v : [@(0)], fix##126#X : int): (fix##126#X = len([v])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 27, column 8)
qualif LenDiff(v : [@(0)], fix##126#X : int): (len([v]) = (fix##126#X + 1)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 28, column 8)
qualif LenDiff(v : [@(0)], fix##126#X : int): (len([v]) = (fix##126#X - 1)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 29, column 8)
qualif LenAcc(v : int, fix##126#Xs : [@(0)], fix##126#N : int): (v = (len([fix##126#Xs]) + fix##126#N)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 30, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 3, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 4, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 5, column 8)
qualif Bot(v : bool): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 6, column 8)
qualif Bot(v : int): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 7, column 8)
qualif CmpZ(v : @(0)): (v < 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 9, column 8)
qualif CmpZ(v : @(0)): (v <= 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 10, column 8)
qualif CmpZ(v : @(0)): (v > 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 11, column 8)
qualif CmpZ(v : @(0)): (v >= 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 12, column 8)
qualif CmpZ(v : @(0)): (v = 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 13, column 8)
qualif CmpZ(v : @(0)): (v != 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 14, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v < fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 16, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v <= fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 17, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v > fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 18, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v >= fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 19, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v = fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 20, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v != fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 21, column 8)
qualif One(v : int): (v = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 28, column 8)
qualif True(v : bool): (? v) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 29, column 8)
qualif False(v : bool): (~ ((? v))) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 30, column 8)
qualif True1(v : GHC.Types.Bool): (? Prop([v])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 31, column 8)
qualif False1(v : GHC.Types.Bool): (~ ((? Prop([v])))) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 32, column 8)
qualif Papp(v : @(0), fix##126#P : (Pred  @(0))): (? papp1([fix##126#P;
                                                            v])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 35, column 8)
qualif Papp2(v : @(1), fix##126#X : @(0), fix##126#P : (Pred  @(1)  @(0))): (? papp2([fix##126#P;
                                                                                      v;
                                                                                      fix##126#X])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 38, column 8)
qualif Papp3(v : @(2), fix##126#X : @(0), fix##126#Y : @(1), fix##126#P : (Pred  @(2)  @(0)  @(1))): (? papp3([fix##126#P;
                                                                                                               v;
                                                                                                               fix##126#X;
                                                                                                               fix##126#Y])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 41, column 8)

qualif Fst(v : @(1), fix##126#Y : @(0)): (v = fst([fix##126#Y])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.spec" (line 29, column 8)
qualif Snd(v : @(1), fix##126#Y : @(0)): (v = snd([fix##126#Y])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.spec" (line 30, column 8)
qualif Auto(VV : (Foo.L  a_apy), fix##126#A0 : (Foo.L  a_apy)): (xs([VV]) = fix##126#A0) // "absref-crash.hs" (line 3, column 12)
qualif IsEmp(v : GHC.Types.Bool, fix##126#Xs : [@(0)]): ((? Prop([v])) <=> (len([fix##126#Xs]) > 0)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 13, column 8)
qualif IsEmp(v : GHC.Types.Bool, fix##126#Xs : [@(0)]): ((? Prop([v])) <=> (len([fix##126#Xs]) = 0)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 14, column 8)
qualif ListZ(v : [@(0)]): (len([v]) = 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 16, column 8)
qualif ListZ(v : [@(0)]): (len([v]) >= 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 17, column 8)
qualif ListZ(v : [@(0)]): (len([v]) > 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 18, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) = len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 20, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) >= len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 21, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) > len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 22, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) <= len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 23, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) < len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 24, column 8)
qualif EqLen(v : int, fix##126#Xs : [@(0)]): (v = len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 26, column 8)
qualif LenEq(v : [@(0)], fix##126#X : int): (fix##126#X = len([v])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 27, column 8)
qualif LenDiff(v : [@(0)], fix##126#X : int): (len([v]) = (fix##126#X + 1)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 28, column 8)
qualif LenDiff(v : [@(0)], fix##126#X : int): (len([v]) = (fix##126#X - 1)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 29, column 8)
qualif LenAcc(v : int, fix##126#Xs : [@(0)], fix##126#N : int): (v = (len([fix##126#Xs]) + fix##126#N)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 30, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 3, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 4, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 5, column 8)
qualif Bot(v : bool): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 6, column 8)
qualif Bot(v : int): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 7, column 8)
qualif CmpZ(v : @(0)): (v < 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 9, column 8)
qualif CmpZ(v : @(0)): (v <= 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 10, column 8)
qualif CmpZ(v : @(0)): (v > 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 11, column 8)
qualif CmpZ(v : @(0)): (v >= 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 12, column 8)
qualif CmpZ(v : @(0)): (v = 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 13, column 8)
qualif CmpZ(v : @(0)): (v != 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 14, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v < fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 16, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v <= fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 17, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v > fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 18, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v >= fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 19, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v = fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 20, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v != fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 21, column 8)
qualif One(v : int): (v = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 28, column 8)
qualif True(v : bool): (? v) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 29, column 8)
qualif False(v : bool): (~ ((? v))) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 30, column 8)
qualif True1(v : GHC.Types.Bool): (? Prop([v])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 31, column 8)
qualif False1(v : GHC.Types.Bool): (~ ((? Prop([v])))) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 32, column 8)
qualif Papp(v : @(0), fix##126#P : (Pred  @(0))): (? papp1([fix##126#P;
                                                            v])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 35, column 8)
qualif Papp2(v : @(1), fix##126#X : @(0), fix##126#P : (Pred  @(1)  @(0))): (? papp2([fix##126#P;
                                                                                      v;
                                                                                      fix##126#X])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 38, column 8)
qualif Papp3(v : @(2), fix##126#X : @(0), fix##126#Y : @(1), fix##126#P : (Pred  @(2)  @(0)  @(1))): (? papp3([fix##126#P;
                                                                                                               v;
                                                                                                               fix##126#X;
                                                                                                               fix##126#Y])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 41, column 8)




constant Prop : (func(0, [GHC.Types.Bool; bool]))
constant x_Tuple64 : (func(6, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5));
                               @(3)]))
constant x_Tuple54 : (func(5, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4));
                               @(3)]))
constant x_Tuple44 : (func(4, [(Tuple  @(0)  @(1)  @(2)  @(3));
                               @(3)]))
constant xListSelector : (func(1, [[@(0)]; @(0)]))
constant x_Tuple41 : (func(4, [(Tuple  @(0)  @(1)  @(2)  @(3));
                               @(0)]))
constant x_Tuple76 : (func(7, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5)  @(6));
                               @(5)]))
constant autolen : (func(1, [@(0); int]))
constant addrLen : (func(0, [int; int]))
constant x_Tuple65 : (func(6, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5));
                               @(4)]))
constant strLen : (func(0, [int; int]))
constant x_Tuple52 : (func(5, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4));
                               @(1)]))
constant x_Tuple75 : (func(7, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5)  @(6));
                               @(4)]))
constant x_Tuple33 : (func(3, [(Tuple  @(0)  @(1)  @(2)); @(2)]))
constant fst : (func(2, [(Tuple  @(0)  @(1)); @(0)]))
constant x_Tuple73 : (func(7, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5)  @(6));
                               @(2)]))
constant x_Tuple31 : (func(3, [(Tuple  @(0)  @(1)  @(2)); @(0)]))
constant x_Tuple43 : (func(4, [(Tuple  @(0)  @(1)  @(2)  @(3));
                               @(2)]))
constant papp4 : (func(8, [(Pred  @(0)  @(1)  @(2)  @(6));
                           @(3);
                           @(4);
                           @(5);
                           @(7);
                           bool]))
constant x_Tuple71 : (func(7, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5)  @(6));
                               @(0)]))
constant xs : (func(1, [(Foo.L  @(0)); (Foo.L  @(0))]))
constant Foo.C#rpv : (func(1, [(Foo.L  @(0)); (Foo.L  @(0))]))
constant papp2 : (func(4, [(Pred  @(0)  @(1)); @(2); @(3); bool]))
constant x_Tuple32 : (func(3, [(Tuple  @(0)  @(1)  @(2)); @(1)]))
constant x_Tuple72 : (func(7, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5)  @(6));
                               @(1)]))
constant x_Tuple63 : (func(6, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5));
                               @(2)]))
constant x_Tuple51 : (func(5, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4));
                               @(0)]))
constant len : (func(2, [(@(0)  @(1)); int]))
constant xsListSelector : (func(1, [[@(0)]; [@(0)]]))
constant null : (func(1, [[@(0)]; bool]))
constant x_Tuple53 : (func(5, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4));
                               @(2)]))
constant x_Tuple22 : (func(2, [(Tuple  @(0)  @(1)); @(1)]))
constant fromJust : (func(1, [(Data.Maybe.Maybe  @(0)); @(0)]))
constant snd : (func(2, [(Tuple  @(0)  @(1)); @(1)]))
constant x_Tuple62 : (func(6, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5));
                               @(1)]))
constant x_Tuple55 : (func(5, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4));
                               @(4)]))
constant papp3 : (func(6, [(Pred  @(0)  @(1)  @(2));
                           @(3);
                           @(4);
                           @(5);
                           bool]))
constant x_Tuple74 : (func(7, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5)  @(6));
                               @(3)]))
constant cmp : (func(0, [GHC.Types.Ordering; GHC.Types.Ordering]))
constant papp1 : (func(1, [(Pred  @(0)); @(0); bool]))
constant isJust : (func(1, [(Data.Maybe.Maybe  @(0)); bool]))
constant x_Tuple42 : (func(4, [(Tuple  @(0)  @(1)  @(2)  @(3));
                               @(1)]))
constant x_Tuple21 : (func(2, [(Tuple  @(0)  @(1)); @(0)]))
constant x_Tuple61 : (func(6, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5));
                               @(0)]))
constant x_Tuple66 : (func(6, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5));
                               @(5)]))
constant x_Tuple77 : (func(7, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5)  @(6));
                               @(6)]))


constant Foo.C#rpv : (func(1, [(Foo.L  @(0)); (Foo.L  @(0))]))


bind 0 GHC.Types.EQ#6U : {VV#130 : GHC.Types.Ordering | [(VV#130 = GHC.Types.EQ#6U)]}
bind 1 GHC.Types.LT#6S : {VV#131 : GHC.Types.Ordering | [(VV#131 = GHC.Types.LT#6S)]}
bind 2 GHC.Types.GT#6W : {VV#132 : GHC.Types.Ordering | [(VV#132 = GHC.Types.GT#6W)]}
bind 3 fix#GHC.Types.#91##93##35#6m : {VV : func(1, [[@(0)]]) | []}
bind 4 Data.Maybe.Nothing#r19 : {VV : func(1, [(Data.Maybe.Maybe  @(0))]) | []}
bind 5 GHC.Types.EQ#6U : {VV#156 : GHC.Types.Ordering | [(cmp([VV#156]) = GHC.Types.EQ#6U)]}
bind 6 GHC.Types.LT#6S : {VV#157 : GHC.Types.Ordering | [(cmp([VV#157]) = GHC.Types.LT#6S)]}
bind 7 GHC.Types.GT#6W : {VV#158 : GHC.Types.Ordering | [(cmp([VV#158]) = GHC.Types.GT#6W)]}
bind 8 x#aKb : {VV : b_aKy | []}
bind 9 lq_anf__dKI : {lq_tmp_x_190 : (Foo.L  a_aKz) | []}
bind 10 VV#245 : {VV#245 : (Foo.L  a_aKz) | [$k__230[VV#229:=VV#245][lq_tmp_x_204:=lq_anf__dKH][lq_tmp_x_205:=lq_anf__dKI][lq_tmp_x_233:=VV#245]]}
bind 11 VV#245 : {VV#245 : (Foo.L  a_aKz) | [$k__230[VV#229:=VV#245][lq_tmp_x_204:=lq_anf__dKH][lq_tmp_x_205:=lq_anf__dKI][lq_tmp_x_233:=VV#245]]}
bind 12 VV#220 : {VV#220 : a_aKz | [$k__221[VV#229:=VV#245][lq_tmp_x_204:=lq_anf__dKH][lq_tmp_x_205:=lq_anf__dKI][lq_tmp_x_233:=VV#245]]}
bind 13 VV#249 : {VV#249 : (Foo.L  a_aKz) | [$k__227[VV#226:=VV#249][lq_tmp_x_204:=lq_anf__dKH][lq_tmp_x_205:=lq_anf__dKI][lq_tmp_x_232:=VV#249]]}
bind 14 VV#249 : {VV#249 : (Foo.L  a_aKz) | [$k__227[VV#226:=VV#249][lq_tmp_x_204:=lq_anf__dKH][lq_tmp_x_205:=lq_anf__dKI][lq_tmp_x_232:=VV#249]]}
bind 15 VV#223 : {VV#223 : a_aKz | [$k__224[VV#226:=VV#249][lq_tmp_x_204:=lq_anf__dKH][lq_tmp_x_205:=lq_anf__dKI][lq_tmp_x_232:=VV#249]]}
bind 16 VV#253 : {VV#253 : (Foo.L  a_aKz) | [(VV#253 = lq_anf__dKI)]}
bind 17 VV#253 : {VV#253 : (Foo.L  a_aKz) | [(VV#253 = lq_anf__dKI)]}
bind 18 VV#196 : {VV#196 : a_aKz | [$k__197[lq_tmp_x_192:=x#aKb][lq_tmp_x_190:=VV#253][lq_tmp_x_244:=VV#253]]}
bind 19 VV#257 : {VV#257 : (Foo.L  a_aKz) | []}
bind 20 VV#257 : {VV#257 : (Foo.L  a_aKz) | []}
bind 21 VV#196 : {VV#196 : a_aKz | []}
bind 22 VV#262 : {VV#262 : (Foo.L  a_aKz) | [$k__216[VV#215:=VV#262][lq_tmp_x_219:=VV#262]]}
bind 23 VV#262 : {VV#262 : (Foo.L  a_aKz) | [$k__216[VV#215:=VV#262][lq_tmp_x_219:=VV#262]]}
bind 24 VV#206 : {VV#206 : a_aKz | [$k__207[VV#215:=VV#262][lq_tmp_x_219:=VV#262]]}
bind 25 VV#266 : {VV#266 : (Foo.L  a_aKz) | [$k__213[VV#212:=VV#266][lq_tmp_x_218:=VV#266]]}
bind 26 VV#266 : {VV#266 : (Foo.L  a_aKz) | [$k__213[VV#212:=VV#266][lq_tmp_x_218:=VV#266]]}
bind 27 VV#209 : {VV#209 : a_aKz | [$k__210[VV#212:=VV#266][lq_tmp_x_218:=VV#266]]}
bind 28 lq_tmp_x_203 : {lq_tmp_x_219 : (Foo.L  a_aKz) | [$k__216[VV#215:=lq_tmp_x_219]]}
bind 29 VV#271 : {VV#271 : (Foo.L  a_aKz) | [(xs([VV#271]) = lq_tmp_x_203)]}
bind 30 VV#271 : {VV#271 : (Foo.L  a_aKz) | [(xs([VV#271]) = lq_tmp_x_203)]}
bind 31 VV#172 : {VV#172 : a_aKz | [$k__173[lq_tmp_x_169:=VV#271][lq_tmp_x_171:=lq_tmp_x_203][lq_tmp_x_241:=lq_tmp_x_203][lq_tmp_x_239:=VV#271]]}
bind 32 VV#275 : {VV#275 : (Foo.L  a_aKz) | [$k__185[VV#184:=VV#275][lq_tmp_x_168:=VV#275][lq_tmp_x_171:=lq_tmp_x_203][lq_tmp_x_241:=lq_tmp_x_203][lq_tmp_x_238:=VV#275]]}
bind 33 VV#275 : {VV#275 : (Foo.L  a_aKz) | [$k__185[VV#184:=VV#275][lq_tmp_x_168:=VV#275][lq_tmp_x_171:=lq_tmp_x_203][lq_tmp_x_241:=lq_tmp_x_203][lq_tmp_x_238:=VV#275]]}
bind 34 VV#172 : {VV#172 : a_aKz | [$k__176[VV#175:=VV#172][lq_tmp_x_168:=VV#275][lq_tmp_x_171:=lq_tmp_x_203][lq_tmp_x_241:=lq_tmp_x_203][lq_tmp_x_238:=VV#275]]}
bind 35 VV : {VV : b_aKy | [(VV = x#aKb)]}
bind 36 VV#229 : {VV#229 : (Foo.L  a_aKz) | [$k__230]}
bind 37 VV#226 : {VV#226 : (Foo.L  a_aKz) | [$k__227]}
bind 38 VV#215 : {VV#215 : (Foo.L  a_aKz) | [$k__216]}
bind 39 VV#212 : {VV#212 : (Foo.L  a_aKz) | [$k__213]}
bind 40 VV#184 : {VV#184 : (Foo.L  a_aKz) | [$k__185]}
bind 41 VV#181 : {VV#181 : (Foo.L  a_aKz) | [$k__182]}




constraint:
  env [0; 16; 1; 2; 3; 4; 5; 6; 7; 8; 9]
  grd true
  lhs {VV#F1 : (Foo.L  a_aKz) | [(VV#F1 = lq_anf__dKI)]}
  rhs {VV#F1 : (Foo.L  a_aKz) | [$k__216[VV#215:=VV#F1][lq_tmp_x_204:=lq_anf__dKH][lq_tmp_x_219:=VV#F1][VV#253:=VV#F1][VV#F:=VV#F1]]}
  id 1 tag [1]
  // META constraint id 1 : absref-crash.hs:9:13-17


constraint:
  env [0; 1; 17; 2; 18; 3; 4; 5; 6; 7; 8; 9]
  grd true
  lhs {VV#F2 : a_aKz | [$k__197[lq_tmp_x_192:=x#aKb][lq_tmp_x_190:=VV#253][lq_tmp_x_244:=VV#253][VV#196:=VV#F2][VV#F:=VV#F2]]}
  rhs {VV#F2 : a_aKz | [$k__207[VV#215:=VV#253][lq_tmp_x_204:=lq_anf__dKH][lq_tmp_x_219:=VV#253][VV#206:=VV#F2][VV#F:=VV#F2]]}
  id 2 tag [1]
  // META constraint id 2 : absref-crash.hs:9:13-17


constraint:
  env [0; 1; 17; 2; 3; 19; 4; 5; 6; 7; 8; 9]
  grd true
  lhs {VV#F3 : (Foo.L  a_aKz) | []}
  rhs {VV#F3 : (Foo.L  a_aKz) | [$k__213[VV#212:=VV#F3][lq_tmp_x_204:=lq_anf__dKH][lq_tmp_x_218:=VV#F3][VV#257:=VV#F3][VV#F:=VV#F3]]}
  id 3 tag [1]
  // META constraint id 3 : absref-crash.hs:9:13-17


constraint:
  env [0; 1; 17; 2; 3; 4; 20; 5; 21; 6; 7; 8; 9]
  grd true
  lhs {VV#F4 : a_aKz | []}
  rhs {VV#F4 : a_aKz | [$k__210[VV#212:=VV#257][lq_tmp_x_204:=lq_anf__dKH][lq_tmp_x_218:=VV#257][VV#209:=VV#F4][VV#F:=VV#F4]]}
  id 4 tag [1]
  // META constraint id 4 : absref-crash.hs:9:13-17


constraint:
  env [0; 1; 2; 3; 4; 5; 6; 7; 23; 8; 24; 9]
  grd true
  lhs {VV#F5 : a_aKz | [$k__207[VV#215:=VV#262][lq_tmp_x_219:=VV#262][VV#206:=VV#F5][VV#F:=VV#F5]]}
  rhs {VV#F5 : a_aKz | [$k__173[lq_tmp_x_167:=VV#262][lq_tmp_x_236:=VV#262][VV#172:=VV#F5][VV#F:=VV#F5]]}
  id 5 tag [1]
  // META constraint id 5 : absref-crash.hs:9:9


constraint:
  env [0; 1; 2; 3; 4; 5; 6; 7; 23; 8; 9; 25]
  grd true
  lhs {VV#F6 : (Foo.L  a_aKz) | [$k__213[VV#212:=VV#F6][lq_tmp_x_218:=VV#F6][VV#266:=VV#F6][VV#F:=VV#F6]]}
  rhs {VV#F6 : (Foo.L  a_aKz) | [$k__185[VV#184:=VV#F6][lq_tmp_x_166:=VV#F6][lq_tmp_x_235:=VV#F6][VV#266:=VV#F6][VV#F:=VV#F6]]}
  id 6 tag [1]
  // META constraint id 6 : absref-crash.hs:9:9


constraint:
  env [0; 1; 2; 3; 4; 5; 6; 7; 23; 8; 9; 26; 27]
  grd true
  lhs {VV#F7 : a_aKz | [$k__210[VV#212:=VV#266][lq_tmp_x_218:=VV#266][VV#209:=VV#F7][VV#F:=VV#F7]]}
  rhs {VV#F7 : a_aKz | [$k__176[VV#175:=VV#F7][lq_tmp_x_166:=VV#266][lq_tmp_x_235:=VV#266][VV#172:=VV#F7][VV#F:=VV#F7]]}
  id 7 tag [1]
  // META constraint id 7 : absref-crash.hs:9:9


constraint:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 28; 29]
  grd true
  lhs {VV#F8 : (Foo.L  a_aKz) | [(xs([VV#F8]) = lq_tmp_x_203)]}
  rhs {VV#F8 : (Foo.L  a_aKz) | [$k__230[VV#229:=VV#F8][lq_tmp_x_233:=VV#F8][VV#271:=VV#F8][VV#F:=VV#F8]]}
  id 8 tag [1]
  // META constraint id 8 : absref-crash.hs:9:9


constraint:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 28; 30; 31]
  grd true
  lhs {VV#F9 : a_aKz | [$k__173[lq_tmp_x_169:=VV#271][lq_tmp_x_171:=lq_tmp_x_203][lq_tmp_x_241:=lq_tmp_x_203][lq_tmp_x_239:=VV#271][VV#172:=VV#F9][VV#F:=VV#F9]]}
  rhs {VV#F9 : a_aKz | [$k__221[VV#229:=VV#271][lq_tmp_x_233:=VV#271][VV#220:=VV#F9][VV#F:=VV#F9]]}
  id 9 tag [1]
  // META constraint id 9 : absref-crash.hs:9:9


constraint:
  env [0; 32; 1; 2; 3; 4; 5; 6; 7; 8; 9; 28; 30]
  grd true
  lhs {VV#F10 : (Foo.L  a_aKz) | [$k__185[VV#184:=VV#F10][lq_tmp_x_168:=VV#F10][lq_tmp_x_171:=lq_tmp_x_203][lq_tmp_x_241:=lq_tmp_x_203][lq_tmp_x_238:=VV#F10][VV#275:=VV#F10][VV#F:=VV#F10]]}
  rhs {VV#F10 : (Foo.L  a_aKz) | [$k__227[VV#226:=VV#F10][lq_tmp_x_232:=VV#F10][VV#275:=VV#F10][VV#F:=VV#F10]]}
  id 10 tag [1]
  // META constraint id 10 : absref-crash.hs:9:9


constraint:
  env [0; 1; 33; 2; 34; 3; 4; 5; 6; 7; 8; 9; 28; 30]
  grd true
  lhs {VV#F11 : a_aKz | [$k__176[VV#175:=VV#F11][lq_tmp_x_168:=VV#275][lq_tmp_x_171:=lq_tmp_x_203][lq_tmp_x_241:=lq_tmp_x_203][lq_tmp_x_238:=VV#275][VV#172:=VV#F11][VV#F:=VV#F11]]}
  rhs {VV#F11 : a_aKz | [$k__224[VV#226:=VV#275][lq_tmp_x_232:=VV#275][VV#223:=VV#F11][VV#F:=VV#F11]]}
  id 11 tag [1]
  // META constraint id 11 : absref-crash.hs:9:9


constraint:
  env [0; 1; 2; 3; 35; 4; 5; 6; 7; 8]
  grd true
  lhs {VV#F12 : b_aKy | [(VV#F12 = x#aKb)]}
  rhs {VV#F12 : b_aKy | [$k__194[VV#193:=VV#F12][VV#F:=VV#F12]]}
  id 12 tag [1]
  // META constraint id 12 : absref-crash.hs:9:17




wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9]
  reft {VV#229 : (Foo.L  a_aKz) | [$k__230]}
  
  // META wf  : absref-crash.hs:9:11


wf:
  env [0; 1; 2; 3; 4; 36; 5; 6; 7; 8; 9]
  reft {VV#220 : a_aKz | [$k__221]}
  
  // META wf  : absref-crash.hs:9:11


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9]
  reft {VV#226 : (Foo.L  a_aKz) | [$k__227]}
  
  // META wf  : absref-crash.hs:9:11


wf:
  env [0; 1; 2; 3; 4; 5; 37; 6; 7; 8; 9]
  reft {VV#223 : a_aKz | [$k__224]}
  
  // META wf  : absref-crash.hs:9:11


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9]
  reft {VV#215 : (Foo.L  a_aKz) | [$k__216]}
  
  // META wf  : absref-crash.hs:9:11


wf:
  env [0; 1; 2; 3; 4; 5; 6; 38; 7; 8; 9]
  reft {VV#206 : a_aKz | [$k__207]}
  
  // META wf  : absref-crash.hs:9:11


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9]
  reft {VV#212 : (Foo.L  a_aKz) | [$k__213]}
  
  // META wf  : absref-crash.hs:9:11


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 39; 8; 9]
  reft {VV#209 : a_aKz | [$k__210]}
  
  // META wf  : absref-crash.hs:9:11


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8]
  reft {VV#196 : a_aKz | [$k__197]}
  
  // META wf  : absref-crash.hs:9:13-15


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8]
  reft {VV#193 : b_aKy | [$k__194]}
  
  // META wf  : absref-crash.hs:9:13-15


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8]
  reft {VV#184 : (Foo.L  a_aKz) | [$k__185]}
  
  // META wf  : absref-crash.hs:9:1-3


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 40]
  reft {VV#175 : a_aKz | [$k__176]}
  
  // META wf  : absref-crash.hs:9:1-3


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8]
  reft {VV#181 : (Foo.L  a_aKz) | [$k__182]}
  
  // META wf  : absref-crash.hs:9:1-3


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 41]
  reft {VV#178 : a_aKz | [$k__179]}
  
  // META wf  : absref-crash.hs:9:1-3


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8]
  reft {VV#172 : a_aKz | [$k__173]}
  
  // META wf  : absref-crash.hs:9:1-3







