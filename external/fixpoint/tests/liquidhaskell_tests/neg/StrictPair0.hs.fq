qualif Fst(v : @(1), fix##126#Y : @(0)): (v = fst([fix##126#Y])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.spec" (line 29, column 8)
qualif Snd(v : @(1), fix##126#Y : @(0)): (v = snd([fix##126#Y])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.spec" (line 30, column 8)
qualif Auto(VV : int, fix##126#A0 : (Tuple  a_aLu  int)): (VV <= tsnd([fix##126#A0])) // "StrictPair0.hs" (line 13, column 1)
qualif IsEmp(v : GHC.Types.Bool, fix##126#Xs : [@(0)]): ((? Prop([v])) <=> (len([fix##126#Xs]) > 0)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 13, column 8)
qualif IsEmp(v : GHC.Types.Bool, fix##126#Xs : [@(0)]): ((? Prop([v])) <=> (len([fix##126#Xs]) = 0)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 14, column 8)
qualif ListZ(v : [@(0)]): (len([v]) = 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 16, column 8)
qualif ListZ(v : [@(0)]): (len([v]) >= 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 17, column 8)
qualif ListZ(v : [@(0)]): (len([v]) > 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 18, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) = len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 20, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) >= len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 21, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) > len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 22, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) <= len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 23, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) < len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 24, column 8)
qualif EqLen(v : int, fix##126#Xs : [@(0)]): (v = len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 26, column 8)
qualif LenEq(v : [@(0)], fix##126#X : int): (fix##126#X = len([v])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 27, column 8)
qualif LenDiff(v : [@(0)], fix##126#X : int): (len([v]) = (fix##126#X + 1)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 28, column 8)
qualif LenDiff(v : [@(0)], fix##126#X : int): (len([v]) = (fix##126#X - 1)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 29, column 8)
qualif LenAcc(v : int, fix##126#Xs : [@(0)], fix##126#N : int): (v = (len([fix##126#Xs]) + fix##126#N)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 30, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 3, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 4, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 5, column 8)
qualif Bot(v : bool): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 6, column 8)
qualif Bot(v : int): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 7, column 8)
qualif CmpZ(v : @(0)): (v < 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 9, column 8)
qualif CmpZ(v : @(0)): (v <= 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 10, column 8)
qualif CmpZ(v : @(0)): (v > 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 11, column 8)
qualif CmpZ(v : @(0)): (v >= 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 12, column 8)
qualif CmpZ(v : @(0)): (v = 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 13, column 8)
qualif CmpZ(v : @(0)): (v != 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 14, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v < fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 16, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v <= fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 17, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v > fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 18, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v >= fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 19, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v = fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 20, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v != fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 21, column 8)
qualif One(v : int): (v = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 28, column 8)
qualif True(v : bool): (? v) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 29, column 8)
qualif False(v : bool): (~ ((? v))) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 30, column 8)
qualif True1(v : GHC.Types.Bool): (? Prop([v])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 31, column 8)
qualif False1(v : GHC.Types.Bool): (~ ((? Prop([v])))) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 32, column 8)
qualif Papp(v : @(0), fix##126#P : (Pred  @(0))): (? papp1([fix##126#P;
                                                            v])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 35, column 8)
qualif Papp2(v : @(1), fix##126#X : @(0), fix##126#P : (Pred  @(1)  @(0))): (? papp2([fix##126#P;
                                                                                      v;
                                                                                      fix##126#X])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 38, column 8)
qualif Papp3(v : @(2), fix##126#X : @(0), fix##126#Y : @(1), fix##126#P : (Pred  @(2)  @(0)  @(1))): (? papp3([fix##126#P;
                                                                                                               v;
                                                                                                               fix##126#X;
                                                                                                               fix##126#Y])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 41, column 8)

qualif Fst(v : @(1), fix##126#Y : @(0)): (v = fst([fix##126#Y])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.spec" (line 29, column 8)
qualif Snd(v : @(1), fix##126#Y : @(0)): (v = snd([fix##126#Y])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.spec" (line 30, column 8)
qualif Auto(VV : int, fix##126#A0 : (Tuple  a_aLu  int)): (VV <= tsnd([fix##126#A0])) // "StrictPair0.hs" (line 13, column 1)
qualif IsEmp(v : GHC.Types.Bool, fix##126#Xs : [@(0)]): ((? Prop([v])) <=> (len([fix##126#Xs]) > 0)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 13, column 8)
qualif IsEmp(v : GHC.Types.Bool, fix##126#Xs : [@(0)]): ((? Prop([v])) <=> (len([fix##126#Xs]) = 0)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 14, column 8)
qualif ListZ(v : [@(0)]): (len([v]) = 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 16, column 8)
qualif ListZ(v : [@(0)]): (len([v]) >= 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 17, column 8)
qualif ListZ(v : [@(0)]): (len([v]) > 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 18, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) = len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 20, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) >= len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 21, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) > len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 22, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) <= len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 23, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) < len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 24, column 8)
qualif EqLen(v : int, fix##126#Xs : [@(0)]): (v = len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 26, column 8)
qualif LenEq(v : [@(0)], fix##126#X : int): (fix##126#X = len([v])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 27, column 8)
qualif LenDiff(v : [@(0)], fix##126#X : int): (len([v]) = (fix##126#X + 1)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 28, column 8)
qualif LenDiff(v : [@(0)], fix##126#X : int): (len([v]) = (fix##126#X - 1)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 29, column 8)
qualif LenAcc(v : int, fix##126#Xs : [@(0)], fix##126#N : int): (v = (len([fix##126#Xs]) + fix##126#N)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 30, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 3, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 4, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 5, column 8)
qualif Bot(v : bool): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 6, column 8)
qualif Bot(v : int): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 7, column 8)
qualif CmpZ(v : @(0)): (v < 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 9, column 8)
qualif CmpZ(v : @(0)): (v <= 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 10, column 8)
qualif CmpZ(v : @(0)): (v > 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 11, column 8)
qualif CmpZ(v : @(0)): (v >= 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 12, column 8)
qualif CmpZ(v : @(0)): (v = 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 13, column 8)
qualif CmpZ(v : @(0)): (v != 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 14, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v < fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 16, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v <= fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 17, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v > fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 18, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v >= fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 19, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v = fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 20, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v != fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 21, column 8)
qualif One(v : int): (v = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 28, column 8)
qualif True(v : bool): (? v) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 29, column 8)
qualif False(v : bool): (~ ((? v))) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 30, column 8)
qualif True1(v : GHC.Types.Bool): (? Prop([v])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 31, column 8)
qualif False1(v : GHC.Types.Bool): (~ ((? Prop([v])))) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 32, column 8)
qualif Papp(v : @(0), fix##126#P : (Pred  @(0))): (? papp1([fix##126#P;
                                                            v])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 35, column 8)
qualif Papp2(v : @(1), fix##126#X : @(0), fix##126#P : (Pred  @(1)  @(0))): (? papp2([fix##126#P;
                                                                                      v;
                                                                                      fix##126#X])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 38, column 8)
qualif Papp3(v : @(2), fix##126#X : @(0), fix##126#Y : @(1), fix##126#P : (Pred  @(2)  @(0)  @(1))): (? papp3([fix##126#P;
                                                                                                               v;
                                                                                                               fix##126#X;
                                                                                                               fix##126#Y])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 41, column 8)




constant Prop : (func(0, [GHC.Types.Bool; bool]))
constant x_Tuple64 : (func(6, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5));
                               @(3)]))
constant x_Tuple54 : (func(5, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4));
                               @(3)]))
constant tsnd : (func(2, [(Tuple  @(0)  @(1)); @(1)]))
constant x_Tuple44 : (func(4, [(Tuple  @(0)  @(1)  @(2)  @(3));
                               @(3)]))
constant xListSelector : (func(1, [[@(0)]; @(0)]))
constant x_Tuple41 : (func(4, [(Tuple  @(0)  @(1)  @(2)  @(3));
                               @(0)]))
constant x_Tuple76 : (func(7, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5)  @(6));
                               @(5)]))
constant autolen : (func(1, [@(0); int]))
constant addrLen : (func(0, [int; int]))
constant x_Tuple65 : (func(6, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5));
                               @(4)]))
constant strLen : (func(0, [int; int]))
constant x_Tuple52 : (func(5, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4));
                               @(1)]))
constant x_Tuple75 : (func(7, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5)  @(6));
                               @(4)]))
constant GHC.Types.I##6c : (func(0, [int; int]))
constant x_Tuple33 : (func(3, [(Tuple  @(0)  @(1)  @(2)); @(2)]))
constant fst : (func(2, [(Tuple  @(0)  @(1)); @(0)]))
constant x_Tuple73 : (func(7, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5)  @(6));
                               @(2)]))
constant x_Tuple31 : (func(3, [(Tuple  @(0)  @(1)  @(2)); @(0)]))
constant x_Tuple43 : (func(4, [(Tuple  @(0)  @(1)  @(2)  @(3));
                               @(2)]))
constant papp4 : (func(8, [(Pred  @(0)  @(1)  @(2)  @(6));
                           @(3);
                           @(4);
                           @(5);
                           @(7);
                           bool]))
constant x_Tuple71 : (func(7, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5)  @(6));
                               @(0)]))
constant papp2 : (func(4, [(Pred  @(0)  @(1)); @(2); @(3); bool]))
constant x_Tuple32 : (func(3, [(Tuple  @(0)  @(1)  @(2)); @(1)]))
constant x_Tuple72 : (func(7, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5)  @(6));
                               @(1)]))
constant x_Tuple63 : (func(6, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5));
                               @(2)]))
constant x_Tuple51 : (func(5, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4));
                               @(0)]))
constant len : (func(2, [(@(0)  @(1)); int]))
constant xsListSelector : (func(1, [[@(0)]; [@(0)]]))
constant null : (func(1, [[@(0)]; bool]))
constant x_Tuple53 : (func(5, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4));
                               @(2)]))
constant x_Tuple22 : (func(2, [(Tuple  @(0)  @(1)); @(1)]))
constant fromJust : (func(1, [(Data.Maybe.Maybe  @(0)); @(0)]))
constant snd : (func(2, [(Tuple  @(0)  @(1)); @(1)]))
constant x_Tuple62 : (func(6, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5));
                               @(1)]))
constant x_Tuple55 : (func(5, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4));
                               @(4)]))
constant papp3 : (func(6, [(Pred  @(0)  @(1)  @(2));
                           @(3);
                           @(4);
                           @(5);
                           bool]))
constant fix#GHC.Tuple.#40##44##41##35#74 : (func(2, [@(0);
                                                      @(1);
                                                      (Tuple  @(0)  @(1))]))
constant x_Tuple74 : (func(7, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5)  @(6));
                               @(3)]))
constant cmp : (func(0, [GHC.Types.Ordering; GHC.Types.Ordering]))
constant papp1 : (func(1, [(Pred  @(0)); @(0); bool]))
constant isJust : (func(1, [(Data.Maybe.Maybe  @(0)); bool]))
constant x_Tuple42 : (func(4, [(Tuple  @(0)  @(1)  @(2)  @(3));
                               @(1)]))
constant x_Tuple21 : (func(2, [(Tuple  @(0)  @(1)); @(0)]))
constant x_Tuple61 : (func(6, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5));
                               @(0)]))
constant x_Tuple66 : (func(6, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5));
                               @(5)]))
constant x_Tuple77 : (func(7, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5)  @(6));
                               @(6)]))


constant fix#GHC.Tuple.#40##44##41##35#74 : (func(2, [@(0);
                                                      @(1);
                                                      (Tuple  @(0)  @(1))]))


bind 0 fix#GHC.Num.#36#fNumInt#35#rhy : {VV#127 : (GHC.Num.Num  int) | []}
bind 1 GHC.Types.EQ#6U : {VV#128 : GHC.Types.Ordering | [(VV#128 = GHC.Types.EQ#6U)]}
bind 2 GHC.Types.LT#6S : {VV#129 : GHC.Types.Ordering | [(VV#129 = GHC.Types.LT#6S)]}
bind 3 GHC.Types.GT#6W : {VV#130 : GHC.Types.Ordering | [(VV#130 = GHC.Types.GT#6W)]}
bind 4 fix#GHC.Types.#91##93##35#6m : {VV : func(1, [[@(0)]]) | []}
bind 5 Data.Maybe.Nothing#r19 : {VV : func(1, [(Data.Maybe.Maybe  @(0))]) | []}
bind 6 GHC.Types.EQ#6U : {VV#153 : GHC.Types.Ordering | [(cmp([VV#153]) = GHC.Types.EQ#6U)]}
bind 7 GHC.Types.LT#6S : {VV#154 : GHC.Types.Ordering | [(cmp([VV#154]) = GHC.Types.LT#6S)]}
bind 8 GHC.Types.GT#6W : {VV#155 : GHC.Types.Ordering | [(cmp([VV#155]) = GHC.Types.GT#6W)]}
bind 9 x#aLg : {VV : a_aLu | []}
bind 10 n#aLh : {VV#162 : int | []}
bind 11 lq_anf__dLI : {lq_tmp_x_164 : int | [(lq_tmp_x_164 = (1  :  int))]}
bind 12 m#aLi : {lq_tmp_x_177 : int | [(lq_tmp_x_177 = (n#aLh + lq_anf__dLI))]}
bind 13 lq_tmp_x_199 : {VV : a_aLu | []}
bind 14 lq_anf__dLJ : {lq_tmp_x_184 : (Tuple  a_aLu  int) | [(tsnd([lq_tmp_x_184]) = n#aLh);
                                                             (snd([lq_tmp_x_184]) = n#aLh);
                                                             (fst([lq_tmp_x_184]) = x#aLg);
                                                             (x_Tuple22([lq_tmp_x_184]) = n#aLh);
                                                             (x_Tuple21([lq_tmp_x_184]) = x#aLg)]}
bind 15 lq_tmp_x_233 : {VV#234 : (Tuple  a_aLu  int) | []}
bind 16 VV#241 : {VV#241 : (Tuple  (Tuple  a_aLu  int)  int) | [(tsnd([VV#241]) = m#aLi);
                                                                (snd([VV#241]) = m#aLi);
                                                                (fst([VV#241]) = lq_anf__dLJ);
                                                                (x_Tuple22([VV#241]) = m#aLi);
                                                                (x_Tuple21([VV#241]) = lq_anf__dLJ)]}
bind 17 VV#241 : {VV#241 : (Tuple  (Tuple  a_aLu  int)  int) | [(tsnd([VV#241]) = m#aLi);
                                                                (snd([VV#241]) = m#aLi);
                                                                (fst([VV#241]) = lq_anf__dLJ);
                                                                (x_Tuple22([VV#241]) = m#aLi);
                                                                (x_Tuple21([VV#241]) = lq_anf__dLJ)]}
bind 18 VV#244 : {VV#244 : (Tuple  a_aLu  int) | [$k__220[VV#219:=VV#244][lq_tmp_x_207:=lq_anf__dLJ][lq_tmp_x_208:=m#aLi][lq_tmp_x_204:=VV#241][lq_tmp_x_225:=VV#244]]}
bind 19 VV#244 : {VV#244 : (Tuple  a_aLu  int) | [$k__220[VV#219:=VV#244][lq_tmp_x_207:=lq_anf__dLJ][lq_tmp_x_208:=m#aLi][lq_tmp_x_204:=VV#241][lq_tmp_x_225:=VV#244]]}
bind 20 VV#209 : {VV#209 : a_aLu | [$k__210[VV#219:=VV#244][lq_tmp_x_207:=lq_anf__dLJ][lq_tmp_x_208:=m#aLi][lq_tmp_x_204:=VV#241][lq_tmp_x_225:=VV#244]]}
bind 21 VV#248 : {VV#248 : int | [$k__213[VV#212:=VV#248][VV#219:=VV#244][lq_tmp_x_207:=lq_anf__dLJ][lq_tmp_x_208:=m#aLi][lq_tmp_x_204:=VV#241][lq_tmp_x_225:=VV#244][lq_tmp_x_222:=VV#248]]}
bind 22 VV#248 : {VV#248 : int | [$k__213[VV#212:=VV#248][VV#219:=VV#244][lq_tmp_x_207:=lq_anf__dLJ][lq_tmp_x_208:=m#aLi][lq_tmp_x_204:=VV#241][lq_tmp_x_225:=VV#244][lq_tmp_x_222:=VV#248]]}
bind 23 fld_Tuple : {VV : a_aLu | []}
bind 24 VV#252 : {VV#252 : int | [$k__217[VV#216:=VV#252][lq_tmp_x_215:=fld_Tuple][lq_tmp_x_207:=lq_anf__dLJ][lq_tmp_x_208:=m#aLi][lq_tmp_x_204:=VV#241][lq_tmp_x_223:=fld_Tuple][lq_tmp_x_224:=VV#252]]}
bind 25 VV#252 : {VV#252 : int | [$k__217[VV#216:=VV#252][lq_tmp_x_215:=fld_Tuple][lq_tmp_x_207:=lq_anf__dLJ][lq_tmp_x_208:=m#aLi][lq_tmp_x_204:=VV#241][lq_tmp_x_223:=fld_Tuple][lq_tmp_x_224:=VV#252]]}
bind 26 VV#255 : {VV#255 : int | [$k__227[VV#226:=VV#255][lq_tmp_x_207:=lq_anf__dLJ][lq_tmp_x_208:=m#aLi][lq_tmp_x_204:=VV#241][lq_tmp_x_229:=VV#255]]}
bind 27 VV#255 : {VV#255 : int | [$k__227[VV#226:=VV#255][lq_tmp_x_207:=lq_anf__dLJ][lq_tmp_x_208:=m#aLi][lq_tmp_x_204:=VV#241][lq_tmp_x_229:=VV#255]]}
bind 28 z_1 : {VV#258 : (Tuple  a_aLu  int) | []}
bind 29 VV#259 : {VV#259 : int | [$k__231[lq_tmp_x_233:=z_1][VV#230:=VV#259][lq_tmp_x_207:=lq_anf__dLJ][lq_tmp_x_208:=m#aLi][lq_tmp_x_203:=z_1][lq_tmp_x_229:=VV#259]]}
bind 30 VV#259 : {VV#259 : int | [$k__231[lq_tmp_x_233:=z_1][VV#230:=VV#259][lq_tmp_x_207:=lq_anf__dLJ][lq_tmp_x_208:=m#aLi][lq_tmp_x_203:=z_1][lq_tmp_x_229:=VV#259]]}
bind 31 VV#262 : {VV#262 : int | [(VV#262 = m#aLi)]}
bind 32 VV#262 : {VV#262 : int | [(VV#262 = m#aLi)]}
bind 33 VV#265 : {VV#265 : (Tuple  a_aLu  int) | [(VV#265 = lq_anf__dLJ)]}
bind 34 VV#265 : {VV#265 : (Tuple  a_aLu  int) | [(VV#265 = lq_anf__dLJ)]}
bind 35 VV#189 : {VV#189 : a_aLu | [$k__190[lq_tmp_x_187:=x#aLg][lq_tmp_x_188:=n#aLh][lq_tmp_x_184:=VV#265][lq_tmp_x_238:=VV#265]]}
bind 36 VV#269 : {VV#269 : int | [$k__193[VV#192:=VV#269][lq_tmp_x_187:=x#aLg][lq_tmp_x_188:=n#aLh][lq_tmp_x_195:=VV#269][lq_tmp_x_184:=VV#265][lq_tmp_x_238:=VV#265][lq_tmp_x_235:=VV#269]]}
bind 37 VV#269 : {VV#269 : int | [$k__193[VV#192:=VV#269][lq_tmp_x_187:=x#aLg][lq_tmp_x_188:=n#aLh][lq_tmp_x_195:=VV#269][lq_tmp_x_184:=VV#265][lq_tmp_x_238:=VV#265][lq_tmp_x_235:=VV#269]]}
bind 38 lq_tmp_x_223 : {VV : a_aLu | []}
bind 39 VV#273 : {VV#273 : int | [$k__197[lq_tmp_x_199:=lq_tmp_x_223][VV#196:=VV#273][lq_tmp_x_187:=x#aLg][lq_tmp_x_188:=n#aLh][lq_tmp_x_195:=VV#273][lq_tmp_x_183:=lq_tmp_x_223][lq_tmp_x_236:=lq_tmp_x_223][lq_tmp_x_237:=VV#273]]}
bind 40 VV#273 : {VV#273 : int | [$k__197[lq_tmp_x_199:=lq_tmp_x_223][VV#196:=VV#273][lq_tmp_x_187:=x#aLg][lq_tmp_x_188:=n#aLh][lq_tmp_x_195:=VV#273][lq_tmp_x_183:=lq_tmp_x_223][lq_tmp_x_236:=lq_tmp_x_223][lq_tmp_x_237:=VV#273]]}
bind 41 VV#276 : {VV#276 : int | [(VV#276 = n#aLh)]}
bind 42 VV#276 : {VV#276 : int | [(VV#276 = n#aLh)]}
bind 43 VV : {VV : a_aLu | [(VV = x#aLg)]}
bind 44 VV#280 : {VV#280 : int | [(VV#280 = lq_anf__dLI)]}
bind 45 VV#280 : {VV#280 : int | [(VV#280 = lq_anf__dLI)]}
bind 46 VV#283 : {VV#283 : int | [(VV#283 = n#aLh)]}
bind 47 VV#283 : {VV#283 : int | [(VV#283 = n#aLh)]}
bind 48 VV#286 : {VV#286 : int | [(VV#286 = 1)]}
bind 49 VV#286 : {VV#286 : int | [(VV#286 = 1)]}
bind 50 VV#230 : {VV#230 : int | [$k__231]}
bind 51 VV#226 : {VV#226 : int | [$k__227]}
bind 52 VV#219 : {VV#219 : (Tuple  a_aLu  int) | [$k__220]}
bind 53 VV#212 : {VV#212 : int | [$k__213]}
bind 54 lq_tmp_x_215 : {VV : a_aLu | []}
bind 55 VV#216 : {VV#216 : int | [$k__217]}
bind 56 VV#196 : {VV#196 : int | [$k__197]}
bind 57 VV#192 : {VV#192 : int | [$k__193]}




constraint:
  env [0; 1; 17; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 28; 29; 14]
  grd true
  lhs {VV#F1 : int | [$k__231[lq_tmp_x_233:=z_1][VV#230:=VV#F1][lq_tmp_x_207:=lq_anf__dLJ][lq_tmp_x_208:=m#aLi][lq_tmp_x_203:=z_1][lq_tmp_x_229:=VV#F1][VV#259:=VV#F1][VV#F:=VV#F1]]}
  rhs {VV#F1 : int | [(VV#F1 <= tsnd([z_1]))]}
  id 1 tag [1]
  // META constraint id 1 : StrictPair0.hs:13:11-21


constraint:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 14; 31]
  grd true
  lhs {VV#F2 : int | [(VV#F2 = m#aLi)]}
  rhs {VV#F2 : int | [$k__227[VV#226:=VV#F2][lq_tmp_x_207:=lq_anf__dLJ][lq_tmp_x_229:=VV#F2][VV#262:=VV#F2][VV#F:=VV#F2]]}
  id 2 tag [1]
  // META constraint id 2 : StrictPair0.hs:13:20


constraint:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 14; 31]
  grd true
  lhs {VV#F3 : int | [(VV#F3 = m#aLi)]}
  rhs {VV#F3 : int | [$k__231[lq_tmp_x_233:=lq_anf__dLJ][VV#230:=VV#F3][lq_tmp_x_207:=lq_anf__dLJ][lq_tmp_x_229:=VV#F3][VV#262:=VV#F3][VV#F:=VV#F3]]}
  id 3 tag [1]
  // META constraint id 3 : StrictPair0.hs:13:20


constraint:
  env [0; 1; 33; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 14]
  grd true
  lhs {VV#F4 : (Tuple  a_aLu  int) | [(VV#F4 = lq_anf__dLJ)]}
  rhs {VV#F4 : (Tuple  a_aLu  int) | [$k__220[VV#219:=VV#F4][lq_tmp_x_225:=VV#F4][VV#265:=VV#F4][VV#F:=VV#F4]]}
  id 4 tag [1]
  // META constraint id 4 : StrictPair0.hs:13:12-17


constraint:
  env [0; 1; 2; 34; 3; 35; 4; 5; 6; 7; 8; 9; 10; 11; 12; 14]
  grd true
  lhs {VV#F5 : a_aLu | [$k__190[lq_tmp_x_187:=x#aLg][lq_tmp_x_188:=n#aLh][lq_tmp_x_184:=VV#265][lq_tmp_x_238:=VV#265][VV#189:=VV#F5][VV#F:=VV#F5]]}
  rhs {VV#F5 : a_aLu | [$k__210[VV#219:=VV#265][lq_tmp_x_225:=VV#265][VV#209:=VV#F5][VV#F:=VV#F5]]}
  id 5 tag [1]
  // META constraint id 5 : StrictPair0.hs:13:12-17


constraint:
  env [0; 1; 2; 34; 3; 4; 36; 5; 6; 7; 8; 9; 10; 11; 12; 14]
  grd true
  lhs {VV#F6 : int | [$k__193[VV#192:=VV#F6][lq_tmp_x_187:=x#aLg][lq_tmp_x_188:=n#aLh][lq_tmp_x_195:=VV#F6][lq_tmp_x_184:=VV#265][lq_tmp_x_238:=VV#265][lq_tmp_x_235:=VV#F6][VV#269:=VV#F6][VV#F:=VV#F6]]}
  rhs {VV#F6 : int | [$k__213[VV#212:=VV#F6][VV#219:=VV#265][lq_tmp_x_225:=VV#265][lq_tmp_x_222:=VV#F6][VV#269:=VV#F6][VV#F:=VV#F6]]}
  id 6 tag [1]
  // META constraint id 6 : StrictPair0.hs:13:12-17


constraint:
  env [0; 1; 2; 34; 3; 4; 5; 6; 38; 7; 39; 8; 9; 10; 11; 12; 14]
  grd true
  lhs {VV#F7 : int | [$k__197[lq_tmp_x_199:=lq_tmp_x_223][VV#196:=VV#F7][lq_tmp_x_187:=x#aLg][lq_tmp_x_188:=n#aLh][lq_tmp_x_195:=VV#F7][lq_tmp_x_183:=lq_tmp_x_223][lq_tmp_x_236:=lq_tmp_x_223][lq_tmp_x_237:=VV#F7][VV#273:=VV#F7][VV#F:=VV#F7]]}
  rhs {VV#F7 : int | [$k__217[VV#216:=VV#F7][lq_tmp_x_215:=lq_tmp_x_223][lq_tmp_x_224:=VV#F7][VV#273:=VV#F7][VV#F:=VV#F7]]}
  id 7 tag [1]
  // META constraint id 7 : StrictPair0.hs:13:12-17


constraint:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 41; 10; 11; 12]
  grd true
  lhs {VV#F8 : int | [(VV#F8 = n#aLh)]}
  rhs {VV#F8 : int | [$k__193[VV#192:=VV#F8][lq_tmp_x_187:=x#aLg][lq_tmp_x_195:=VV#F8][VV#276:=VV#F8][VV#F:=VV#F8]]}
  id 8 tag [1]
  // META constraint id 8 : StrictPair0.hs:13:16


constraint:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 41; 10; 11; 12]
  grd true
  lhs {VV#F9 : int | [(VV#F9 = n#aLh)]}
  rhs {VV#F9 : int | [$k__197[lq_tmp_x_199:=x#aLg][VV#196:=VV#F9][lq_tmp_x_187:=x#aLg][lq_tmp_x_195:=VV#F9][VV#276:=VV#F9][VV#F:=VV#F9]]}
  id 9 tag [1]
  // META constraint id 9 : StrictPair0.hs:13:16


constraint:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 43; 12]
  grd true
  lhs {VV#F10 : a_aLu | [(VV#F10 = x#aLg)]}
  rhs {VV#F10 : a_aLu | [$k__190[VV#189:=VV#F10][VV#F:=VV#F10]]}
  id 10 tag [1]
  // META constraint id 10 : StrictPair0.hs:13:13




wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 14; 15]
  reft {VV#230 : int | [$k__231]}
  
  // META wf  : StrictPair0.hs:13:11-21


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 14]
  reft {VV#226 : int | [$k__227]}
  
  // META wf  : StrictPair0.hs:13:11-21


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 14]
  reft {VV#219 : (Tuple  a_aLu  int) | [$k__220]}
  
  // META wf  : StrictPair0.hs:13:11-21


wf:
  env [0; 1; 2; 3; 4; 52; 5; 6; 7; 8; 9; 10; 11; 12; 14]
  reft {VV#209 : a_aLu | [$k__210]}
  
  // META wf  : StrictPair0.hs:13:11-21


wf:
  env [0; 1; 2; 3; 4; 52; 5; 6; 7; 8; 9; 10; 11; 12; 14]
  reft {VV#212 : int | [$k__213]}
  
  // META wf  : StrictPair0.hs:13:11-21


wf:
  env [0; 1; 2; 3; 4; 5; 6; 54; 7; 8; 9; 10; 11; 12; 14]
  reft {VV#216 : int | [$k__217]}
  
  // META wf  : StrictPair0.hs:13:11-21


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13]
  reft {VV#196 : int | [$k__197]}
  
  // META wf  : StrictPair0.hs:13:1-3


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12]
  reft {VV#192 : int | [$k__193]}
  
  // META wf  : StrictPair0.hs:13:1-3


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12]
  reft {VV#189 : a_aLu | [$k__190]}
  
  // META wf  : StrictPair0.hs:13:1-3







