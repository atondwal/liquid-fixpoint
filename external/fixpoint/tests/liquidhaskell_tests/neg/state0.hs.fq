qualif Fst(v : @(1), fix##126#Y : @(0)): (v = fst([fix##126#Y])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.spec" (line 29, column 8)
qualif Snd(v : @(1), fix##126#Y : @(0)): (v = snd([fix##126#Y])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.spec" (line 30, column 8)
qualif Auto(VV : int): (VV >= 0) // "state0.hs" (line 12, column 1)
qualif Auto(VV : int): (VV >= 0) // "state0.hs" (line 12, column 1)
qualif Auto(VV : int): (? papp1([p1;
                                 VV])) // "state0.hs" (line 4, column 13)
qualif Auto(VV : int): (? papp1([p2;
                                 VV])) // "state0.hs" (line 4, column 13)
qualif IsEmp(v : GHC.Types.Bool, fix##126#Xs : [@(0)]): ((? Prop([v])) <=> (len([fix##126#Xs]) > 0)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 13, column 8)
qualif IsEmp(v : GHC.Types.Bool, fix##126#Xs : [@(0)]): ((? Prop([v])) <=> (len([fix##126#Xs]) = 0)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 14, column 8)
qualif ListZ(v : [@(0)]): (len([v]) = 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 16, column 8)
qualif ListZ(v : [@(0)]): (len([v]) >= 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 17, column 8)
qualif ListZ(v : [@(0)]): (len([v]) > 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 18, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) = len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 20, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) >= len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 21, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) > len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 22, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) <= len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 23, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) < len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 24, column 8)
qualif EqLen(v : int, fix##126#Xs : [@(0)]): (v = len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 26, column 8)
qualif LenEq(v : [@(0)], fix##126#X : int): (fix##126#X = len([v])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 27, column 8)
qualif LenDiff(v : [@(0)], fix##126#X : int): (len([v]) = (fix##126#X + 1)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 28, column 8)
qualif LenDiff(v : [@(0)], fix##126#X : int): (len([v]) = (fix##126#X - 1)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 29, column 8)
qualif LenAcc(v : int, fix##126#Xs : [@(0)], fix##126#N : int): (v = (len([fix##126#Xs]) + fix##126#N)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 30, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 3, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 4, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 5, column 8)
qualif Bot(v : bool): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 6, column 8)
qualif Bot(v : int): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 7, column 8)
qualif CmpZ(v : @(0)): (v < 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 9, column 8)
qualif CmpZ(v : @(0)): (v <= 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 10, column 8)
qualif CmpZ(v : @(0)): (v > 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 11, column 8)
qualif CmpZ(v : @(0)): (v >= 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 12, column 8)
qualif CmpZ(v : @(0)): (v = 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 13, column 8)
qualif CmpZ(v : @(0)): (v != 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 14, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v < fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 16, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v <= fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 17, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v > fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 18, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v >= fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 19, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v = fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 20, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v != fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 21, column 8)
qualif One(v : int): (v = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 28, column 8)
qualif True(v : bool): (? v) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 29, column 8)
qualif False(v : bool): (~ ((? v))) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 30, column 8)
qualif True1(v : GHC.Types.Bool): (? Prop([v])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 31, column 8)
qualif False1(v : GHC.Types.Bool): (~ ((? Prop([v])))) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 32, column 8)
qualif Papp(v : @(0), fix##126#P : (Pred  @(0))): (? papp1([fix##126#P;
                                                            v])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 35, column 8)
qualif Papp2(v : @(1), fix##126#X : @(0), fix##126#P : (Pred  @(1)  @(0))): (? papp2([fix##126#P;
                                                                                      v;
                                                                                      fix##126#X])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 38, column 8)
qualif Papp3(v : @(2), fix##126#X : @(0), fix##126#Y : @(1), fix##126#P : (Pred  @(2)  @(0)  @(1))): (? papp3([fix##126#P;
                                                                                                               v;
                                                                                                               fix##126#X;
                                                                                                               fix##126#Y])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 41, column 8)

qualif Fst(v : @(1), fix##126#Y : @(0)): (v = fst([fix##126#Y])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.spec" (line 29, column 8)
qualif Snd(v : @(1), fix##126#Y : @(0)): (v = snd([fix##126#Y])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.spec" (line 30, column 8)
qualif Auto(VV : int): (VV >= 0) // "state0.hs" (line 12, column 1)
qualif Auto(VV : int): (VV >= 0) // "state0.hs" (line 12, column 1)
qualif Auto(VV : int): (? papp1([p1;
                                 VV])) // "state0.hs" (line 4, column 13)
qualif Auto(VV : int): (? papp1([p2;
                                 VV])) // "state0.hs" (line 4, column 13)
qualif IsEmp(v : GHC.Types.Bool, fix##126#Xs : [@(0)]): ((? Prop([v])) <=> (len([fix##126#Xs]) > 0)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 13, column 8)
qualif IsEmp(v : GHC.Types.Bool, fix##126#Xs : [@(0)]): ((? Prop([v])) <=> (len([fix##126#Xs]) = 0)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 14, column 8)
qualif ListZ(v : [@(0)]): (len([v]) = 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 16, column 8)
qualif ListZ(v : [@(0)]): (len([v]) >= 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 17, column 8)
qualif ListZ(v : [@(0)]): (len([v]) > 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 18, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) = len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 20, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) >= len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 21, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) > len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 22, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) <= len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 23, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) < len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 24, column 8)
qualif EqLen(v : int, fix##126#Xs : [@(0)]): (v = len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 26, column 8)
qualif LenEq(v : [@(0)], fix##126#X : int): (fix##126#X = len([v])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 27, column 8)
qualif LenDiff(v : [@(0)], fix##126#X : int): (len([v]) = (fix##126#X + 1)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 28, column 8)
qualif LenDiff(v : [@(0)], fix##126#X : int): (len([v]) = (fix##126#X - 1)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 29, column 8)
qualif LenAcc(v : int, fix##126#Xs : [@(0)], fix##126#N : int): (v = (len([fix##126#Xs]) + fix##126#N)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 30, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 3, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 4, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 5, column 8)
qualif Bot(v : bool): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 6, column 8)
qualif Bot(v : int): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 7, column 8)
qualif CmpZ(v : @(0)): (v < 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 9, column 8)
qualif CmpZ(v : @(0)): (v <= 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 10, column 8)
qualif CmpZ(v : @(0)): (v > 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 11, column 8)
qualif CmpZ(v : @(0)): (v >= 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 12, column 8)
qualif CmpZ(v : @(0)): (v = 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 13, column 8)
qualif CmpZ(v : @(0)): (v != 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 14, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v < fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 16, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v <= fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 17, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v > fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 18, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v >= fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 19, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v = fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 20, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v != fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 21, column 8)
qualif One(v : int): (v = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 28, column 8)
qualif True(v : bool): (? v) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 29, column 8)
qualif False(v : bool): (~ ((? v))) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 30, column 8)
qualif True1(v : GHC.Types.Bool): (? Prop([v])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 31, column 8)
qualif False1(v : GHC.Types.Bool): (~ ((? Prop([v])))) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 32, column 8)
qualif Papp(v : @(0), fix##126#P : (Pred  @(0))): (? papp1([fix##126#P;
                                                            v])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 35, column 8)
qualif Papp2(v : @(1), fix##126#X : @(0), fix##126#P : (Pred  @(1)  @(0))): (? papp2([fix##126#P;
                                                                                      v;
                                                                                      fix##126#X])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 38, column 8)
qualif Papp3(v : @(2), fix##126#X : @(0), fix##126#Y : @(1), fix##126#P : (Pred  @(2)  @(0)  @(1))): (? papp3([fix##126#P;
                                                                                                               v;
                                                                                                               fix##126#X;
                                                                                                               fix##126#Y])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 41, column 8)




constant Prop : (func(0, [GHC.Types.Bool; bool]))
constant x_Tuple64 : (func(6, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5));
                               @(3)]))
constant x_Tuple54 : (func(5, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4));
                               @(3)]))
constant x_Tuple44 : (func(4, [(Tuple  @(0)  @(1)  @(2)  @(3));
                               @(3)]))
constant xListSelector : (func(1, [[@(0)]; @(0)]))
constant x_Tuple41 : (func(4, [(Tuple  @(0)  @(1)  @(2)  @(3));
                               @(0)]))
constant x_Tuple76 : (func(7, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5)  @(6));
                               @(5)]))
constant autolen : (func(1, [@(0); int]))
constant addrLen : (func(0, [int; int]))
constant x_Tuple65 : (func(6, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5));
                               @(4)]))
constant strLen : (func(0, [int; int]))
constant x_Tuple52 : (func(5, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4));
                               @(1)]))
constant x_Tuple75 : (func(7, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5)  @(6));
                               @(4)]))
constant GHC.Types.I##6c : (func(0, [int; int]))
constant x_Tuple33 : (func(3, [(Tuple  @(0)  @(1)  @(2)); @(2)]))
constant fst : (func(2, [(Tuple  @(0)  @(1)); @(0)]))
constant x_Tuple73 : (func(7, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5)  @(6));
                               @(2)]))
constant x_Tuple31 : (func(3, [(Tuple  @(0)  @(1)  @(2)); @(0)]))
constant x_Tuple43 : (func(4, [(Tuple  @(0)  @(1)  @(2)  @(3));
                               @(2)]))
constant papp4 : (func(8, [(Pred  @(0)  @(1)  @(2)  @(6));
                           @(3);
                           @(4);
                           @(5);
                           @(7);
                           bool]))
constant x_Tuple71 : (func(7, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5)  @(6));
                               @(0)]))
constant papp2 : (func(4, [(Pred  @(0)  @(1)); @(2); @(3); bool]))
constant x_Tuple32 : (func(3, [(Tuple  @(0)  @(1)  @(2)); @(1)]))
constant x_Tuple72 : (func(7, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5)  @(6));
                               @(1)]))
constant x_Tuple63 : (func(6, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5));
                               @(2)]))
constant x_Tuple51 : (func(5, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4));
                               @(0)]))
constant len : (func(2, [(@(0)  @(1)); int]))
constant xsListSelector : (func(1, [[@(0)]; [@(0)]]))
constant null : (func(1, [[@(0)]; bool]))
constant x_Tuple53 : (func(5, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4));
                               @(2)]))
constant x_Tuple22 : (func(2, [(Tuple  @(0)  @(1)); @(1)]))
constant fromJust : (func(1, [(Data.Maybe.Maybe  @(0)); @(0)]))
constant snd : (func(2, [(Tuple  @(0)  @(1)); @(1)]))
constant x_Tuple62 : (func(6, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5));
                               @(1)]))
constant x_Tuple55 : (func(5, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4));
                               @(4)]))
constant papp3 : (func(6, [(Pred  @(0)  @(1)  @(2));
                           @(3);
                           @(4);
                           @(5);
                           bool]))
constant fix#GHC.Tuple.#40##44##41##35#74 : (func(2, [@(0);
                                                      @(1);
                                                      (Tuple  @(0)  @(1))]))
constant x_Tuple74 : (func(7, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5)  @(6));
                               @(3)]))
constant cmp : (func(0, [GHC.Types.Ordering; GHC.Types.Ordering]))
constant papp1 : (func(1, [(Pred  @(0)); @(0); bool]))
constant isJust : (func(1, [(Data.Maybe.Maybe  @(0)); bool]))
constant x_Tuple42 : (func(4, [(Tuple  @(0)  @(1)  @(2)  @(3));
                               @(1)]))
constant x_Tuple21 : (func(2, [(Tuple  @(0)  @(1)); @(0)]))
constant x_Tuple61 : (func(6, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5));
                               @(0)]))
constant x_Tuple66 : (func(6, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5));
                               @(5)]))
constant x_Tuple77 : (func(7, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5)  @(6));
                               @(6)]))


constant fix#GHC.Tuple.#40##44##41##35#74 : (func(2, [@(0);
                                                      @(1);
                                                      (Tuple  @(0)  @(1))]))
constant StateMonad.S#rpv : (func(1, [func(0, [int;
                                               (Tuple  @(0)  int)]);
                                      (StateMonad.ST  @(0))]))


bind 0 fix#GHC.Num.#36#fNumInt#35#rhy : {VV#167 : (GHC.Num.Num  int) | []}
bind 1 GHC.Types.EQ#6U : {VV#169 : GHC.Types.Ordering | [(VV#169 = GHC.Types.EQ#6U)]}
bind 2 GHC.Types.LT#6S : {VV#170 : GHC.Types.Ordering | [(VV#170 = GHC.Types.LT#6S)]}
bind 3 GHC.Types.GT#6W : {VV#171 : GHC.Types.Ordering | [(VV#171 = GHC.Types.GT#6W)]}
bind 4 fix#GHC.Types.#91##93##35#6m : {VV : func(1, [[@(0)]]) | []}
bind 5 Data.Maybe.Nothing#r19 : {VV : func(1, [(Data.Maybe.Maybe  @(0))]) | []}
bind 6 GHC.Types.EQ#6U : {VV#195 : GHC.Types.Ordering | [(cmp([VV#195]) = GHC.Types.EQ#6U)]}
bind 7 GHC.Types.LT#6S : {VV#196 : GHC.Types.Ordering | [(cmp([VV#196]) = GHC.Types.LT#6S)]}
bind 8 GHC.Types.GT#6W : {VV#197 : GHC.Types.Ordering | [(cmp([VV#197]) = GHC.Types.GT#6W)]}
bind 9 n#aLg : {VV#225 : int | [$k__226]}
bind 10 lq_anf__dLG : {lq_tmp_x_243 : int | [(lq_tmp_x_243 = (1  :  int))]}
bind 11 lq_anf__dLH : {lq_tmp_x_256 : int | [(lq_tmp_x_256 = (n#aLg - lq_anf__dLG))]}
bind 12 lq_tmp_x_279 : {VV#280 : int | []}
bind 13 StateMonad.fresh#rpx : {VV#352 : (StateMonad.ST  int) | []}
bind 14 VV#353 : {VV#353 : (StateMonad.ST  int) | [$k__324[VV#323:=VV#353][lq_tmp_x_288:=lq_anf__dLF][lq_tmp_x_289:=lq_anf__dLI][lq_tmp_x_329:=VV#353]]}
bind 15 VV#353 : {VV#353 : (StateMonad.ST  int) | [$k__324[VV#323:=VV#353][lq_tmp_x_288:=lq_anf__dLF][lq_tmp_x_289:=lq_anf__dLI][lq_tmp_x_329:=VV#353]]}
bind 16 VV#356 : {VV#356 : int | [$k__315[VV#314:=VV#356][VV#323:=VV#353][lq_tmp_x_288:=lq_anf__dLF][lq_tmp_x_289:=lq_anf__dLI][lq_tmp_x_329:=VV#353][lq_tmp_x_326:=VV#356]]}
bind 17 VV#356 : {VV#356 : int | [$k__315[VV#314:=VV#356][VV#323:=VV#353][lq_tmp_x_288:=lq_anf__dLF][lq_tmp_x_289:=lq_anf__dLI][lq_tmp_x_329:=VV#353][lq_tmp_x_326:=VV#356]]}
bind 18 VV#359 : {VV#359 : int | [(VV#359 >= 0)]}
bind 19 VV#359 : {VV#359 : int | [(VV#359 >= 0)]}
bind 20 VV#362 : {VV#362 : int | [$k__321[VV#320:=VV#362][lq_tmp_x_288:=lq_anf__dLF][lq_tmp_x_289:=lq_anf__dLI][lq_tmp_x_328:=VV#362]]}
bind 21 VV#362 : {VV#362 : int | [$k__321[VV#320:=VV#362][lq_tmp_x_288:=lq_anf__dLF][lq_tmp_x_289:=lq_anf__dLI][lq_tmp_x_328:=VV#362]]}
bind 22 VV#366 : {VV#366 : int | [$k__292[VV#291:=VV#366][lq_tmp_x_288:=lq_anf__dLF][lq_tmp_x_307:=VV#366]]}
bind 23 VV#366 : {VV#366 : int | [$k__292[VV#291:=VV#366][lq_tmp_x_288:=lq_anf__dLF][lq_tmp_x_307:=VV#366]]}
bind 24 lq_tmp_x_290 : {lq_tmp_x_307 : int | [$k__292[VV#291:=lq_tmp_x_307][lq_tmp_x_288:=lq_anf__dLF]]}
bind 25 VV#370 : {VV#370 : (Tuple  int  int) | [$k__240[VV#239:=VV#370][n#aLg:=lq_tmp_x_290][lq_tmp_x_351:=lq_tmp_x_290][lq_tmp_x_349:=VV#370]]}
bind 26 VV#370 : {VV#370 : (Tuple  int  int) | [$k__240[VV#239:=VV#370][n#aLg:=lq_tmp_x_290][lq_tmp_x_351:=lq_tmp_x_290][lq_tmp_x_349:=VV#370]]}
bind 27 VV#373 : {VV#373 : int | [$k__230[VV#229:=VV#373][VV#239:=VV#370][n#aLg:=lq_tmp_x_290][lq_tmp_x_351:=lq_tmp_x_290][lq_tmp_x_349:=VV#370][lq_tmp_x_345:=VV#373]]}
bind 28 VV#373 : {VV#373 : int | [$k__230[VV#229:=VV#373][VV#239:=VV#370][n#aLg:=lq_tmp_x_290][lq_tmp_x_351:=lq_tmp_x_290][lq_tmp_x_349:=VV#370][lq_tmp_x_345:=VV#373]]}
bind 29 VV#376 : {VV#376 : int | [$k__233[VV#232:=VV#376][VV#239:=VV#370][n#aLg:=lq_tmp_x_290][lq_tmp_x_351:=lq_tmp_x_290][lq_tmp_x_349:=VV#370][lq_tmp_x_346:=VV#376]]}
bind 30 VV#376 : {VV#376 : int | [$k__233[VV#232:=VV#376][VV#239:=VV#370][n#aLg:=lq_tmp_x_290][lq_tmp_x_351:=lq_tmp_x_290][lq_tmp_x_349:=VV#370][lq_tmp_x_346:=VV#376]]}
bind 31 lq_tmp_x_310 : {VV#379 : int | []}
bind 32 VV#380 : {VV#380 : int | [$k__237[VV#236:=VV#380][lq_tmp_x_235:=lq_tmp_x_310][n#aLg:=lq_tmp_x_290][lq_tmp_x_351:=lq_tmp_x_290][lq_tmp_x_347:=lq_tmp_x_310][lq_tmp_x_348:=VV#380]]}
bind 33 VV#380 : {VV#380 : int | [$k__237[VV#236:=VV#380][lq_tmp_x_235:=lq_tmp_x_310][n#aLg:=lq_tmp_x_290][lq_tmp_x_351:=lq_tmp_x_290][lq_tmp_x_347:=lq_tmp_x_310][lq_tmp_x_348:=VV#380]]}
bind 34 VV#385 : {VV#385 : int | [$k__222[VV#221:=VV#385][lq_tmp_x_202:=VV#385][lq_tmp_x_330:=VV#385]]}
bind 35 VV#385 : {VV#385 : int | [$k__222[VV#221:=VV#385][lq_tmp_x_202:=VV#385][lq_tmp_x_330:=VV#385]]}
bind 36 lq_tmp_x_342 : {lq_tmp_x_330 : int | [$k__222[VV#221:=lq_tmp_x_330][lq_tmp_x_202:=lq_tmp_x_330]]}
bind 37 VV#389 : {VV#389 : (Tuple  int  int) | [$k__305[VV#304:=VV#389][lq_tmp_x_290:=lq_tmp_x_342][lq_tmp_x_312:=VV#389]]}
bind 38 VV#389 : {VV#389 : (Tuple  int  int) | [$k__305[VV#304:=VV#389][lq_tmp_x_290:=lq_tmp_x_342][lq_tmp_x_312:=VV#389]]}
bind 39 VV#392 : {VV#392 : int | [$k__295[VV#294:=VV#392][VV#304:=VV#389][lq_tmp_x_290:=lq_tmp_x_342][lq_tmp_x_312:=VV#389][lq_tmp_x_308:=VV#392]]}
bind 40 VV#392 : {VV#392 : int | [$k__295[VV#294:=VV#392][VV#304:=VV#389][lq_tmp_x_290:=lq_tmp_x_342][lq_tmp_x_312:=VV#389][lq_tmp_x_308:=VV#392]]}
bind 41 VV#395 : {VV#395 : int | [$k__298[VV#297:=VV#395][VV#304:=VV#389][lq_tmp_x_290:=lq_tmp_x_342][lq_tmp_x_312:=VV#389][lq_tmp_x_309:=VV#395]]}
bind 42 VV#395 : {VV#395 : int | [$k__298[VV#297:=VV#395][VV#304:=VV#389][lq_tmp_x_290:=lq_tmp_x_342][lq_tmp_x_312:=VV#389][lq_tmp_x_309:=VV#395]]}
bind 43 lq_tmp_x_333 : {VV#398 : int | []}
bind 44 VV#399 : {VV#399 : int | [$k__302[VV#301:=VV#399][lq_tmp_x_300:=lq_tmp_x_333][lq_tmp_x_290:=lq_tmp_x_342][lq_tmp_x_310:=lq_tmp_x_333][lq_tmp_x_311:=VV#399]]}
bind 45 VV#399 : {VV#399 : int | [$k__302[VV#301:=VV#399][lq_tmp_x_300:=lq_tmp_x_333][lq_tmp_x_290:=lq_tmp_x_342][lq_tmp_x_310:=lq_tmp_x_333][lq_tmp_x_311:=VV#399]]}
bind 46 VV#403 : {VV#403 : (StateMonad.ST  int) | []}
bind 47 VV#403 : {VV#403 : (StateMonad.ST  int) | []}
bind 48 VV#406 : {VV#406 : int | [$k__215[VV#214:=VV#406][lq_tmp_x_217:=VV#406][lq_tmp_x_210:=VV#403][lq_tmp_x_213:=lq_tmp_x_287][lq_tmp_x_343:=lq_tmp_x_287][lq_tmp_x_340:=VV#403][lq_tmp_x_337:=VV#406]]}
bind 49 VV#406 : {VV#406 : int | [$k__215[VV#214:=VV#406][lq_tmp_x_217:=VV#406][lq_tmp_x_210:=VV#403][lq_tmp_x_213:=lq_tmp_x_287][lq_tmp_x_343:=lq_tmp_x_287][lq_tmp_x_340:=VV#403][lq_tmp_x_337:=VV#406]]}
bind 50 VV#409 : {VV#409 : int | [$k__318[VV#317:=VV#409][lq_tmp_x_327:=VV#409]]}
bind 51 VV#409 : {VV#409 : int | [$k__318[VV#317:=VV#409][lq_tmp_x_327:=VV#409]]}
bind 52 VV#412 : {VV#412 : int | [$k__219[VV#218:=VV#412][lq_tmp_x_209:=VV#412][lq_tmp_x_213:=lq_tmp_x_287][lq_tmp_x_343:=lq_tmp_x_287][lq_tmp_x_339:=VV#412]]}
bind 53 VV#412 : {VV#412 : int | [$k__219[VV#218:=VV#412][lq_tmp_x_209:=VV#412][lq_tmp_x_213:=lq_tmp_x_287][lq_tmp_x_343:=lq_tmp_x_287][lq_tmp_x_339:=VV#412]]}
bind 54 VV#415 : {VV#415 : (Tuple  int  int) | [(snd([VV#415]) = lq_anf__dLH);
                                                (fst([VV#415]) = n#aLg);
                                                (x_Tuple22([VV#415]) = lq_anf__dLH);
                                                (x_Tuple21([VV#415]) = n#aLg)]}
bind 55 VV#415 : {VV#415 : (Tuple  int  int) | [(snd([VV#415]) = lq_anf__dLH);
                                                (fst([VV#415]) = n#aLg);
                                                (x_Tuple22([VV#415]) = lq_anf__dLH);
                                                (x_Tuple21([VV#415]) = n#aLg)]}
bind 56 VV#418 : {VV#418 : int | [$k__269[VV#268:=VV#418][lq_tmp_x_266:=n#aLg][lq_tmp_x_267:=lq_anf__dLH][lq_tmp_x_263:=VV#415][lq_tmp_x_271:=VV#418]]}
bind 57 VV#418 : {VV#418 : int | [$k__269[VV#268:=VV#418][lq_tmp_x_266:=n#aLg][lq_tmp_x_267:=lq_anf__dLH][lq_tmp_x_263:=VV#415][lq_tmp_x_271:=VV#418]]}
bind 58 VV#421 : {VV#421 : int | [$k__273[VV#272:=VV#421][lq_tmp_x_266:=n#aLg][lq_tmp_x_267:=lq_anf__dLH][lq_tmp_x_263:=VV#415][lq_tmp_x_275:=VV#421]]}
bind 59 VV#421 : {VV#421 : int | [$k__273[VV#272:=VV#421][lq_tmp_x_266:=n#aLg][lq_tmp_x_267:=lq_anf__dLH][lq_tmp_x_263:=VV#415][lq_tmp_x_275:=VV#421]]}
bind 60 lq_tmp_x_235 : {VV#424 : int | []}
bind 61 VV#425 : {VV#425 : int | [$k__277[lq_tmp_x_279:=lq_tmp_x_235][VV#276:=VV#425][lq_tmp_x_266:=n#aLg][lq_tmp_x_267:=lq_anf__dLH][lq_tmp_x_262:=lq_tmp_x_235][lq_tmp_x_275:=VV#425]]}
bind 62 VV#425 : {VV#425 : int | [$k__277[lq_tmp_x_279:=lq_tmp_x_235][VV#276:=VV#425][lq_tmp_x_266:=n#aLg][lq_tmp_x_267:=lq_anf__dLH][lq_tmp_x_262:=lq_tmp_x_235][lq_tmp_x_275:=VV#425]]}
bind 63 VV#428 : {VV#428 : int | [(VV#428 = lq_anf__dLH)]}
bind 64 VV#428 : {VV#428 : int | [(VV#428 = lq_anf__dLH)]}
bind 65 VV#431 : {VV#431 : int | [(VV#431 = n#aLg)]}
bind 66 VV#431 : {VV#431 : int | [(VV#431 = n#aLg)]}
bind 67 VV#434 : {VV#434 : int | [(VV#434 = lq_anf__dLG)]}
bind 68 VV#434 : {VV#434 : int | [(VV#434 = lq_anf__dLG)]}
bind 69 VV#437 : {VV#437 : int | [(VV#437 = n#aLg)]}
bind 70 VV#437 : {VV#437 : int | [(VV#437 = n#aLg)]}
bind 71 VV#440 : {VV#440 : int | [(VV#440 = 1)]}
bind 72 VV#440 : {VV#440 : int | [(VV#440 = 1)]}
bind 73 VV#323 : {VV#323 : (StateMonad.ST  int) | [$k__324]}
bind 74 VV#314 : {VV#314 : int | [$k__315]}
bind 75 VV#317 : {VV#317 : int | [$k__318]}
bind 76 VV#320 : {VV#320 : int | [$k__321]}
bind 77 VV#291 : {VV#291 : int | [$k__292]}
bind 78 lq_tmp_x_290 : {VV#291 : int | [$k__292]}
bind 79 VV#304 : {VV#304 : (Tuple  int  int) | [$k__305]}
bind 80 VV#294 : {VV#294 : int | [$k__295]}
bind 81 VV#297 : {VV#297 : int | [$k__298]}
bind 82 lq_tmp_x_300 : {VV#452 : int | []}
bind 83 VV#301 : {VV#301 : int | [$k__302]}
bind 84 VV#225 : {VV#225 : int | [$k__226]}
bind 85 VV#276 : {VV#276 : int | [$k__277]}
bind 86 VV#272 : {VV#272 : int | [$k__273]}
bind 87 VV#268 : {VV#268 : int | [$k__269]}
bind 88 VV#239 : {VV#239 : (Tuple  int  int) | [$k__240]}
bind 89 VV#229 : {VV#229 : int | [$k__230]}
bind 90 VV#232 : {VV#232 : int | [$k__233]}
bind 91 lq_tmp_x_235 : {VV#461 : int | []}
bind 92 VV#236 : {VV#236 : int | [$k__237]}
bind 93 VV#221 : {VV#221 : int | [$k__222]}
bind 94 VV#218 : {VV#218 : int | [$k__219]}
bind 95 VV#214 : {VV#214 : int | [$k__215]}




constraint:
  env [0; 1; 2; 3; 4; 5; 6; 7; 55; 8; 56; 9; 10; 11]
  grd true
  lhs {VV#F16 : int | [$k__269[VV#268:=VV#F16][lq_tmp_x_266:=n#aLg][lq_tmp_x_267:=lq_anf__dLH][lq_tmp_x_263:=VV#415][lq_tmp_x_271:=VV#F16][VV#418:=VV#F16][VV#F:=VV#F16]]}
  rhs {VV#F16 : int | [$k__230[VV#239:=VV#415][VV#229:=VV#F16][VV#418:=VV#F16][VV#F:=VV#F16]]}
  id 16 tag [1]
  // META constraint id 16 : state0.hs:12:19-26


constraint:
  env [0; 1; 2; 18; 3; 4; 5; 6; 7; 8; 15]
  grd true
  lhs {VV#F1 : int | [(VV#F1 >= 0)]}
  rhs {VV#F1 : int | [$k__318[VV#317:=VV#F1][lq_tmp_x_288:=lq_anf__dLF][lq_tmp_x_289:=lq_anf__dLI][lq_tmp_x_327:=VV#F1][VV#359:=VV#F1][VV#F:=VV#F1]]}
  id 1 tag [1]
  // META constraint id 1 : state0.hs:12:9-26


constraint:
  env [0; 1; 2; 3; 4; 5; 6; 7; 55; 8; 9; 10; 58; 11]
  grd true
  lhs {VV#F17 : int | [$k__273[VV#272:=VV#F17][lq_tmp_x_266:=n#aLg][lq_tmp_x_267:=lq_anf__dLH][lq_tmp_x_263:=VV#415][lq_tmp_x_275:=VV#F17][VV#421:=VV#F17][VV#F:=VV#F17]]}
  rhs {VV#F17 : int | [$k__233[VV#239:=VV#415][VV#232:=VV#F17][VV#421:=VV#F17][VV#F:=VV#F17]]}
  id 17 tag [1]
  // META constraint id 17 : state0.hs:12:19-26


constraint:
  env [0; 1; 2; 3; 4; 20; 5; 6; 7; 8; 15]
  grd true
  lhs {VV#F2 : int | [$k__321[VV#320:=VV#F2][lq_tmp_x_288:=lq_anf__dLF][lq_tmp_x_289:=lq_anf__dLI][lq_tmp_x_328:=VV#F2][VV#362:=VV#F2][VV#F:=VV#F2]]}
  rhs {VV#F2 : int | [(VV#F2 >= 0)]}
  id 2 tag [1]
  // META constraint id 2 : state0.hs:12:9-26


constraint:
  env [0; 1; 2; 3; 4; 5; 6; 7; 55; 8; 9; 10; 11; 60; 61]
  grd true
  lhs {VV#F18 : int | [$k__277[lq_tmp_x_279:=lq_tmp_x_235][VV#276:=VV#F18][lq_tmp_x_266:=n#aLg][lq_tmp_x_267:=lq_anf__dLH][lq_tmp_x_262:=lq_tmp_x_235][lq_tmp_x_275:=VV#F18][VV#425:=VV#F18][VV#F:=VV#F18]]}
  rhs {VV#F18 : int | [$k__237[VV#236:=VV#F18][VV#425:=VV#F18][VV#F:=VV#F18]]}
  id 18 tag [1]
  // META constraint id 18 : state0.hs:12:19-26


constraint:
  env [0; 1; 2; 3; 4; 5; 6; 22; 7; 8]
  grd true
  lhs {VV#F3 : int | [$k__292[VV#291:=VV#F3][lq_tmp_x_288:=lq_anf__dLF][lq_tmp_x_307:=VV#F3][VV#366:=VV#F3][VV#F:=VV#F3]]}
  rhs {VV#F3 : int | [$k__226[VV#225:=VV#F3][lq_tmp_x_344:=VV#F3][VV#366:=VV#F3][VV#F:=VV#F3]]}
  id 3 tag [1]
  // META constraint id 3 : state0.hs:12:13-26


constraint:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 63]
  grd true
  lhs {VV#F19 : int | [(VV#F19 = lq_anf__dLH)]}
  rhs {VV#F19 : int | [$k__273[VV#272:=VV#F19][lq_tmp_x_266:=n#aLg][lq_tmp_x_275:=VV#F19][VV#428:=VV#F19][VV#F:=VV#F19]]}
  id 19 tag [1]
  // META constraint id 19 : state0.hs:12:23-25


constraint:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 24; 25]
  grd true
  lhs {VV#F4 : (Tuple  int  int) | [$k__240[VV#239:=VV#F4][n#aLg:=lq_tmp_x_290][lq_tmp_x_351:=lq_tmp_x_290][lq_tmp_x_349:=VV#F4][VV#370:=VV#F4][VV#F:=VV#F4]]}
  rhs {VV#F4 : (Tuple  int  int) | [$k__305[VV#304:=VV#F4][lq_tmp_x_288:=lq_anf__dLF][lq_tmp_x_312:=VV#F4][VV#370:=VV#F4][VV#F:=VV#F4]]}
  id 4 tag [1]
  // META constraint id 4 : state0.hs:12:13-26


constraint:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 63]
  grd true
  lhs {VV#F20 : int | [(VV#F20 = lq_anf__dLH)]}
  rhs {VV#F20 : int | [$k__277[lq_tmp_x_279:=n#aLg][VV#276:=VV#F20][lq_tmp_x_266:=n#aLg][lq_tmp_x_275:=VV#F20][VV#428:=VV#F20][VV#F:=VV#F20]]}
  id 20 tag [1]
  // META constraint id 20 : state0.hs:12:23-25


constraint:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 24; 26; 27]
  grd true
  lhs {VV#F5 : int | [$k__230[VV#229:=VV#F5][VV#239:=VV#370][n#aLg:=lq_tmp_x_290][lq_tmp_x_351:=lq_tmp_x_290][lq_tmp_x_349:=VV#370][lq_tmp_x_345:=VV#F5][VV#373:=VV#F5][VV#F:=VV#F5]]}
  rhs {VV#F5 : int | [$k__295[VV#294:=VV#F5][VV#304:=VV#370][lq_tmp_x_288:=lq_anf__dLF][lq_tmp_x_312:=VV#370][lq_tmp_x_308:=VV#F5][VV#373:=VV#F5][VV#F:=VV#F5]]}
  id 5 tag [1]
  // META constraint id 5 : state0.hs:12:13-26


constraint:
  env [0; 1; 65; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11]
  grd true
  lhs {VV#F21 : int | [(VV#F21 = n#aLg)]}
  rhs {VV#F21 : int | [$k__269[VV#268:=VV#F21][lq_tmp_x_271:=VV#F21][VV#431:=VV#F21][VV#F:=VV#F21]]}
  id 21 tag [1]
  // META constraint id 21 : state0.hs:12:20


constraint:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 24; 26; 29]
  grd true
  lhs {VV#F6 : int | [$k__233[VV#232:=VV#F6][VV#239:=VV#370][n#aLg:=lq_tmp_x_290][lq_tmp_x_351:=lq_tmp_x_290][lq_tmp_x_349:=VV#370][lq_tmp_x_346:=VV#F6][VV#376:=VV#F6][VV#F:=VV#F6]]}
  rhs {VV#F6 : int | [$k__298[VV#297:=VV#F6][VV#304:=VV#370][lq_tmp_x_288:=lq_anf__dLF][lq_tmp_x_312:=VV#370][lq_tmp_x_309:=VV#F6][VV#376:=VV#F6][VV#F:=VV#F6]]}
  id 6 tag [1]
  // META constraint id 6 : state0.hs:12:13-26


constraint:
  env [0; 32; 1; 2; 3; 4; 5; 6; 7; 8; 24; 26; 31]
  grd true
  lhs {VV#F7 : int | [$k__237[VV#236:=VV#F7][lq_tmp_x_235:=lq_tmp_x_310][n#aLg:=lq_tmp_x_290][lq_tmp_x_351:=lq_tmp_x_290][lq_tmp_x_347:=lq_tmp_x_310][lq_tmp_x_348:=VV#F7][VV#380:=VV#F7][VV#F:=VV#F7]]}
  rhs {VV#F7 : int | [$k__302[VV#301:=VV#F7][lq_tmp_x_300:=lq_tmp_x_310][lq_tmp_x_288:=lq_anf__dLF][lq_tmp_x_311:=VV#F7][VV#380:=VV#F7][VV#F:=VV#F7]]}
  id 7 tag [1]
  // META constraint id 7 : state0.hs:12:13-26


constraint:
  env [0; 1; 2; 34; 3; 4; 5; 6; 7; 8]
  grd true
  lhs {VV#F8 : int | [$k__222[VV#221:=VV#F8][lq_tmp_x_202:=VV#F8][lq_tmp_x_330:=VV#F8][VV#385:=VV#F8][VV#F:=VV#F8]]}
  rhs {VV#F8 : int | [$k__292[VV#291:=VV#F8][lq_tmp_x_307:=VV#F8][VV#385:=VV#F8][VV#F:=VV#F8]]}
  id 8 tag [1]
  // META constraint id 8 : state0.hs:12:9


constraint:
  env [0; 1; 2; 3; 4; 36; 5; 6; 38; 7; 39; 8]
  grd true
  lhs {VV#F9 : int | [$k__295[VV#294:=VV#F9][VV#304:=VV#389][lq_tmp_x_290:=lq_tmp_x_342][lq_tmp_x_312:=VV#389][lq_tmp_x_308:=VV#F9][VV#392:=VV#F9][VV#F:=VV#F9]]}
  rhs {VV#F9 : int | [$k__215[VV#214:=VV#F9][lq_tmp_x_217:=VV#F9][lq_tmp_x_206:=VV#389][lq_tmp_x_212:=lq_tmp_x_342][lq_tmp_x_335:=VV#389][lq_tmp_x_331:=VV#F9][VV#392:=VV#F9][VV#F:=VV#F9]]}
  id 9 tag [1]
  // META constraint id 9 : state0.hs:12:9


constraint:
  env [0; 1; 2; 3; 4; 36; 5; 6; 38; 7; 8; 41]
  grd true
  lhs {VV#F10 : int | [$k__298[VV#297:=VV#F10][VV#304:=VV#389][lq_tmp_x_290:=lq_tmp_x_342][lq_tmp_x_312:=VV#389][lq_tmp_x_309:=VV#F10][VV#395:=VV#F10][VV#F:=VV#F10]]}
  rhs {VV#F10 : int | [$k__219[VV#218:=VV#F10][lq_tmp_x_203:=VV#F10][lq_tmp_x_206:=VV#389][lq_tmp_x_212:=lq_tmp_x_342][lq_tmp_x_335:=VV#389][lq_tmp_x_332:=VV#F10][VV#395:=VV#F10][VV#F:=VV#F10]]}
  id 10 tag [1]
  // META constraint id 10 : state0.hs:12:9


constraint:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 46]
  grd true
  lhs {VV#F11 : (StateMonad.ST  int) | []}
  rhs {VV#F11 : (StateMonad.ST  int) | [$k__324[VV#323:=VV#F11][lq_tmp_x_329:=VV#F11][VV#403:=VV#F11][VV#F:=VV#F11]]}
  id 11 tag [1]
  // META constraint id 11 : state0.hs:12:9


constraint:
  env [0; 48; 1; 2; 3; 4; 5; 6; 7; 8; 47]
  grd true
  lhs {VV#F12 : int | [$k__215[VV#214:=VV#F12][lq_tmp_x_217:=VV#F12][lq_tmp_x_210:=VV#403][lq_tmp_x_213:=lq_tmp_x_287][lq_tmp_x_343:=lq_tmp_x_287][lq_tmp_x_340:=VV#403][lq_tmp_x_337:=VV#F12][VV#406:=VV#F12][VV#F:=VV#F12]]}
  rhs {VV#F12 : int | [$k__315[VV#314:=VV#F12][VV#323:=VV#403][lq_tmp_x_329:=VV#403][lq_tmp_x_326:=VV#F12][VV#406:=VV#F12][VV#F:=VV#F12]]}
  id 12 tag [1]
  // META constraint id 12 : state0.hs:12:9


constraint:
  env [0; 1; 2; 50; 3; 4; 5; 6; 7; 8; 47]
  grd true
  lhs {VV#F13 : int | [$k__318[VV#317:=VV#F13][lq_tmp_x_327:=VV#F13][VV#409:=VV#F13][VV#F:=VV#F13]]}
  rhs {VV#F13 : int | [$k__222[VV#221:=VV#F13][lq_tmp_x_208:=VV#F13][lq_tmp_x_213:=lq_tmp_x_287][lq_tmp_x_343:=lq_tmp_x_287][lq_tmp_x_338:=VV#F13][VV#409:=VV#F13][VV#F:=VV#F13]]}
  id 13 tag [1]
  // META constraint id 13 : state0.hs:12:9


constraint:
  env [0; 1; 2; 3; 4; 52; 5; 6; 7; 8; 47]
  grd true
  lhs {VV#F14 : int | [$k__219[VV#218:=VV#F14][lq_tmp_x_209:=VV#F14][lq_tmp_x_213:=lq_tmp_x_287][lq_tmp_x_343:=lq_tmp_x_287][lq_tmp_x_339:=VV#F14][VV#412:=VV#F14][VV#F:=VV#F14]]}
  rhs {VV#F14 : int | [$k__321[VV#320:=VV#F14][lq_tmp_x_328:=VV#F14][VV#412:=VV#F14][VV#F:=VV#F14]]}
  id 14 tag [1]
  // META constraint id 14 : state0.hs:12:9


constraint:
  env [0; 1; 2; 3; 4; 5; 6; 54; 7; 8; 9; 10; 11]
  grd true
  lhs {VV#F15 : (Tuple  int  int) | [(snd([VV#F15]) = lq_anf__dLH);
                                     (fst([VV#F15]) = n#aLg);
                                     (x_Tuple22([VV#F15]) = lq_anf__dLH);
                                     (x_Tuple21([VV#F15]) = n#aLg)]}
  rhs {VV#F15 : (Tuple  int  int) | [$k__240[VV#239:=VV#F15][VV#415:=VV#F15][VV#F:=VV#F15]]}
  id 15 tag [1]
  // META constraint id 15 : state0.hs:12:19-26




wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8]
  reft {VV#323 : (StateMonad.ST  int) | [$k__324]}
  
  // META wf  : state0.hs:12:11


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 73]
  reft {VV#314 : int | [$k__315]}
  
  // META wf  : state0.hs:12:11


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8]
  reft {VV#317 : int | [$k__318]}
  
  // META wf  : state0.hs:12:11


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8]
  reft {VV#320 : int | [$k__321]}
  
  // META wf  : state0.hs:12:11


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8]
  reft {VV#291 : int | [$k__292]}
  
  // META wf  : state0.hs:12:11


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 78]
  reft {VV#304 : (Tuple  int  int) | [$k__305]}
  
  // META wf  : state0.hs:12:11


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 78; 79]
  reft {VV#294 : int | [$k__295]}
  
  // META wf  : state0.hs:12:11


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 78; 79]
  reft {VV#297 : int | [$k__298]}
  
  // META wf  : state0.hs:12:11


wf:
  env [0; 1; 2; 82; 3; 4; 5; 6; 7; 8; 78]
  reft {VV#301 : int | [$k__302]}
  
  // META wf  : state0.hs:12:11


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8]
  reft {VV#225 : int | [$k__226]}
  
  // META wf  : state0.hs:12:1-5


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12]
  reft {VV#276 : int | [$k__277]}
  
  // META wf  : state0.hs:12:19-26


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11]
  reft {VV#272 : int | [$k__273]}
  
  // META wf  : state0.hs:12:19-26


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11]
  reft {VV#268 : int | [$k__269]}
  
  // META wf  : state0.hs:12:19-26


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9]
  reft {VV#239 : (Tuple  int  int) | [$k__240]}
  
  // META wf  : state0.hs:12:1-5


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 88; 9]
  reft {VV#229 : int | [$k__230]}
  
  // META wf  : state0.hs:12:1-5


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 88; 9]
  reft {VV#232 : int | [$k__233]}
  
  // META wf  : state0.hs:12:1-5


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 91]
  reft {VV#236 : int | [$k__237]}
  
  // META wf  : state0.hs:12:1-5


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8]
  reft {VV#221 : int | [$k__222]}
  
  // META wf  : state0.hs:12:1-5


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8]
  reft {VV#218 : int | [$k__219]}
  
  // META wf  : state0.hs:12:1-5


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8]
  reft {VV#214 : int | [$k__215]}
  
  // META wf  : state0.hs:12:1-5







