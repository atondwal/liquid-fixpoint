qualif Fst(v : @(1), fix##126#Y : @(0)): (v = fst([fix##126#Y])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.spec" (line 29, column 8)
qualif Snd(v : @(1), fix##126#Y : @(0)): (v = snd([fix##126#Y])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.spec" (line 30, column 8)
qualif Auto(v : int): (v >= 0) // "monad6.hs" (line 7, column 1)
qualif Auto(v : int): (v > 0) // "monad6.hs" (line 7, column 1)
qualif IsEmp(v : GHC.Types.Bool, fix##126#Xs : [@(0)]): ((? Prop([v])) <=> (len([fix##126#Xs]) > 0)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 13, column 8)
qualif IsEmp(v : GHC.Types.Bool, fix##126#Xs : [@(0)]): ((? Prop([v])) <=> (len([fix##126#Xs]) = 0)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 14, column 8)
qualif ListZ(v : [@(0)]): (len([v]) = 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 16, column 8)
qualif ListZ(v : [@(0)]): (len([v]) >= 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 17, column 8)
qualif ListZ(v : [@(0)]): (len([v]) > 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 18, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) = len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 20, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) >= len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 21, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) > len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 22, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) <= len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 23, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) < len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 24, column 8)
qualif EqLen(v : int, fix##126#Xs : [@(0)]): (v = len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 26, column 8)
qualif LenEq(v : [@(0)], fix##126#X : int): (fix##126#X = len([v])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 27, column 8)
qualif LenDiff(v : [@(0)], fix##126#X : int): (len([v]) = (fix##126#X + 1)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 28, column 8)
qualif LenDiff(v : [@(0)], fix##126#X : int): (len([v]) = (fix##126#X - 1)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 29, column 8)
qualif LenAcc(v : int, fix##126#Xs : [@(0)], fix##126#N : int): (v = (len([fix##126#Xs]) + fix##126#N)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 30, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 3, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 4, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 5, column 8)
qualif Bot(v : bool): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 6, column 8)
qualif Bot(v : int): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 7, column 8)
qualif CmpZ(v : @(0)): (v < 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 9, column 8)
qualif CmpZ(v : @(0)): (v <= 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 10, column 8)
qualif CmpZ(v : @(0)): (v > 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 11, column 8)
qualif CmpZ(v : @(0)): (v >= 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 12, column 8)
qualif CmpZ(v : @(0)): (v = 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 13, column 8)
qualif CmpZ(v : @(0)): (v != 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 14, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v < fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 16, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v <= fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 17, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v > fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 18, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v >= fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 19, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v = fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 20, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v != fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 21, column 8)
qualif One(v : int): (v = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 28, column 8)
qualif True(v : bool): (? v) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 29, column 8)
qualif False(v : bool): (~ ((? v))) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 30, column 8)
qualif True1(v : GHC.Types.Bool): (? Prop([v])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 31, column 8)
qualif False1(v : GHC.Types.Bool): (~ ((? Prop([v])))) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 32, column 8)
qualif Papp(v : @(0), fix##126#P : (Pred  @(0))): (? papp1([fix##126#P;
                                                            v])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 35, column 8)
qualif Papp2(v : @(1), fix##126#X : @(0), fix##126#P : (Pred  @(1)  @(0))): (? papp2([fix##126#P;
                                                                                      v;
                                                                                      fix##126#X])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 38, column 8)
qualif Papp3(v : @(2), fix##126#X : @(0), fix##126#Y : @(1), fix##126#P : (Pred  @(2)  @(0)  @(1))): (? papp3([fix##126#P;
                                                                                                               v;
                                                                                                               fix##126#X;
                                                                                                               fix##126#Y])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 41, column 8)

qualif Fst(v : @(1), fix##126#Y : @(0)): (v = fst([fix##126#Y])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.spec" (line 29, column 8)
qualif Snd(v : @(1), fix##126#Y : @(0)): (v = snd([fix##126#Y])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.spec" (line 30, column 8)
qualif Auto(v : int): (v >= 0) // "monad6.hs" (line 7, column 1)
qualif Auto(v : int): (v > 0) // "monad6.hs" (line 7, column 1)
qualif IsEmp(v : GHC.Types.Bool, fix##126#Xs : [@(0)]): ((? Prop([v])) <=> (len([fix##126#Xs]) > 0)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 13, column 8)
qualif IsEmp(v : GHC.Types.Bool, fix##126#Xs : [@(0)]): ((? Prop([v])) <=> (len([fix##126#Xs]) = 0)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 14, column 8)
qualif ListZ(v : [@(0)]): (len([v]) = 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 16, column 8)
qualif ListZ(v : [@(0)]): (len([v]) >= 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 17, column 8)
qualif ListZ(v : [@(0)]): (len([v]) > 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 18, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) = len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 20, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) >= len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 21, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) > len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 22, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) <= len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 23, column 8)
qualif CmpLen(v : [@(1)], fix##126#Xs : [@(0)]): (len([v]) < len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 24, column 8)
qualif EqLen(v : int, fix##126#Xs : [@(0)]): (v = len([fix##126#Xs])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 26, column 8)
qualif LenEq(v : [@(0)], fix##126#X : int): (fix##126#X = len([v])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 27, column 8)
qualif LenDiff(v : [@(0)], fix##126#X : int): (len([v]) = (fix##126#X + 1)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 28, column 8)
qualif LenDiff(v : [@(0)], fix##126#X : int): (len([v]) = (fix##126#X - 1)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 29, column 8)
qualif LenAcc(v : int, fix##126#Xs : [@(0)], fix##126#N : int): (v = (len([fix##126#Xs]) + fix##126#N)) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/GHC/Base.hquals" (line 30, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 3, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 4, column 8)
qualif Bot(v : @(0)): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 5, column 8)
qualif Bot(v : bool): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 6, column 8)
qualif Bot(v : int): (0 = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 7, column 8)
qualif CmpZ(v : @(0)): (v < 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 9, column 8)
qualif CmpZ(v : @(0)): (v <= 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 10, column 8)
qualif CmpZ(v : @(0)): (v > 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 11, column 8)
qualif CmpZ(v : @(0)): (v >= 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 12, column 8)
qualif CmpZ(v : @(0)): (v = 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 13, column 8)
qualif CmpZ(v : @(0)): (v != 0) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 14, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v < fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 16, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v <= fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 17, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v > fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 18, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v >= fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 19, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v = fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 20, column 8)
qualif Cmp(v : @(0), fix##126#X : @(0)): (v != fix##126#X) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 21, column 8)
qualif One(v : int): (v = 1) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 28, column 8)
qualif True(v : bool): (? v) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 29, column 8)
qualif False(v : bool): (~ ((? v))) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 30, column 8)
qualif True1(v : GHC.Types.Bool): (? Prop([v])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 31, column 8)
qualif False1(v : GHC.Types.Bool): (~ ((? Prop([v])))) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 32, column 8)
qualif Papp(v : @(0), fix##126#P : (Pred  @(0))): (? papp1([fix##126#P;
                                                            v])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 35, column 8)
qualif Papp2(v : @(1), fix##126#X : @(0), fix##126#P : (Pred  @(1)  @(0))): (? papp2([fix##126#P;
                                                                                      v;
                                                                                      fix##126#X])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 38, column 8)
qualif Papp3(v : @(2), fix##126#X : @(0), fix##126#Y : @(1), fix##126#P : (Pred  @(2)  @(0)  @(1))): (? papp3([fix##126#P;
                                                                                                               v;
                                                                                                               fix##126#X;
                                                                                                               fix##126#Y])) // "/Users/benjamin/UCSDrepos/liquidhaskell/.cabal-sandbox/share/x86_64-osx-ghc-7.8.3/liquidhaskell-0.5.0.1/include/Prelude.hquals" (line 41, column 8)




constant Prop : (func(0, [GHC.Types.Bool; bool]))
constant x_Tuple44 : (func(4, [(Tuple  @(0)  @(1)  @(2)  @(3));
                               @(3)]))
constant xListSelector : (func(1, [[@(0)]; @(0)]))
constant x_Tuple41 : (func(4, [(Tuple  @(0)  @(1)  @(2)  @(3));
                               @(0)]))
constant x_Tuple76 : (func(7, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5)  @(6));
                               @(5)]))
constant autolen : (func(1, [@(0); int]))
constant addrLen : (func(0, [int; int]))
constant x_Tuple65 : (func(6, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5));
                               @(4)]))
constant strLen : (func(0, [int; int]))
constant x_Tuple75 : (func(7, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5)  @(6));
                               @(4)]))
constant x_Tuple64 : (func(6, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5));
                               @(3)]))
constant x_Tuple54 : (func(5, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4));
                               @(3)]))
constant GHC.Types.I##6c : (func(0, [int; int]))
constant x_Tuple33 : (func(3, [(Tuple  @(0)  @(1)  @(2)); @(2)]))
constant fst : (func(2, [(Tuple  @(0)  @(1)); @(0)]))
constant x_Tuple31 : (func(3, [(Tuple  @(0)  @(1)  @(2)); @(0)]))
constant x_Tuple43 : (func(4, [(Tuple  @(0)  @(1)  @(2)  @(3));
                               @(2)]))
constant papp4 : (func(8, [(Pred  @(0)  @(1)  @(2)  @(6));
                           @(3);
                           @(4);
                           @(5);
                           @(7);
                           bool]))
constant x_Tuple71 : (func(7, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5)  @(6));
                               @(0)]))
constant x_Tuple52 : (func(5, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4));
                               @(1)]))
constant papp2 : (func(4, [(Pred  @(0)  @(1)); @(2); @(3); bool]))
constant x_Tuple32 : (func(3, [(Tuple  @(0)  @(1)  @(2)); @(1)]))
constant x_Tuple72 : (func(7, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5)  @(6));
                               @(1)]))
constant x_Tuple63 : (func(6, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5));
                               @(2)]))
constant x_Tuple51 : (func(5, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4));
                               @(0)]))
constant len : (func(2, [(@(0)  @(1)); int]))
constant xsListSelector : (func(1, [[@(0)]; [@(0)]]))
constant null : (func(1, [[@(0)]; bool]))
constant x_Tuple22 : (func(2, [(Tuple  @(0)  @(1)); @(1)]))
constant fromJust : (func(1, [(Data.Maybe.Maybe  @(0)); @(0)]))
constant snd : (func(2, [(Tuple  @(0)  @(1)); @(1)]))
constant x_Tuple73 : (func(7, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5)  @(6));
                               @(2)]))
constant x_Tuple62 : (func(6, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5));
                               @(1)]))
constant papp3 : (func(6, [(Pred  @(0)  @(1)  @(2));
                           @(3);
                           @(4);
                           @(5);
                           bool]))
constant x_Tuple74 : (func(7, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5)  @(6));
                               @(3)]))
constant cmp : (func(0, [GHC.Types.Ordering; GHC.Types.Ordering]))
constant papp1 : (func(1, [(Pred  @(0)); @(0); bool]))
constant isJust : (func(1, [(Data.Maybe.Maybe  @(0)); bool]))
constant x_Tuple42 : (func(4, [(Tuple  @(0)  @(1)  @(2)  @(3));
                               @(1)]))
constant x_Tuple21 : (func(2, [(Tuple  @(0)  @(1)); @(0)]))
constant x_Tuple61 : (func(6, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5));
                               @(0)]))
constant x_Tuple53 : (func(5, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4));
                               @(2)]))
constant x_Tuple66 : (func(6, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5));
                               @(5)]))
constant x_Tuple55 : (func(5, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4));
                               @(4)]))
constant x_Tuple77 : (func(7, [(Tuple  @(0)  @(1)  @(2)  @(3)  @(4)  @(5)  @(6));
                               @(6)]))




bind 0 fix#GHC.Classes.#36#fOrdInt#35#rhx : {VV#184 : (GHC.Classes.Ord  int) | []}
bind 1 GHC.Types.EQ#6U : {VV#186 : GHC.Types.Ordering | [(VV#186 = GHC.Types.EQ#6U)]}
bind 2 GHC.Types.LT#6S : {VV#187 : GHC.Types.Ordering | [(VV#187 = GHC.Types.LT#6S)]}
bind 3 GHC.Types.GT#6W : {VV#188 : GHC.Types.Ordering | [(VV#188 = GHC.Types.GT#6W)]}
bind 4 fix#GHC.Types.#91##93##35#6m : {VV : func(1, [[@(0)]]) | []}
bind 5 Data.Maybe.Nothing#r19 : {VV : func(1, [(Data.Maybe.Maybe  @(0))]) | []}
bind 6 GHC.Types.EQ#6U : {VV#230 : GHC.Types.Ordering | [(cmp([VV#230]) = GHC.Types.EQ#6U)]}
bind 7 GHC.Types.LT#6S : {VV#231 : GHC.Types.Ordering | [(cmp([VV#231]) = GHC.Types.LT#6S)]}
bind 8 GHC.Types.GT#6W : {VV#232 : GHC.Types.Ordering | [(cmp([VV#232]) = GHC.Types.GT#6W)]}
bind 9 fix##36#dMonad_a13r : {VV#238 : (GHC.Base.Monad  m_a13q) | []}
bind 10 z#a13b : {VV : (m_a13q  int) | []}
bind 11 x#a13c : {VV#240 : int | [$k__241]}
bind 12 lq_anf__d13R : {lq_tmp_x_266 : int | [(lq_tmp_x_266 = (0  :  int))]}
bind 13 lq_anf__d13S : {lq_tmp_x_272 : GHC.Types.Bool | [((? Prop([lq_tmp_x_272])) <=> (x#a13c >= lq_anf__d13R))]}
bind 14 lq_anf__d13T : {lq_tmp_x_296 : int | [$k__294[VV#293:=lq_tmp_x_296][lq_tmp_x_291:=lq_anf__d13S][lq_tmp_x_292:=x#a13c]]}
bind 15 lq_tmp_x_332 : {lq_tmp_x_332 : (m_a13q  int) | []}
bind 16 VV : {VV : m_a13q | []}
bind 17 VV#357 : {VV#357 : int | [$k__344[VV#343:=VV#357][lq_tmp_x_16:=z#a13b][lq_tmp_x_19:=lq_anf__d13U][lq_tmp_x_346:=VV#357]]}
bind 18 VV#357 : {VV#357 : int | [$k__344[VV#343:=VV#357][lq_tmp_x_16:=z#a13b][lq_tmp_x_19:=lq_anf__d13U][lq_tmp_x_346:=VV#357]]}
bind 19 VV#360 : {VV#360 : int | [(VV#360 > 0)]}
bind 20 VV#360 : {VV#360 : int | [(VV#360 > 0)]}
bind 21 VV#364 : {VV#364 : int | [$k__340[VV#339:=VV#364][lq_tmp_x_16:=z#a13b][lq_tmp_x_342:=VV#364]]}
bind 22 VV#364 : {VV#364 : int | [$k__340[VV#339:=VV#364][lq_tmp_x_16:=z#a13b][lq_tmp_x_342:=VV#364]]}
bind 23 lq_tmp_x_20 : {lq_tmp_x_342 : int | [$k__340[VV#339:=lq_tmp_x_342][lq_tmp_x_16:=z#a13b]]}
bind 24 lq_tmp_x_351 : {lq_tmp_x_351 : (m_a13q  int) | [$k__251[VV#250:=lq_tmp_x_351][x#a13c:=lq_tmp_x_20][lq_tmp_x_353:=lq_tmp_x_20]]}
bind 25 VV#244 : {VV#244 : m_a13q | [$k__245[x#a13c:=lq_tmp_x_20][lq_tmp_x_353:=lq_tmp_x_20]]}
bind 26 VV#370 : {VV#370 : int | [$k__248[VV#247:=VV#370][x#a13c:=lq_tmp_x_20][lq_tmp_x_353:=lq_tmp_x_20][lq_tmp_x_350:=VV#370]]}
bind 27 VV#370 : {VV#370 : int | [$k__248[VV#247:=VV#370][x#a13c:=lq_tmp_x_20][lq_tmp_x_353:=lq_tmp_x_20][lq_tmp_x_350:=VV#370]]}
bind 28 VV#373 : {VV#373 : int | [$k__344[VV#343:=VV#373][lq_tmp_x_16:=z#a13b][lq_tmp_x_346:=VV#373]]}
bind 29 VV#373 : {VV#373 : int | [$k__344[VV#343:=VV#373][lq_tmp_x_16:=z#a13b][lq_tmp_x_346:=VV#373]]}
bind 30 lq_tmp_x_348 : {lq_tmp_x_348 : (m_a13q  int) | [(lq_tmp_x_348 = z#a13b)]}
bind 31 VV : {VV : m_a13q | []}
bind 32 VV#378 : {VV#378 : int | [(VV#378 >= 0)]}
bind 33 VV#378 : {VV#378 : int | [(VV#378 >= 0)]}
bind 34 VV#381 : {VV#381 : int | [$k__340[VV#339:=VV#381][lq_tmp_x_342:=VV#381]]}
bind 35 VV#381 : {VV#381 : int | [$k__340[VV#339:=VV#381][lq_tmp_x_342:=VV#381]]}
bind 36 lq_tmp_x_320 : {lq_tmp_x_320 : (m_a13q  int) | [$k__317[VV#316:=lq_tmp_x_320][lq_tmp_x_304:=lq_anf__d13Q][lq_tmp_x_305:=lq_anf__d13T]]}
bind 37 VV#310 : {VV#310 : m_a13q | [$k__311[lq_tmp_x_304:=lq_anf__d13Q][lq_tmp_x_305:=lq_anf__d13T]]}
bind 38 VV#386 : {VV#386 : int | [$k__314[VV#313:=VV#386][lq_tmp_x_304:=lq_anf__d13Q][lq_tmp_x_305:=lq_anf__d13T][lq_tmp_x_319:=VV#386]]}
bind 39 VV#386 : {VV#386 : int | [$k__314[VV#313:=VV#386][lq_tmp_x_304:=lq_anf__d13Q][lq_tmp_x_305:=lq_anf__d13T][lq_tmp_x_319:=VV#386]]}
bind 40 VV#389 : {VV#389 : int | [$k__248[VV#247:=VV#389]]}
bind 41 VV#389 : {VV#389 : int | [$k__248[VV#247:=VV#389]]}
bind 42 VV#392 : {VV#392 : int | [(VV#392 = lq_anf__d13T)]}
bind 43 VV#392 : {VV#392 : int | [(VV#392 = lq_anf__d13T)]}
bind 44 VV#396 : {VV#396 : int | [$k__307[VV#306:=VV#396][lq_tmp_x_309:=VV#396]]}
bind 45 VV#396 : {VV#396 : int | [$k__307[VV#306:=VV#396][lq_tmp_x_309:=VV#396]]}
bind 46 lq_tmp_x_303 : {lq_tmp_x_309 : int | [$k__307[VV#306:=lq_tmp_x_309]]}
bind 47 lq_tmp_x_323 : {lq_tmp_x_323 : (m_a13q  int) | []}
bind 48 VV : {VV : m_a13q | []}
bind 49 VV#402 : {VV#402 : int | [$k__261[VV#260:=VV#402][lq_tmp_x_263:=VV#402][lq_tmp_x_28:=lq_tmp_x_303][lq_tmp_x_325:=lq_tmp_x_303][lq_tmp_x_322:=VV#402]]}
bind 50 VV#402 : {VV#402 : int | [$k__261[VV#260:=VV#402][lq_tmp_x_263:=VV#402][lq_tmp_x_28:=lq_tmp_x_303][lq_tmp_x_325:=lq_tmp_x_303][lq_tmp_x_322:=VV#402]]}
bind 51 VV#405 : {VV#405 : int | [$k__314[VV#313:=VV#405][lq_tmp_x_319:=VV#405]]}
bind 52 VV#405 : {VV#405 : int | [$k__314[VV#313:=VV#405][lq_tmp_x_319:=VV#405]]}
bind 53 VV#408 : {VV#408 : int | [(VV#408 = x#a13c)]}
bind 54 VV#408 : {VV#408 : int | [(VV#408 = x#a13c)]}
bind 55 VV#411 : {VV#411 : GHC.Types.Bool | [(VV#411 = lq_anf__d13S)]}
bind 56 VV#411 : {VV#411 : GHC.Types.Bool | [(VV#411 = lq_anf__d13S)]}
bind 57 VV#414 : {VV#414 : int | [(VV#414 = lq_anf__d13R)]}
bind 58 VV#414 : {VV#414 : int | [(VV#414 = lq_anf__d13R)]}
bind 59 VV#417 : {VV#417 : int | [(VV#417 = x#a13c)]}
bind 60 VV#417 : {VV#417 : int | [(VV#417 = x#a13c)]}
bind 61 VV#420 : {VV#420 : int | [(VV#420 = 0)]}
bind 62 VV#420 : {VV#420 : int | [(VV#420 = 0)]}
bind 63 VV#343 : {VV#343 : int | [$k__344]}
bind 64 VV#339 : {VV#339 : int | [$k__340]}
bind 65 VV#240 : {VV#240 : int | [$k__241]}
bind 66 VV#313 : {VV#313 : int | [$k__314]}
bind 67 VV#306 : {VV#306 : int | [$k__307]}
bind 68 VV#293 : {VV#293 : int | [$k__294]}
bind 69 VV#279 : {VV#279 : int | [$k__280]}
bind 70 VV#260 : {VV#260 : int | [$k__261]}
bind 71 VV#247 : {VV#247 : int | [$k__248]}




constraint:
  env [0; 1; 49; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 46]
  grd true
  lhs {VV#F16 : int | [$k__261[VV#260:=VV#F16][lq_tmp_x_263:=VV#F16][lq_tmp_x_28:=lq_tmp_x_303][lq_tmp_x_325:=lq_tmp_x_303][lq_tmp_x_322:=VV#F16][VV#402:=VV#F16][VV#F:=VV#F16]]}
  rhs {VV#F16 : int | [$k__314[VV#313:=VV#F16][lq_tmp_x_319:=VV#F16][VV#402:=VV#F16][VV#F:=VV#F16]]}
  id 16 tag [1]
  // META constraint id 16 : monad6.hs:8:12-17


constraint:
  env [0; 1; 17; 2; 3; 4; 5; 6; 7; 8; 9; 10]
  grd true
  lhs {VV#F1 : int | [$k__344[VV#343:=VV#F1][lq_tmp_x_16:=z#a13b][lq_tmp_x_19:=lq_anf__d13U][lq_tmp_x_346:=VV#F1][VV#357:=VV#F1][VV#F:=VV#F1]]}
  rhs {VV#F1 : int | [(VV#F1 > 0)]}
  id 1 tag [1]
  // META constraint id 1 : monad6.hs:(7,9)-(8,45)


constraint:
  env [0; 1; 2; 3; 51; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 46]
  grd true
  lhs {VV#F17 : int | [$k__314[VV#313:=VV#F17][lq_tmp_x_319:=VV#F17][VV#405:=VV#F17][VV#F:=VV#F17]]}
  rhs {VV#F17 : int | [$k__261[VV#260:=VV#F17][lq_tmp_x_263:=VV#F17][lq_tmp_x_28:=lq_tmp_x_303][lq_tmp_x_325:=lq_tmp_x_303][lq_tmp_x_322:=VV#F17][VV#405:=VV#F17][VV#F:=VV#F17]]}
  id 17 tag [1]
  // META constraint id 17 : monad6.hs:8:12-17


constraint:
  env [0; 1; 2; 3; 19; 4; 5; 6; 7; 8; 9; 10]
  grd true
  lhs {VV#F2 : int | [(VV#F2 > 0)]}
  rhs {VV#F2 : int | [$k__344[VV#343:=VV#F2][lq_tmp_x_16:=z#a13b][lq_tmp_x_19:=lq_anf__d13U][lq_tmp_x_346:=VV#F2][VV#360:=VV#F2][VV#F:=VV#F2]]}
  id 2 tag [1]
  // META constraint id 2 : monad6.hs:(7,9)-(8,45)


constraint:
  env [0; 1; 2; 3; 4; 5; 53; 6; 7; 8; 9; 10; 11; 12; 13]
  grd true
  lhs {VV#F18 : int | [(VV#F18 = x#a13c)]}
  rhs {VV#F18 : int | [$k__294[VV#293:=VV#F18][lq_tmp_x_291:=lq_anf__d13S][lq_tmp_x_296:=VV#F18][VV#408:=VV#F18][VV#F:=VV#F18]]}
  id 18 tag [1]
  // META constraint id 18 : monad6.hs:8:44


constraint:
  env [0; 1; 2; 3; 4; 5; 21; 6; 7; 8; 9; 10]
  grd true
  lhs {VV#F3 : int | [$k__340[VV#339:=VV#F3][lq_tmp_x_16:=z#a13b][lq_tmp_x_342:=VV#F3][VV#364:=VV#F3][VV#F:=VV#F3]]}
  rhs {VV#F3 : int | [$k__241[VV#240:=VV#F3][lq_tmp_x_349:=VV#F3][VV#364:=VV#F3][VV#F:=VV#F3]]}
  id 3 tag [1]
  // META constraint id 3 : monad6.hs:(7,9)-(8,45)


constraint:
  env [0; 1; 2; 3; 4; 5; 6; 7; 55; 8; 9; 10; 11; 12; 13]
  grd true
  lhs {VV#F19 : GHC.Types.Bool | [(VV#F19 = lq_anf__d13S)]}
  rhs {VV#F19 : GHC.Types.Bool | [(? Prop([VV#F19]))]}
  id 19 tag [1]
  // META constraint id 19 : monad6.hs:8:35-40


constraint:
  env [0; 1; 2; 3; 4; 5; 6; 7; 23; 8; 9; 10; 26]
  grd true
  lhs {VV#F4 : int | [$k__248[VV#247:=VV#F4][x#a13c:=lq_tmp_x_20][lq_tmp_x_353:=lq_tmp_x_20][lq_tmp_x_350:=VV#F4][VV#370:=VV#F4][VV#F:=VV#F4]]}
  rhs {VV#F4 : int | [$k__344[VV#343:=VV#F4][lq_tmp_x_16:=z#a13b][lq_tmp_x_346:=VV#F4][VV#370:=VV#F4][VV#F:=VV#F4]]}
  id 4 tag [1]
  // META constraint id 4 : monad6.hs:(7,9)-(8,45)


constraint:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 57; 10; 11; 12]
  grd true
  lhs {VV#F20 : int | [(VV#F20 = lq_anf__d13R)]}
  rhs {VV#F20 : int | [$k__280[VV#279:=VV#F20][lq_tmp_x_276:=fix#GHC.Classes.#36#fOrdInt#35#rhx][lq_tmp_x_277:=x#a13c][lq_tmp_x_282:=VV#F20][VV#414:=VV#F20][VV#F:=VV#F20]]}
  id 20 tag [1]
  // META constraint id 20 : monad6.hs:8:40


constraint:
  env [0; 1; 2; 3; 4; 5; 6; 7; 23; 8; 9; 10; 28]
  grd true
  lhs {VV#F5 : int | [$k__344[VV#343:=VV#F5][lq_tmp_x_16:=z#a13b][lq_tmp_x_346:=VV#F5][VV#373:=VV#F5][VV#F:=VV#F5]]}
  rhs {VV#F5 : int | [$k__248[VV#247:=VV#F5][x#a13c:=lq_tmp_x_20][lq_tmp_x_353:=lq_tmp_x_20][lq_tmp_x_350:=VV#F5][VV#373:=VV#F5][VV#F:=VV#F5]]}
  id 5 tag [1]
  // META constraint id 5 : monad6.hs:(7,9)-(8,45)


constraint:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 59; 12]
  grd true
  lhs {VV#F21 : int | [(VV#F21 = x#a13c)]}
  rhs {VV#F21 : int | [$k__280[VV#279:=VV#F21][lq_tmp_x_276:=fix#GHC.Classes.#36#fOrdInt#35#rhx][lq_tmp_x_282:=VV#F21][VV#417:=VV#F21][VV#F:=VV#F21]]}
  id 21 tag [1]
  // META constraint id 21 : monad6.hs:8:35


constraint:
  env [0; 32; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10]
  grd true
  lhs {VV#F6 : int | [(VV#F6 >= 0)]}
  rhs {VV#F6 : int | [$k__340[VV#339:=VV#F6][lq_tmp_x_342:=VV#F6][VV#378:=VV#F6][VV#F:=VV#F6]]}
  id 6 tag [1]
  // META constraint id 6 : monad6.hs:7:17


constraint:
  env [0; 1; 2; 34; 3; 4; 5; 6; 7; 8; 9; 10]
  grd true
  lhs {VV#F7 : int | [$k__340[VV#339:=VV#F7][lq_tmp_x_342:=VV#F7][VV#381:=VV#F7][VV#F:=VV#F7]]}
  rhs {VV#F7 : int | [(VV#F7 >= 0)]}
  id 7 tag [1]
  // META constraint id 7 : monad6.hs:7:17


constraint:
  env [0; 1; 2; 3; 4; 36; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14]
  grd true
  lhs {VV#F8 : (m_a13q  int) | [$k__317[VV#316:=VV#F8][lq_tmp_x_304:=lq_anf__d13Q][lq_tmp_x_305:=lq_anf__d13T][lq_tmp_x_320:=VV#F8][VV#F:=VV#F8]]}
  rhs {VV#F8 : (m_a13q  int) | [$k__251[VV#250:=VV#F8][VV#F:=VV#F8]]}
  id 8 tag [1]
  // META constraint id 8 : monad6.hs:8:12-45


constraint:
  env [0; 1; 2; 3; 4; 5; 37; 6; 7; 8; 9; 10; 11; 12; 13; 14]
  grd true
  lhs {VV#F9 : m_a13q | [$k__311[lq_tmp_x_304:=lq_anf__d13Q][lq_tmp_x_305:=lq_anf__d13T][VV#310:=VV#F9][VV#F:=VV#F9]]}
  rhs {VV#F9 : m_a13q | [$k__245[VV#244:=VV#F9][VV#F:=VV#F9]]}
  id 9 tag [1]
  // META constraint id 9 : monad6.hs:8:12-45


constraint:
  env [0; 1; 2; 3; 4; 5; 6; 38; 7; 8; 9; 10; 11; 12; 13; 14]
  grd true
  lhs {VV#F10 : int | [$k__314[VV#313:=VV#F10][lq_tmp_x_304:=lq_anf__d13Q][lq_tmp_x_305:=lq_anf__d13T][lq_tmp_x_319:=VV#F10][VV#386:=VV#F10][VV#F:=VV#F10]]}
  rhs {VV#F10 : int | [$k__248[VV#247:=VV#F10][VV#386:=VV#F10][VV#F:=VV#F10]]}
  id 10 tag [1]
  // META constraint id 10 : monad6.hs:8:12-45


constraint:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 40; 9; 10; 11; 12; 13; 14]
  grd true
  lhs {VV#F11 : int | [$k__248[VV#247:=VV#F11][VV#389:=VV#F11][VV#F:=VV#F11]]}
  rhs {VV#F11 : int | [$k__314[VV#313:=VV#F11][lq_tmp_x_304:=lq_anf__d13Q][lq_tmp_x_305:=lq_anf__d13T][lq_tmp_x_319:=VV#F11][VV#389:=VV#F11][VV#F:=VV#F11]]}
  id 11 tag [1]
  // META constraint id 11 : monad6.hs:8:12-45


constraint:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 42; 11; 12; 13; 14]
  grd true
  lhs {VV#F12 : int | [(VV#F12 = lq_anf__d13T)]}
  rhs {VV#F12 : int | [$k__307[VV#306:=VV#F12][lq_tmp_x_304:=lq_anf__d13Q][lq_tmp_x_309:=VV#F12][VV#392:=VV#F12][VV#F:=VV#F12]]}
  id 12 tag [1]
  // META constraint id 12 : monad6.hs:8:21-45


constraint:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 44; 13; 14]
  grd true
  lhs {VV#F13 : int | [$k__307[VV#306:=VV#F13][lq_tmp_x_309:=VV#F13][VV#396:=VV#F13][VV#F:=VV#F13]]}
  rhs {VV#F13 : int | [$k__261[VV#260:=VV#F13][lq_tmp_x_263:=VV#F13][lq_tmp_x_321:=VV#F13][VV#396:=VV#F13][VV#F:=VV#F13]]}
  id 13 tag [1]
  // META constraint id 13 : monad6.hs:8:12-17


constraint:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 46; 47]
  grd true
  lhs {VV#F14 : (m_a13q  int) | []}
  rhs {VV#F14 : (m_a13q  int) | [$k__317[VV#316:=VV#F14][lq_tmp_x_320:=VV#F14][VV#F:=VV#F14]]}
  id 14 tag [1]
  // META constraint id 14 : monad6.hs:8:12-17


constraint:
  env [0; 48; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 46]
  grd true
  lhs {VV#F15 : m_a13q | []}
  rhs {VV#F15 : m_a13q | [$k__311[VV#310:=VV#F15][VV#F:=VV#F15]]}
  id 15 tag [1]
  // META constraint id 15 : monad6.hs:8:12-17




wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10]
  reft {VV#343 : int | [$k__344]}
  
  // META wf  : monad6.hs:(7,9)-(8,45)


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10]
  reft {VV#339 : int | [$k__340]}
  
  // META wf  : monad6.hs:(7,9)-(8,45)


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10]
  reft {VV#240 : int | [$k__241]}
  
  // META wf  : monad6.hs:7:1-3


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14]
  reft {VV#316 : (m_a13q  int) | [$k__317]}
  
  // META wf  : monad6.hs:8:19


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14]
  reft {VV#310 : m_a13q | [$k__311]}
  
  // META wf  : monad6.hs:8:19


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14]
  reft {VV#313 : int | [$k__314]}
  
  // META wf  : monad6.hs:8:19


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14]
  reft {VV#306 : int | [$k__307]}
  
  // META wf  : monad6.hs:8:19


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13]
  reft {VV#293 : int | [$k__294]}
  
  // META wf  : monad6.hs:8:21-32


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12]
  reft {VV#279 : int | [$k__280]}
  
  // META wf  : monad6.hs:8:37-38


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11]
  reft {VV#260 : int | [$k__261]}
  
  // META wf  : monad6.hs:7:1-3


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11]
  reft {VV#250 : (m_a13q  int) | [$k__251]}
  
  // META wf  : monad6.hs:7:1-3


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11]
  reft {VV#244 : m_a13q | [$k__245]}
  
  // META wf  : monad6.hs:7:1-3


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11]
  reft {VV#247 : int | [$k__248]}
  
  // META wf  : monad6.hs:7:1-3







